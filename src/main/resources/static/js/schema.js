(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Schema = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
  "https://swapi.co/api/people/": {
    "count": 87,
    "next": "https://swapi.co/api/people/?page=2",
    "previous": null,
    "results": [
      {
        "name": "Luke Skywalker",
        "height": "172",
        "mass": "77",
        "hair_color": "blond",
        "skin_color": "fair",
        "eye_color": "blue",
        "birth_year": "19BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/1/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/",
          "https://swapi.co/api/films/7/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/14/",
          "https://swapi.co/api/vehicles/30/"
        ],
        "starships": [
          "https://swapi.co/api/starships/12/",
          "https://swapi.co/api/starships/22/"
        ],
        "created": "2014-12-09T13:50:51.644000Z",
        "edited": "2014-12-20T21:17:56.891000Z",
        "url": "https://swapi.co/api/people/1/"
      },
      {
        "name": "C-3PO",
        "height": "167",
        "mass": "75",
        "hair_color": "n/a",
        "skin_color": "gold",
        "eye_color": "yellow",
        "birth_year": "112BBY",
        "gender": "n/a",
        "homeworld": "https://swapi.co/api/planets/1/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/2/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-10T15:10:51.357000Z",
        "edited": "2014-12-20T21:17:50.309000Z",
        "url": "https://swapi.co/api/people/2/"
      },
      {
        "name": "R2-D2",
        "height": "96",
        "mass": "32",
        "hair_color": "n/a",
        "skin_color": "white, blue",
        "eye_color": "red",
        "birth_year": "33BBY",
        "gender": "n/a",
        "homeworld": "https://swapi.co/api/planets/8/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/",
          "https://swapi.co/api/films/7/"
        ],
        "species": [
          "https://swapi.co/api/species/2/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-10T15:11:50.376000Z",
        "edited": "2014-12-20T21:17:50.311000Z",
        "url": "https://swapi.co/api/people/3/"
      },
      {
        "name": "Darth Vader",
        "height": "202",
        "mass": "136",
        "hair_color": "none",
        "skin_color": "white",
        "eye_color": "yellow",
        "birth_year": "41.9BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/1/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/13/"
        ],
        "created": "2014-12-10T15:18:20.704000Z",
        "edited": "2014-12-20T21:17:50.313000Z",
        "url": "https://swapi.co/api/people/4/"
      },
      {
        "name": "Leia Organa",
        "height": "150",
        "mass": "49",
        "hair_color": "brown",
        "skin_color": "light",
        "eye_color": "brown",
        "birth_year": "19BBY",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/2/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/",
          "https://swapi.co/api/films/7/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/30/"
        ],
        "starships": [],
        "created": "2014-12-10T15:20:09.791000Z",
        "edited": "2014-12-20T21:17:50.315000Z",
        "url": "https://swapi.co/api/people/5/"
      },
      {
        "name": "Owen Lars",
        "height": "178",
        "mass": "120",
        "hair_color": "brown, grey",
        "skin_color": "light",
        "eye_color": "blue",
        "birth_year": "52BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/1/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-10T15:52:14.024000Z",
        "edited": "2014-12-20T21:17:50.317000Z",
        "url": "https://swapi.co/api/people/6/"
      },
      {
        "name": "Beru Whitesun lars",
        "height": "165",
        "mass": "75",
        "hair_color": "brown",
        "skin_color": "light",
        "eye_color": "blue",
        "birth_year": "47BBY",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/1/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-10T15:53:41.121000Z",
        "edited": "2014-12-20T21:17:50.319000Z",
        "url": "https://swapi.co/api/people/7/"
      },
      {
        "name": "R5-D4",
        "height": "97",
        "mass": "32",
        "hair_color": "n/a",
        "skin_color": "white, red",
        "eye_color": "red",
        "birth_year": "unknown",
        "gender": "n/a",
        "homeworld": "https://swapi.co/api/planets/1/",
        "films": [
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/2/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-10T15:57:50.959000Z",
        "edited": "2014-12-20T21:17:50.321000Z",
        "url": "https://swapi.co/api/people/8/"
      },
      {
        "name": "Biggs Darklighter",
        "height": "183",
        "mass": "84",
        "hair_color": "black",
        "skin_color": "light",
        "eye_color": "brown",
        "birth_year": "24BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/1/",
        "films": [
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/12/"
        ],
        "created": "2014-12-10T15:59:50.509000Z",
        "edited": "2014-12-20T21:17:50.323000Z",
        "url": "https://swapi.co/api/people/9/"
      },
      {
        "name": "Obi-Wan Kenobi",
        "height": "182",
        "mass": "77",
        "hair_color": "auburn, white",
        "skin_color": "fair",
        "eye_color": "blue-gray",
        "birth_year": "57BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/20/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/38/"
        ],
        "starships": [
          "https://swapi.co/api/starships/48/",
          "https://swapi.co/api/starships/59/",
          "https://swapi.co/api/starships/64/",
          "https://swapi.co/api/starships/65/",
          "https://swapi.co/api/starships/74/"
        ],
        "created": "2014-12-10T16:16:29.192000Z",
        "edited": "2014-12-20T21:17:50.325000Z",
        "url": "https://swapi.co/api/people/10/"
      }
    ]
  },
  "https://swapi.co/api/people/1/": {
    "name": "Luke Skywalker",
    "height": "172",
    "mass": "77",
    "hair_color": "blond",
    "skin_color": "fair",
    "eye_color": "blue",
    "birth_year": "19BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/1/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/",
      "https://swapi.co/api/films/7/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/14/",
      "https://swapi.co/api/vehicles/30/"
    ],
    "starships": [
      "https://swapi.co/api/starships/12/",
      "https://swapi.co/api/starships/22/"
    ],
    "created": "2014-12-09T13:50:51.644000Z",
    "edited": "2014-12-20T21:17:56.891000Z",
    "url": "https://swapi.co/api/people/1/"
  },
  "https://swapi.co/api/people/2/": {
    "name": "C-3PO",
    "height": "167",
    "mass": "75",
    "hair_color": "n/a",
    "skin_color": "gold",
    "eye_color": "yellow",
    "birth_year": "112BBY",
    "gender": "n/a",
    "homeworld": "https://swapi.co/api/planets/1/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/2/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-10T15:10:51.357000Z",
    "edited": "2014-12-20T21:17:50.309000Z",
    "url": "https://swapi.co/api/people/2/"
  },
  "https://swapi.co/api/people/3/": {
    "name": "R2-D2",
    "height": "96",
    "mass": "32",
    "hair_color": "n/a",
    "skin_color": "white, blue",
    "eye_color": "red",
    "birth_year": "33BBY",
    "gender": "n/a",
    "homeworld": "https://swapi.co/api/planets/8/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/",
      "https://swapi.co/api/films/7/"
    ],
    "species": [
      "https://swapi.co/api/species/2/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-10T15:11:50.376000Z",
    "edited": "2014-12-20T21:17:50.311000Z",
    "url": "https://swapi.co/api/people/3/"
  },
  "https://swapi.co/api/people/4/": {
    "name": "Darth Vader",
    "height": "202",
    "mass": "136",
    "hair_color": "none",
    "skin_color": "white",
    "eye_color": "yellow",
    "birth_year": "41.9BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/1/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/13/"
    ],
    "created": "2014-12-10T15:18:20.704000Z",
    "edited": "2014-12-20T21:17:50.313000Z",
    "url": "https://swapi.co/api/people/4/"
  },
  "https://swapi.co/api/people/5/": {
    "name": "Leia Organa",
    "height": "150",
    "mass": "49",
    "hair_color": "brown",
    "skin_color": "light",
    "eye_color": "brown",
    "birth_year": "19BBY",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/2/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/",
      "https://swapi.co/api/films/7/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/30/"
    ],
    "starships": [],
    "created": "2014-12-10T15:20:09.791000Z",
    "edited": "2014-12-20T21:17:50.315000Z",
    "url": "https://swapi.co/api/people/5/"
  },
  "https://swapi.co/api/people/6/": {
    "name": "Owen Lars",
    "height": "178",
    "mass": "120",
    "hair_color": "brown, grey",
    "skin_color": "light",
    "eye_color": "blue",
    "birth_year": "52BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/1/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-10T15:52:14.024000Z",
    "edited": "2014-12-20T21:17:50.317000Z",
    "url": "https://swapi.co/api/people/6/"
  },
  "https://swapi.co/api/people/7/": {
    "name": "Beru Whitesun lars",
    "height": "165",
    "mass": "75",
    "hair_color": "brown",
    "skin_color": "light",
    "eye_color": "blue",
    "birth_year": "47BBY",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/1/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-10T15:53:41.121000Z",
    "edited": "2014-12-20T21:17:50.319000Z",
    "url": "https://swapi.co/api/people/7/"
  },
  "https://swapi.co/api/people/8/": {
    "name": "R5-D4",
    "height": "97",
    "mass": "32",
    "hair_color": "n/a",
    "skin_color": "white, red",
    "eye_color": "red",
    "birth_year": "unknown",
    "gender": "n/a",
    "homeworld": "https://swapi.co/api/planets/1/",
    "films": [
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/2/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-10T15:57:50.959000Z",
    "edited": "2014-12-20T21:17:50.321000Z",
    "url": "https://swapi.co/api/people/8/"
  },
  "https://swapi.co/api/people/9/": {
    "name": "Biggs Darklighter",
    "height": "183",
    "mass": "84",
    "hair_color": "black",
    "skin_color": "light",
    "eye_color": "brown",
    "birth_year": "24BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/1/",
    "films": [
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/12/"
    ],
    "created": "2014-12-10T15:59:50.509000Z",
    "edited": "2014-12-20T21:17:50.323000Z",
    "url": "https://swapi.co/api/people/9/"
  },
  "https://swapi.co/api/people/10/": {
    "name": "Obi-Wan Kenobi",
    "height": "182",
    "mass": "77",
    "hair_color": "auburn, white",
    "skin_color": "fair",
    "eye_color": "blue-gray",
    "birth_year": "57BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/20/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/38/"
    ],
    "starships": [
      "https://swapi.co/api/starships/48/",
      "https://swapi.co/api/starships/59/",
      "https://swapi.co/api/starships/64/",
      "https://swapi.co/api/starships/65/",
      "https://swapi.co/api/starships/74/"
    ],
    "created": "2014-12-10T16:16:29.192000Z",
    "edited": "2014-12-20T21:17:50.325000Z",
    "url": "https://swapi.co/api/people/10/"
  },
  "https://swapi.co/api/people/?page=2": {
    "count": 87,
    "next": "https://swapi.co/api/people/?page=3",
    "previous": "https://swapi.co/api/people/?page=1",
    "results": [
      {
        "name": "Anakin Skywalker",
        "height": "188",
        "mass": "84",
        "hair_color": "blond",
        "skin_color": "fair",
        "eye_color": "blue",
        "birth_year": "41.9BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/1/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/44/",
          "https://swapi.co/api/vehicles/46/"
        ],
        "starships": [
          "https://swapi.co/api/starships/59/",
          "https://swapi.co/api/starships/65/",
          "https://swapi.co/api/starships/39/"
        ],
        "created": "2014-12-10T16:20:44.310000Z",
        "edited": "2014-12-20T21:17:50.327000Z",
        "url": "https://swapi.co/api/people/11/"
      },
      {
        "name": "Wilhuff Tarkin",
        "height": "180",
        "mass": "unknown",
        "hair_color": "auburn, grey",
        "skin_color": "fair",
        "eye_color": "blue",
        "birth_year": "64BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/21/",
        "films": [
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-10T16:26:56.138000Z",
        "edited": "2014-12-20T21:17:50.330000Z",
        "url": "https://swapi.co/api/people/12/"
      },
      {
        "name": "Chewbacca",
        "height": "228",
        "mass": "112",
        "hair_color": "brown",
        "skin_color": "unknown",
        "eye_color": "blue",
        "birth_year": "200BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/14/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/",
          "https://swapi.co/api/films/7/"
        ],
        "species": [
          "https://swapi.co/api/species/3/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/19/"
        ],
        "starships": [
          "https://swapi.co/api/starships/10/",
          "https://swapi.co/api/starships/22/"
        ],
        "created": "2014-12-10T16:42:45.066000Z",
        "edited": "2014-12-20T21:17:50.332000Z",
        "url": "https://swapi.co/api/people/13/"
      },
      {
        "name": "Han Solo",
        "height": "180",
        "mass": "80",
        "hair_color": "brown",
        "skin_color": "fair",
        "eye_color": "brown",
        "birth_year": "29BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/22/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/",
          "https://swapi.co/api/films/7/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/10/",
          "https://swapi.co/api/starships/22/"
        ],
        "created": "2014-12-10T16:49:14.582000Z",
        "edited": "2014-12-20T21:17:50.334000Z",
        "url": "https://swapi.co/api/people/14/"
      },
      {
        "name": "Greedo",
        "height": "173",
        "mass": "74",
        "hair_color": "n/a",
        "skin_color": "green",
        "eye_color": "black",
        "birth_year": "44BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/23/",
        "films": [
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/4/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-10T17:03:30.334000Z",
        "edited": "2014-12-20T21:17:50.336000Z",
        "url": "https://swapi.co/api/people/15/"
      },
      {
        "name": "Jabba Desilijic Tiure",
        "height": "175",
        "mass": "1,358",
        "hair_color": "n/a",
        "skin_color": "green-tan, brown",
        "eye_color": "orange",
        "birth_year": "600BBY",
        "gender": "hermaphrodite",
        "homeworld": "https://swapi.co/api/planets/24/",
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/5/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-10T17:11:31.638000Z",
        "edited": "2014-12-20T21:17:50.338000Z",
        "url": "https://swapi.co/api/people/16/"
      },
      {
        "name": "Wedge Antilles",
        "height": "170",
        "mass": "77",
        "hair_color": "brown",
        "skin_color": "fair",
        "eye_color": "hazel",
        "birth_year": "21BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/22/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/14/"
        ],
        "starships": [
          "https://swapi.co/api/starships/12/"
        ],
        "created": "2014-12-12T11:08:06.469000Z",
        "edited": "2014-12-20T21:17:50.341000Z",
        "url": "https://swapi.co/api/people/18/"
      },
      {
        "name": "Jek Tono Porkins",
        "height": "180",
        "mass": "110",
        "hair_color": "brown",
        "skin_color": "fair",
        "eye_color": "blue",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/26/",
        "films": [
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/12/"
        ],
        "created": "2014-12-12T11:16:56.569000Z",
        "edited": "2014-12-20T21:17:50.343000Z",
        "url": "https://swapi.co/api/people/19/"
      },
      {
        "name": "Yoda",
        "height": "66",
        "mass": "17",
        "hair_color": "white",
        "skin_color": "green",
        "eye_color": "brown",
        "birth_year": "896BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/28/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/"
        ],
        "species": [
          "https://swapi.co/api/species/6/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-15T12:26:01.042000Z",
        "edited": "2014-12-20T21:17:50.345000Z",
        "url": "https://swapi.co/api/people/20/"
      },
      {
        "name": "Palpatine",
        "height": "170",
        "mass": "75",
        "hair_color": "grey",
        "skin_color": "pale",
        "eye_color": "yellow",
        "birth_year": "82BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/8/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-15T12:48:05.971000Z",
        "edited": "2014-12-20T21:17:50.347000Z",
        "url": "https://swapi.co/api/people/21/"
      }
    ]
  },
  "https://swapi.co/api/people/11/": {
    "name": "Anakin Skywalker",
    "height": "188",
    "mass": "84",
    "hair_color": "blond",
    "skin_color": "fair",
    "eye_color": "blue",
    "birth_year": "41.9BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/1/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/44/",
      "https://swapi.co/api/vehicles/46/"
    ],
    "starships": [
      "https://swapi.co/api/starships/59/",
      "https://swapi.co/api/starships/65/",
      "https://swapi.co/api/starships/39/"
    ],
    "created": "2014-12-10T16:20:44.310000Z",
    "edited": "2014-12-20T21:17:50.327000Z",
    "url": "https://swapi.co/api/people/11/"
  },
  "https://swapi.co/api/people/12/": {
    "name": "Wilhuff Tarkin",
    "height": "180",
    "mass": "unknown",
    "hair_color": "auburn, grey",
    "skin_color": "fair",
    "eye_color": "blue",
    "birth_year": "64BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/21/",
    "films": [
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-10T16:26:56.138000Z",
    "edited": "2014-12-20T21:17:50.330000Z",
    "url": "https://swapi.co/api/people/12/"
  },
  "https://swapi.co/api/people/13/": {
    "name": "Chewbacca",
    "height": "228",
    "mass": "112",
    "hair_color": "brown",
    "skin_color": "unknown",
    "eye_color": "blue",
    "birth_year": "200BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/14/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/",
      "https://swapi.co/api/films/7/"
    ],
    "species": [
      "https://swapi.co/api/species/3/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/19/"
    ],
    "starships": [
      "https://swapi.co/api/starships/10/",
      "https://swapi.co/api/starships/22/"
    ],
    "created": "2014-12-10T16:42:45.066000Z",
    "edited": "2014-12-20T21:17:50.332000Z",
    "url": "https://swapi.co/api/people/13/"
  },
  "https://swapi.co/api/people/14/": {
    "name": "Han Solo",
    "height": "180",
    "mass": "80",
    "hair_color": "brown",
    "skin_color": "fair",
    "eye_color": "brown",
    "birth_year": "29BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/22/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/",
      "https://swapi.co/api/films/7/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/10/",
      "https://swapi.co/api/starships/22/"
    ],
    "created": "2014-12-10T16:49:14.582000Z",
    "edited": "2014-12-20T21:17:50.334000Z",
    "url": "https://swapi.co/api/people/14/"
  },
  "https://swapi.co/api/people/15/": {
    "name": "Greedo",
    "height": "173",
    "mass": "74",
    "hair_color": "n/a",
    "skin_color": "green",
    "eye_color": "black",
    "birth_year": "44BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/23/",
    "films": [
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/4/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-10T17:03:30.334000Z",
    "edited": "2014-12-20T21:17:50.336000Z",
    "url": "https://swapi.co/api/people/15/"
  },
  "https://swapi.co/api/people/16/": {
    "name": "Jabba Desilijic Tiure",
    "height": "175",
    "mass": "1,358",
    "hair_color": "n/a",
    "skin_color": "green-tan, brown",
    "eye_color": "orange",
    "birth_year": "600BBY",
    "gender": "hermaphrodite",
    "homeworld": "https://swapi.co/api/planets/24/",
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/5/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-10T17:11:31.638000Z",
    "edited": "2014-12-20T21:17:50.338000Z",
    "url": "https://swapi.co/api/people/16/"
  },
  "https://swapi.co/api/people/18/": {
    "name": "Wedge Antilles",
    "height": "170",
    "mass": "77",
    "hair_color": "brown",
    "skin_color": "fair",
    "eye_color": "hazel",
    "birth_year": "21BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/22/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/14/"
    ],
    "starships": [
      "https://swapi.co/api/starships/12/"
    ],
    "created": "2014-12-12T11:08:06.469000Z",
    "edited": "2014-12-20T21:17:50.341000Z",
    "url": "https://swapi.co/api/people/18/"
  },
  "https://swapi.co/api/people/19/": {
    "name": "Jek Tono Porkins",
    "height": "180",
    "mass": "110",
    "hair_color": "brown",
    "skin_color": "fair",
    "eye_color": "blue",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/26/",
    "films": [
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/12/"
    ],
    "created": "2014-12-12T11:16:56.569000Z",
    "edited": "2014-12-20T21:17:50.343000Z",
    "url": "https://swapi.co/api/people/19/"
  },
  "https://swapi.co/api/people/20/": {
    "name": "Yoda",
    "height": "66",
    "mass": "17",
    "hair_color": "white",
    "skin_color": "green",
    "eye_color": "brown",
    "birth_year": "896BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/28/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/"
    ],
    "species": [
      "https://swapi.co/api/species/6/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-15T12:26:01.042000Z",
    "edited": "2014-12-20T21:17:50.345000Z",
    "url": "https://swapi.co/api/people/20/"
  },
  "https://swapi.co/api/people/21/": {
    "name": "Palpatine",
    "height": "170",
    "mass": "75",
    "hair_color": "grey",
    "skin_color": "pale",
    "eye_color": "yellow",
    "birth_year": "82BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/8/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-15T12:48:05.971000Z",
    "edited": "2014-12-20T21:17:50.347000Z",
    "url": "https://swapi.co/api/people/21/"
  },
  "https://swapi.co/api/people/?page=3": {
    "count": 87,
    "next": "https://swapi.co/api/people/?page=4",
    "previous": "https://swapi.co/api/people/?page=2",
    "results": [
      {
        "name": "Boba Fett",
        "height": "183",
        "mass": "78.2",
        "hair_color": "black",
        "skin_color": "fair",
        "eye_color": "brown",
        "birth_year": "31.5BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/10/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/3/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/21/"
        ],
        "created": "2014-12-15T12:49:32.457000Z",
        "edited": "2014-12-20T21:17:50.349000Z",
        "url": "https://swapi.co/api/people/22/"
      },
      {
        "name": "IG-88",
        "height": "200",
        "mass": "140",
        "hair_color": "none",
        "skin_color": "metal",
        "eye_color": "red",
        "birth_year": "15BBY",
        "gender": "none",
        "homeworld": "https://swapi.co/api/planets/28/",
        "films": [
          "https://swapi.co/api/films/2/"
        ],
        "species": [
          "https://swapi.co/api/species/2/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-15T12:51:10.076000Z",
        "edited": "2014-12-20T21:17:50.351000Z",
        "url": "https://swapi.co/api/people/23/"
      },
      {
        "name": "Bossk",
        "height": "190",
        "mass": "113",
        "hair_color": "none",
        "skin_color": "green",
        "eye_color": "red",
        "birth_year": "53BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/29/",
        "films": [
          "https://swapi.co/api/films/2/"
        ],
        "species": [
          "https://swapi.co/api/species/7/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-15T12:53:49.297000Z",
        "edited": "2014-12-20T21:17:50.355000Z",
        "url": "https://swapi.co/api/people/24/"
      },
      {
        "name": "Lando Calrissian",
        "height": "177",
        "mass": "79",
        "hair_color": "black",
        "skin_color": "dark",
        "eye_color": "brown",
        "birth_year": "31BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/30/",
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/10/"
        ],
        "created": "2014-12-15T12:56:32.683000Z",
        "edited": "2014-12-20T21:17:50.357000Z",
        "url": "https://swapi.co/api/people/25/"
      },
      {
        "name": "Lobot",
        "height": "175",
        "mass": "79",
        "hair_color": "none",
        "skin_color": "light",
        "eye_color": "blue",
        "birth_year": "37BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/6/",
        "films": [
          "https://swapi.co/api/films/2/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-15T13:01:57.178000Z",
        "edited": "2014-12-20T21:17:50.359000Z",
        "url": "https://swapi.co/api/people/26/"
      },
      {
        "name": "Ackbar",
        "height": "180",
        "mass": "83",
        "hair_color": "none",
        "skin_color": "brown mottle",
        "eye_color": "orange",
        "birth_year": "41BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/31/",
        "films": [
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/7/"
        ],
        "species": [
          "https://swapi.co/api/species/8/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-18T11:07:50.584000Z",
        "edited": "2014-12-20T21:17:50.362000Z",
        "url": "https://swapi.co/api/people/27/"
      },
      {
        "name": "Mon Mothma",
        "height": "150",
        "mass": "unknown",
        "hair_color": "auburn",
        "skin_color": "fair",
        "eye_color": "blue",
        "birth_year": "48BBY",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/32/",
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-18T11:12:38.895000Z",
        "edited": "2014-12-20T21:17:50.364000Z",
        "url": "https://swapi.co/api/people/28/"
      },
      {
        "name": "Arvel Crynyd",
        "height": "unknown",
        "mass": "unknown",
        "hair_color": "brown",
        "skin_color": "fair",
        "eye_color": "brown",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/28/",
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/28/"
        ],
        "created": "2014-12-18T11:16:33.020000Z",
        "edited": "2014-12-20T21:17:50.367000Z",
        "url": "https://swapi.co/api/people/29/"
      },
      {
        "name": "Wicket Systri Warrick",
        "height": "88",
        "mass": "20",
        "hair_color": "brown",
        "skin_color": "brown",
        "eye_color": "brown",
        "birth_year": "8BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/7/",
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "species": [
          "https://swapi.co/api/species/9/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-18T11:21:58.954000Z",
        "edited": "2014-12-20T21:17:50.369000Z",
        "url": "https://swapi.co/api/people/30/"
      },
      {
        "name": "Nien Nunb",
        "height": "160",
        "mass": "68",
        "hair_color": "none",
        "skin_color": "grey",
        "eye_color": "black",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/33/",
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "species": [
          "https://swapi.co/api/species/10/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/10/"
        ],
        "created": "2014-12-18T11:26:18.541000Z",
        "edited": "2014-12-20T21:17:50.371000Z",
        "url": "https://swapi.co/api/people/31/"
      }
    ]
  },
  "https://swapi.co/api/people/22/": {
    "name": "Boba Fett",
    "height": "183",
    "mass": "78.2",
    "hair_color": "black",
    "skin_color": "fair",
    "eye_color": "brown",
    "birth_year": "31.5BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/10/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/3/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/21/"
    ],
    "created": "2014-12-15T12:49:32.457000Z",
    "edited": "2014-12-20T21:17:50.349000Z",
    "url": "https://swapi.co/api/people/22/"
  },
  "https://swapi.co/api/people/23/": {
    "name": "IG-88",
    "height": "200",
    "mass": "140",
    "hair_color": "none",
    "skin_color": "metal",
    "eye_color": "red",
    "birth_year": "15BBY",
    "gender": "none",
    "homeworld": "https://swapi.co/api/planets/28/",
    "films": [
      "https://swapi.co/api/films/2/"
    ],
    "species": [
      "https://swapi.co/api/species/2/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-15T12:51:10.076000Z",
    "edited": "2014-12-20T21:17:50.351000Z",
    "url": "https://swapi.co/api/people/23/"
  },
  "https://swapi.co/api/people/24/": {
    "name": "Bossk",
    "height": "190",
    "mass": "113",
    "hair_color": "none",
    "skin_color": "green",
    "eye_color": "red",
    "birth_year": "53BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/29/",
    "films": [
      "https://swapi.co/api/films/2/"
    ],
    "species": [
      "https://swapi.co/api/species/7/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-15T12:53:49.297000Z",
    "edited": "2014-12-20T21:17:50.355000Z",
    "url": "https://swapi.co/api/people/24/"
  },
  "https://swapi.co/api/people/25/": {
    "name": "Lando Calrissian",
    "height": "177",
    "mass": "79",
    "hair_color": "black",
    "skin_color": "dark",
    "eye_color": "brown",
    "birth_year": "31BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/30/",
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/10/"
    ],
    "created": "2014-12-15T12:56:32.683000Z",
    "edited": "2014-12-20T21:17:50.357000Z",
    "url": "https://swapi.co/api/people/25/"
  },
  "https://swapi.co/api/people/26/": {
    "name": "Lobot",
    "height": "175",
    "mass": "79",
    "hair_color": "none",
    "skin_color": "light",
    "eye_color": "blue",
    "birth_year": "37BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/6/",
    "films": [
      "https://swapi.co/api/films/2/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-15T13:01:57.178000Z",
    "edited": "2014-12-20T21:17:50.359000Z",
    "url": "https://swapi.co/api/people/26/"
  },
  "https://swapi.co/api/people/27/": {
    "name": "Ackbar",
    "height": "180",
    "mass": "83",
    "hair_color": "none",
    "skin_color": "brown mottle",
    "eye_color": "orange",
    "birth_year": "41BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/31/",
    "films": [
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/7/"
    ],
    "species": [
      "https://swapi.co/api/species/8/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-18T11:07:50.584000Z",
    "edited": "2014-12-20T21:17:50.362000Z",
    "url": "https://swapi.co/api/people/27/"
  },
  "https://swapi.co/api/people/28/": {
    "name": "Mon Mothma",
    "height": "150",
    "mass": "unknown",
    "hair_color": "auburn",
    "skin_color": "fair",
    "eye_color": "blue",
    "birth_year": "48BBY",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/32/",
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-18T11:12:38.895000Z",
    "edited": "2014-12-20T21:17:50.364000Z",
    "url": "https://swapi.co/api/people/28/"
  },
  "https://swapi.co/api/people/29/": {
    "name": "Arvel Crynyd",
    "height": "unknown",
    "mass": "unknown",
    "hair_color": "brown",
    "skin_color": "fair",
    "eye_color": "brown",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/28/",
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/28/"
    ],
    "created": "2014-12-18T11:16:33.020000Z",
    "edited": "2014-12-20T21:17:50.367000Z",
    "url": "https://swapi.co/api/people/29/"
  },
  "https://swapi.co/api/people/30/": {
    "name": "Wicket Systri Warrick",
    "height": "88",
    "mass": "20",
    "hair_color": "brown",
    "skin_color": "brown",
    "eye_color": "brown",
    "birth_year": "8BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/7/",
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "species": [
      "https://swapi.co/api/species/9/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-18T11:21:58.954000Z",
    "edited": "2014-12-20T21:17:50.369000Z",
    "url": "https://swapi.co/api/people/30/"
  },
  "https://swapi.co/api/people/31/": {
    "name": "Nien Nunb",
    "height": "160",
    "mass": "68",
    "hair_color": "none",
    "skin_color": "grey",
    "eye_color": "black",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/33/",
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "species": [
      "https://swapi.co/api/species/10/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/10/"
    ],
    "created": "2014-12-18T11:26:18.541000Z",
    "edited": "2014-12-20T21:17:50.371000Z",
    "url": "https://swapi.co/api/people/31/"
  },
  "https://swapi.co/api/people/?page=4": {
    "count": 87,
    "next": "https://swapi.co/api/people/?page=5",
    "previous": "https://swapi.co/api/people/?page=3",
    "results": [
      {
        "name": "Qui-Gon Jinn",
        "height": "193",
        "mass": "89",
        "hair_color": "brown",
        "skin_color": "fair",
        "eye_color": "blue",
        "birth_year": "92BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/28/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/38/"
        ],
        "starships": [],
        "created": "2014-12-19T16:54:53.618000Z",
        "edited": "2014-12-20T21:17:50.375000Z",
        "url": "https://swapi.co/api/people/32/"
      },
      {
        "name": "Nute Gunray",
        "height": "191",
        "mass": "90",
        "hair_color": "none",
        "skin_color": "mottled green",
        "eye_color": "red",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/18/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/11/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-19T17:05:57.357000Z",
        "edited": "2014-12-20T21:17:50.377000Z",
        "url": "https://swapi.co/api/people/33/"
      },
      {
        "name": "Finis Valorum",
        "height": "170",
        "mass": "unknown",
        "hair_color": "blond",
        "skin_color": "fair",
        "eye_color": "blue",
        "birth_year": "91BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/9/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-19T17:21:45.915000Z",
        "edited": "2014-12-20T21:17:50.379000Z",
        "url": "https://swapi.co/api/people/34/"
      },
      {
        "name": "Jar Jar Binks",
        "height": "196",
        "mass": "66",
        "hair_color": "none",
        "skin_color": "orange",
        "eye_color": "orange",
        "birth_year": "52BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/8/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/12/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-19T17:29:32.489000Z",
        "edited": "2014-12-20T21:17:50.383000Z",
        "url": "https://swapi.co/api/people/36/"
      },
      {
        "name": "Roos Tarpals",
        "height": "224",
        "mass": "82",
        "hair_color": "none",
        "skin_color": "grey",
        "eye_color": "orange",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/8/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/12/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-19T17:32:56.741000Z",
        "edited": "2014-12-20T21:17:50.385000Z",
        "url": "https://swapi.co/api/people/37/"
      },
      {
        "name": "Rugor Nass",
        "height": "206",
        "mass": "unknown",
        "hair_color": "none",
        "skin_color": "green",
        "eye_color": "orange",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/8/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/12/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-19T17:33:38.909000Z",
        "edited": "2014-12-20T21:17:50.388000Z",
        "url": "https://swapi.co/api/people/38/"
      },
      {
        "name": "Ric Olié",
        "height": "183",
        "mass": "unknown",
        "hair_color": "brown",
        "skin_color": "fair",
        "eye_color": "blue",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/8/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/40/"
        ],
        "created": "2014-12-19T17:45:01.522000Z",
        "edited": "2014-12-20T21:17:50.392000Z",
        "url": "https://swapi.co/api/people/39/"
      },
      {
        "name": "Watto",
        "height": "137",
        "mass": "unknown",
        "hair_color": "black",
        "skin_color": "blue, grey",
        "eye_color": "yellow",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/34/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/13/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-19T17:48:54.647000Z",
        "edited": "2014-12-20T21:17:50.395000Z",
        "url": "https://swapi.co/api/people/40/"
      },
      {
        "name": "Sebulba",
        "height": "112",
        "mass": "40",
        "hair_color": "none",
        "skin_color": "grey, red",
        "eye_color": "orange",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/35/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/14/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-19T17:53:02.586000Z",
        "edited": "2014-12-20T21:17:50.397000Z",
        "url": "https://swapi.co/api/people/41/"
      },
      {
        "name": "Quarsh Panaka",
        "height": "183",
        "mass": "unknown",
        "hair_color": "black",
        "skin_color": "dark",
        "eye_color": "brown",
        "birth_year": "62BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/8/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-19T17:55:43.348000Z",
        "edited": "2014-12-20T21:17:50.399000Z",
        "url": "https://swapi.co/api/people/42/"
      }
    ]
  },
  "https://swapi.co/api/people/32/": {
    "name": "Qui-Gon Jinn",
    "height": "193",
    "mass": "89",
    "hair_color": "brown",
    "skin_color": "fair",
    "eye_color": "blue",
    "birth_year": "92BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/28/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/38/"
    ],
    "starships": [],
    "created": "2014-12-19T16:54:53.618000Z",
    "edited": "2014-12-20T21:17:50.375000Z",
    "url": "https://swapi.co/api/people/32/"
  },
  "https://swapi.co/api/people/33/": {
    "name": "Nute Gunray",
    "height": "191",
    "mass": "90",
    "hair_color": "none",
    "skin_color": "mottled green",
    "eye_color": "red",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/18/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/11/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-19T17:05:57.357000Z",
    "edited": "2014-12-20T21:17:50.377000Z",
    "url": "https://swapi.co/api/people/33/"
  },
  "https://swapi.co/api/people/34/": {
    "name": "Finis Valorum",
    "height": "170",
    "mass": "unknown",
    "hair_color": "blond",
    "skin_color": "fair",
    "eye_color": "blue",
    "birth_year": "91BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/9/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-19T17:21:45.915000Z",
    "edited": "2014-12-20T21:17:50.379000Z",
    "url": "https://swapi.co/api/people/34/"
  },
  "https://swapi.co/api/people/36/": {
    "name": "Jar Jar Binks",
    "height": "196",
    "mass": "66",
    "hair_color": "none",
    "skin_color": "orange",
    "eye_color": "orange",
    "birth_year": "52BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/8/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/12/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-19T17:29:32.489000Z",
    "edited": "2014-12-20T21:17:50.383000Z",
    "url": "https://swapi.co/api/people/36/"
  },
  "https://swapi.co/api/people/37/": {
    "name": "Roos Tarpals",
    "height": "224",
    "mass": "82",
    "hair_color": "none",
    "skin_color": "grey",
    "eye_color": "orange",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/8/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/12/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-19T17:32:56.741000Z",
    "edited": "2014-12-20T21:17:50.385000Z",
    "url": "https://swapi.co/api/people/37/"
  },
  "https://swapi.co/api/people/38/": {
    "name": "Rugor Nass",
    "height": "206",
    "mass": "unknown",
    "hair_color": "none",
    "skin_color": "green",
    "eye_color": "orange",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/8/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/12/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-19T17:33:38.909000Z",
    "edited": "2014-12-20T21:17:50.388000Z",
    "url": "https://swapi.co/api/people/38/"
  },
  "https://swapi.co/api/people/39/": {
    "name": "Ric Olié",
    "height": "183",
    "mass": "unknown",
    "hair_color": "brown",
    "skin_color": "fair",
    "eye_color": "blue",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/8/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/40/"
    ],
    "created": "2014-12-19T17:45:01.522000Z",
    "edited": "2014-12-20T21:17:50.392000Z",
    "url": "https://swapi.co/api/people/39/"
  },
  "https://swapi.co/api/people/40/": {
    "name": "Watto",
    "height": "137",
    "mass": "unknown",
    "hair_color": "black",
    "skin_color": "blue, grey",
    "eye_color": "yellow",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/34/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/13/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-19T17:48:54.647000Z",
    "edited": "2014-12-20T21:17:50.395000Z",
    "url": "https://swapi.co/api/people/40/"
  },
  "https://swapi.co/api/people/41/": {
    "name": "Sebulba",
    "height": "112",
    "mass": "40",
    "hair_color": "none",
    "skin_color": "grey, red",
    "eye_color": "orange",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/35/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/14/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-19T17:53:02.586000Z",
    "edited": "2014-12-20T21:17:50.397000Z",
    "url": "https://swapi.co/api/people/41/"
  },
  "https://swapi.co/api/people/42/": {
    "name": "Quarsh Panaka",
    "height": "183",
    "mass": "unknown",
    "hair_color": "black",
    "skin_color": "dark",
    "eye_color": "brown",
    "birth_year": "62BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/8/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-19T17:55:43.348000Z",
    "edited": "2014-12-20T21:17:50.399000Z",
    "url": "https://swapi.co/api/people/42/"
  },
  "https://swapi.co/api/people/?page=5": {
    "count": 87,
    "next": "https://swapi.co/api/people/?page=6",
    "previous": "https://swapi.co/api/people/?page=4",
    "results": [
      {
        "name": "Shmi Skywalker",
        "height": "163",
        "mass": "unknown",
        "hair_color": "black",
        "skin_color": "fair",
        "eye_color": "brown",
        "birth_year": "72BBY",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/1/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-19T17:57:41.191000Z",
        "edited": "2014-12-20T21:17:50.401000Z",
        "url": "https://swapi.co/api/people/43/"
      },
      {
        "name": "Darth Maul",
        "height": "175",
        "mass": "80",
        "hair_color": "none",
        "skin_color": "red",
        "eye_color": "yellow",
        "birth_year": "54BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/36/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/22/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/42/"
        ],
        "starships": [
          "https://swapi.co/api/starships/41/"
        ],
        "created": "2014-12-19T18:00:41.929000Z",
        "edited": "2014-12-20T21:17:50.403000Z",
        "url": "https://swapi.co/api/people/44/"
      },
      {
        "name": "Bib Fortuna",
        "height": "180",
        "mass": "unknown",
        "hair_color": "none",
        "skin_color": "pale",
        "eye_color": "pink",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/37/",
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "species": [
          "https://swapi.co/api/species/15/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T09:47:02.512000Z",
        "edited": "2014-12-20T21:17:50.407000Z",
        "url": "https://swapi.co/api/people/45/"
      },
      {
        "name": "Ayla Secura",
        "height": "178",
        "mass": "55",
        "hair_color": "none",
        "skin_color": "blue",
        "eye_color": "hazel",
        "birth_year": "48BBY",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/37/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/15/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T09:48:01.172000Z",
        "edited": "2014-12-20T21:17:50.409000Z",
        "url": "https://swapi.co/api/people/46/"
      },
      {
        "name": "Dud Bolt",
        "height": "94",
        "mass": "45",
        "hair_color": "none",
        "skin_color": "blue, grey",
        "eye_color": "yellow",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/39/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/17/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T09:57:31.858000Z",
        "edited": "2014-12-20T21:17:50.414000Z",
        "url": "https://swapi.co/api/people/48/"
      },
      {
        "name": "Gasgano",
        "height": "122",
        "mass": "unknown",
        "hair_color": "none",
        "skin_color": "white, blue",
        "eye_color": "black",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/40/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/18/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T10:02:12.223000Z",
        "edited": "2014-12-20T21:17:50.416000Z",
        "url": "https://swapi.co/api/people/49/"
      },
      {
        "name": "Ben Quadinaros",
        "height": "163",
        "mass": "65",
        "hair_color": "none",
        "skin_color": "grey, green, yellow",
        "eye_color": "orange",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/41/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/19/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T10:08:33.777000Z",
        "edited": "2014-12-20T21:17:50.417000Z",
        "url": "https://swapi.co/api/people/50/"
      },
      {
        "name": "Mace Windu",
        "height": "188",
        "mass": "84",
        "hair_color": "none",
        "skin_color": "dark",
        "eye_color": "brown",
        "birth_year": "72BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/42/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T10:12:30.846000Z",
        "edited": "2014-12-20T21:17:50.420000Z",
        "url": "https://swapi.co/api/people/51/"
      },
      {
        "name": "Ki-Adi-Mundi",
        "height": "198",
        "mass": "82",
        "hair_color": "white",
        "skin_color": "pale",
        "eye_color": "yellow",
        "birth_year": "92BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/43/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/20/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T10:15:32.293000Z",
        "edited": "2014-12-20T21:17:50.422000Z",
        "url": "https://swapi.co/api/people/52/"
      },
      {
        "name": "Kit Fisto",
        "height": "196",
        "mass": "87",
        "hair_color": "none",
        "skin_color": "green",
        "eye_color": "black",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/44/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/21/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T10:18:57.202000Z",
        "edited": "2014-12-20T21:17:50.424000Z",
        "url": "https://swapi.co/api/people/53/"
      }
    ]
  },
  "https://swapi.co/api/people/43/": {
    "name": "Shmi Skywalker",
    "height": "163",
    "mass": "unknown",
    "hair_color": "black",
    "skin_color": "fair",
    "eye_color": "brown",
    "birth_year": "72BBY",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/1/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-19T17:57:41.191000Z",
    "edited": "2014-12-20T21:17:50.401000Z",
    "url": "https://swapi.co/api/people/43/"
  },
  "https://swapi.co/api/people/44/": {
    "name": "Darth Maul",
    "height": "175",
    "mass": "80",
    "hair_color": "none",
    "skin_color": "red",
    "eye_color": "yellow",
    "birth_year": "54BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/36/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/22/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/42/"
    ],
    "starships": [
      "https://swapi.co/api/starships/41/"
    ],
    "created": "2014-12-19T18:00:41.929000Z",
    "edited": "2014-12-20T21:17:50.403000Z",
    "url": "https://swapi.co/api/people/44/"
  },
  "https://swapi.co/api/people/45/": {
    "name": "Bib Fortuna",
    "height": "180",
    "mass": "unknown",
    "hair_color": "none",
    "skin_color": "pale",
    "eye_color": "pink",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/37/",
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "species": [
      "https://swapi.co/api/species/15/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T09:47:02.512000Z",
    "edited": "2014-12-20T21:17:50.407000Z",
    "url": "https://swapi.co/api/people/45/"
  },
  "https://swapi.co/api/people/46/": {
    "name": "Ayla Secura",
    "height": "178",
    "mass": "55",
    "hair_color": "none",
    "skin_color": "blue",
    "eye_color": "hazel",
    "birth_year": "48BBY",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/37/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/15/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T09:48:01.172000Z",
    "edited": "2014-12-20T21:17:50.409000Z",
    "url": "https://swapi.co/api/people/46/"
  },
  "https://swapi.co/api/people/48/": {
    "name": "Dud Bolt",
    "height": "94",
    "mass": "45",
    "hair_color": "none",
    "skin_color": "blue, grey",
    "eye_color": "yellow",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/39/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/17/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T09:57:31.858000Z",
    "edited": "2014-12-20T21:17:50.414000Z",
    "url": "https://swapi.co/api/people/48/"
  },
  "https://swapi.co/api/people/49/": {
    "name": "Gasgano",
    "height": "122",
    "mass": "unknown",
    "hair_color": "none",
    "skin_color": "white, blue",
    "eye_color": "black",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/40/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/18/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T10:02:12.223000Z",
    "edited": "2014-12-20T21:17:50.416000Z",
    "url": "https://swapi.co/api/people/49/"
  },
  "https://swapi.co/api/people/50/": {
    "name": "Ben Quadinaros",
    "height": "163",
    "mass": "65",
    "hair_color": "none",
    "skin_color": "grey, green, yellow",
    "eye_color": "orange",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/41/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/19/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T10:08:33.777000Z",
    "edited": "2014-12-20T21:17:50.417000Z",
    "url": "https://swapi.co/api/people/50/"
  },
  "https://swapi.co/api/people/51/": {
    "name": "Mace Windu",
    "height": "188",
    "mass": "84",
    "hair_color": "none",
    "skin_color": "dark",
    "eye_color": "brown",
    "birth_year": "72BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/42/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T10:12:30.846000Z",
    "edited": "2014-12-20T21:17:50.420000Z",
    "url": "https://swapi.co/api/people/51/"
  },
  "https://swapi.co/api/people/52/": {
    "name": "Ki-Adi-Mundi",
    "height": "198",
    "mass": "82",
    "hair_color": "white",
    "skin_color": "pale",
    "eye_color": "yellow",
    "birth_year": "92BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/43/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/20/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T10:15:32.293000Z",
    "edited": "2014-12-20T21:17:50.422000Z",
    "url": "https://swapi.co/api/people/52/"
  },
  "https://swapi.co/api/people/53/": {
    "name": "Kit Fisto",
    "height": "196",
    "mass": "87",
    "hair_color": "none",
    "skin_color": "green",
    "eye_color": "black",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/44/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/21/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T10:18:57.202000Z",
    "edited": "2014-12-20T21:17:50.424000Z",
    "url": "https://swapi.co/api/people/53/"
  },
  "https://swapi.co/api/people/?page=6": {
    "count": 87,
    "next": "https://swapi.co/api/people/?page=7",
    "previous": "https://swapi.co/api/people/?page=5",
    "results": [
      {
        "name": "Eeth Koth",
        "height": "171",
        "mass": "unknown",
        "hair_color": "black",
        "skin_color": "brown",
        "eye_color": "brown",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/45/",
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/22/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T10:26:47.902000Z",
        "edited": "2014-12-20T21:17:50.427000Z",
        "url": "https://swapi.co/api/people/54/"
      },
      {
        "name": "Adi Gallia",
        "height": "184",
        "mass": "50",
        "hair_color": "none",
        "skin_color": "dark",
        "eye_color": "blue",
        "birth_year": "unknown",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/9/",
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/23/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T10:29:11.661000Z",
        "edited": "2014-12-20T21:17:50.432000Z",
        "url": "https://swapi.co/api/people/55/"
      },
      {
        "name": "Saesee Tiin",
        "height": "188",
        "mass": "unknown",
        "hair_color": "none",
        "skin_color": "pale",
        "eye_color": "orange",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/47/",
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/24/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T10:32:11.669000Z",
        "edited": "2014-12-20T21:17:50.434000Z",
        "url": "https://swapi.co/api/people/56/"
      },
      {
        "name": "Yarael Poof",
        "height": "264",
        "mass": "unknown",
        "hair_color": "none",
        "skin_color": "white",
        "eye_color": "yellow",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/48/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/25/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T10:34:48.725000Z",
        "edited": "2014-12-20T21:17:50.437000Z",
        "url": "https://swapi.co/api/people/57/"
      },
      {
        "name": "Plo Koon",
        "height": "188",
        "mass": "80",
        "hair_color": "none",
        "skin_color": "orange",
        "eye_color": "black",
        "birth_year": "22BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/49/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/26/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/48/"
        ],
        "created": "2014-12-20T10:49:19.859000Z",
        "edited": "2014-12-20T21:17:50.439000Z",
        "url": "https://swapi.co/api/people/58/"
      },
      {
        "name": "Mas Amedda",
        "height": "196",
        "mass": "unknown",
        "hair_color": "none",
        "skin_color": "blue",
        "eye_color": "blue",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/50/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/27/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T10:53:26.457000Z",
        "edited": "2014-12-20T21:17:50.442000Z",
        "url": "https://swapi.co/api/people/59/"
      },
      {
        "name": "Gregar Typho",
        "height": "185",
        "mass": "85",
        "hair_color": "black",
        "skin_color": "dark",
        "eye_color": "brown",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/8/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/39/"
        ],
        "created": "2014-12-20T11:10:10.381000Z",
        "edited": "2014-12-20T21:17:50.445000Z",
        "url": "https://swapi.co/api/people/60/"
      },
      {
        "name": "Cordé",
        "height": "157",
        "mass": "unknown",
        "hair_color": "brown",
        "skin_color": "light",
        "eye_color": "brown",
        "birth_year": "unknown",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/8/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T11:11:39.630000Z",
        "edited": "2014-12-20T21:17:50.449000Z",
        "url": "https://swapi.co/api/people/61/"
      },
      {
        "name": "Cliegg Lars",
        "height": "183",
        "mass": "unknown",
        "hair_color": "brown",
        "skin_color": "fair",
        "eye_color": "blue",
        "birth_year": "82BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/1/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T15:59:03.958000Z",
        "edited": "2014-12-20T21:17:50.451000Z",
        "url": "https://swapi.co/api/people/62/"
      },
      {
        "name": "Poggle the Lesser",
        "height": "183",
        "mass": "80",
        "hair_color": "none",
        "skin_color": "green",
        "eye_color": "yellow",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/11/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/28/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T16:40:43.977000Z",
        "edited": "2014-12-20T21:17:50.453000Z",
        "url": "https://swapi.co/api/people/63/"
      }
    ]
  },
  "https://swapi.co/api/people/54/": {
    "name": "Eeth Koth",
    "height": "171",
    "mass": "unknown",
    "hair_color": "black",
    "skin_color": "brown",
    "eye_color": "brown",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/45/",
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/22/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T10:26:47.902000Z",
    "edited": "2014-12-20T21:17:50.427000Z",
    "url": "https://swapi.co/api/people/54/"
  },
  "https://swapi.co/api/people/55/": {
    "name": "Adi Gallia",
    "height": "184",
    "mass": "50",
    "hair_color": "none",
    "skin_color": "dark",
    "eye_color": "blue",
    "birth_year": "unknown",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/9/",
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/23/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T10:29:11.661000Z",
    "edited": "2014-12-20T21:17:50.432000Z",
    "url": "https://swapi.co/api/people/55/"
  },
  "https://swapi.co/api/people/56/": {
    "name": "Saesee Tiin",
    "height": "188",
    "mass": "unknown",
    "hair_color": "none",
    "skin_color": "pale",
    "eye_color": "orange",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/47/",
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/24/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T10:32:11.669000Z",
    "edited": "2014-12-20T21:17:50.434000Z",
    "url": "https://swapi.co/api/people/56/"
  },
  "https://swapi.co/api/people/57/": {
    "name": "Yarael Poof",
    "height": "264",
    "mass": "unknown",
    "hair_color": "none",
    "skin_color": "white",
    "eye_color": "yellow",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/48/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/25/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T10:34:48.725000Z",
    "edited": "2014-12-20T21:17:50.437000Z",
    "url": "https://swapi.co/api/people/57/"
  },
  "https://swapi.co/api/people/58/": {
    "name": "Plo Koon",
    "height": "188",
    "mass": "80",
    "hair_color": "none",
    "skin_color": "orange",
    "eye_color": "black",
    "birth_year": "22BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/49/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/26/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/48/"
    ],
    "created": "2014-12-20T10:49:19.859000Z",
    "edited": "2014-12-20T21:17:50.439000Z",
    "url": "https://swapi.co/api/people/58/"
  },
  "https://swapi.co/api/people/59/": {
    "name": "Mas Amedda",
    "height": "196",
    "mass": "unknown",
    "hair_color": "none",
    "skin_color": "blue",
    "eye_color": "blue",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/50/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/27/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T10:53:26.457000Z",
    "edited": "2014-12-20T21:17:50.442000Z",
    "url": "https://swapi.co/api/people/59/"
  },
  "https://swapi.co/api/people/60/": {
    "name": "Gregar Typho",
    "height": "185",
    "mass": "85",
    "hair_color": "black",
    "skin_color": "dark",
    "eye_color": "brown",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/8/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/39/"
    ],
    "created": "2014-12-20T11:10:10.381000Z",
    "edited": "2014-12-20T21:17:50.445000Z",
    "url": "https://swapi.co/api/people/60/"
  },
  "https://swapi.co/api/people/61/": {
    "name": "Cordé",
    "height": "157",
    "mass": "unknown",
    "hair_color": "brown",
    "skin_color": "light",
    "eye_color": "brown",
    "birth_year": "unknown",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/8/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T11:11:39.630000Z",
    "edited": "2014-12-20T21:17:50.449000Z",
    "url": "https://swapi.co/api/people/61/"
  },
  "https://swapi.co/api/people/62/": {
    "name": "Cliegg Lars",
    "height": "183",
    "mass": "unknown",
    "hair_color": "brown",
    "skin_color": "fair",
    "eye_color": "blue",
    "birth_year": "82BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/1/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T15:59:03.958000Z",
    "edited": "2014-12-20T21:17:50.451000Z",
    "url": "https://swapi.co/api/people/62/"
  },
  "https://swapi.co/api/people/63/": {
    "name": "Poggle the Lesser",
    "height": "183",
    "mass": "80",
    "hair_color": "none",
    "skin_color": "green",
    "eye_color": "yellow",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/11/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/28/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T16:40:43.977000Z",
    "edited": "2014-12-20T21:17:50.453000Z",
    "url": "https://swapi.co/api/people/63/"
  },
  "https://swapi.co/api/people/?page=7": {
    "count": 87,
    "next": "https://swapi.co/api/people/?page=8",
    "previous": "https://swapi.co/api/people/?page=6",
    "results": [
      {
        "name": "Luminara Unduli",
        "height": "170",
        "mass": "56.2",
        "hair_color": "black",
        "skin_color": "yellow",
        "eye_color": "blue",
        "birth_year": "58BBY",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/51/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/29/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T16:45:53.668000Z",
        "edited": "2014-12-20T21:17:50.455000Z",
        "url": "https://swapi.co/api/people/64/"
      },
      {
        "name": "Barriss Offee",
        "height": "166",
        "mass": "50",
        "hair_color": "black",
        "skin_color": "yellow",
        "eye_color": "blue",
        "birth_year": "40BBY",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/51/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/29/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T16:46:40.440000Z",
        "edited": "2014-12-20T21:17:50.457000Z",
        "url": "https://swapi.co/api/people/65/"
      },
      {
        "name": "Dormé",
        "height": "165",
        "mass": "unknown",
        "hair_color": "brown",
        "skin_color": "light",
        "eye_color": "brown",
        "birth_year": "unknown",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/8/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T16:49:14.640000Z",
        "edited": "2014-12-20T21:17:50.460000Z",
        "url": "https://swapi.co/api/people/66/"
      },
      {
        "name": "Dooku",
        "height": "193",
        "mass": "80",
        "hair_color": "white",
        "skin_color": "fair",
        "eye_color": "brown",
        "birth_year": "102BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/52/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/55/"
        ],
        "starships": [],
        "created": "2014-12-20T16:52:14.726000Z",
        "edited": "2014-12-20T21:17:50.462000Z",
        "url": "https://swapi.co/api/people/67/"
      },
      {
        "name": "Bail Prestor Organa",
        "height": "191",
        "mass": "unknown",
        "hair_color": "black",
        "skin_color": "tan",
        "eye_color": "brown",
        "birth_year": "67BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/2/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T16:53:08.575000Z",
        "edited": "2014-12-20T21:17:50.463000Z",
        "url": "https://swapi.co/api/people/68/"
      },
      {
        "name": "Jango Fett",
        "height": "183",
        "mass": "79",
        "hair_color": "black",
        "skin_color": "tan",
        "eye_color": "brown",
        "birth_year": "66BBY",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/53/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T16:54:41.620000Z",
        "edited": "2014-12-20T21:17:50.465000Z",
        "url": "https://swapi.co/api/people/69/"
      },
      {
        "name": "Zam Wesell",
        "height": "168",
        "mass": "55",
        "hair_color": "blonde",
        "skin_color": "fair, green, yellow",
        "eye_color": "yellow",
        "birth_year": "unknown",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/54/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/30/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/45/"
        ],
        "starships": [],
        "created": "2014-12-20T16:57:44.471000Z",
        "edited": "2014-12-20T21:17:50.468000Z",
        "url": "https://swapi.co/api/people/70/"
      },
      {
        "name": "Dexter Jettster",
        "height": "198",
        "mass": "102",
        "hair_color": "none",
        "skin_color": "brown",
        "eye_color": "yellow",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/55/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/31/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T17:28:27.248000Z",
        "edited": "2014-12-20T21:17:50.470000Z",
        "url": "https://swapi.co/api/people/71/"
      },
      {
        "name": "Lama Su",
        "height": "229",
        "mass": "88",
        "hair_color": "none",
        "skin_color": "grey",
        "eye_color": "black",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/10/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/32/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T17:30:50.416000Z",
        "edited": "2014-12-20T21:17:50.473000Z",
        "url": "https://swapi.co/api/people/72/"
      },
      {
        "name": "Taun We",
        "height": "213",
        "mass": "unknown",
        "hair_color": "none",
        "skin_color": "grey",
        "eye_color": "black",
        "birth_year": "unknown",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/10/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/32/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T17:31:21.195000Z",
        "edited": "2014-12-20T21:17:50.474000Z",
        "url": "https://swapi.co/api/people/73/"
      }
    ]
  },
  "https://swapi.co/api/people/64/": {
    "name": "Luminara Unduli",
    "height": "170",
    "mass": "56.2",
    "hair_color": "black",
    "skin_color": "yellow",
    "eye_color": "blue",
    "birth_year": "58BBY",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/51/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/29/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T16:45:53.668000Z",
    "edited": "2014-12-20T21:17:50.455000Z",
    "url": "https://swapi.co/api/people/64/"
  },
  "https://swapi.co/api/people/65/": {
    "name": "Barriss Offee",
    "height": "166",
    "mass": "50",
    "hair_color": "black",
    "skin_color": "yellow",
    "eye_color": "blue",
    "birth_year": "40BBY",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/51/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/29/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T16:46:40.440000Z",
    "edited": "2014-12-20T21:17:50.457000Z",
    "url": "https://swapi.co/api/people/65/"
  },
  "https://swapi.co/api/people/66/": {
    "name": "Dormé",
    "height": "165",
    "mass": "unknown",
    "hair_color": "brown",
    "skin_color": "light",
    "eye_color": "brown",
    "birth_year": "unknown",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/8/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T16:49:14.640000Z",
    "edited": "2014-12-20T21:17:50.460000Z",
    "url": "https://swapi.co/api/people/66/"
  },
  "https://swapi.co/api/people/67/": {
    "name": "Dooku",
    "height": "193",
    "mass": "80",
    "hair_color": "white",
    "skin_color": "fair",
    "eye_color": "brown",
    "birth_year": "102BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/52/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/55/"
    ],
    "starships": [],
    "created": "2014-12-20T16:52:14.726000Z",
    "edited": "2014-12-20T21:17:50.462000Z",
    "url": "https://swapi.co/api/people/67/"
  },
  "https://swapi.co/api/people/68/": {
    "name": "Bail Prestor Organa",
    "height": "191",
    "mass": "unknown",
    "hair_color": "black",
    "skin_color": "tan",
    "eye_color": "brown",
    "birth_year": "67BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/2/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T16:53:08.575000Z",
    "edited": "2014-12-20T21:17:50.463000Z",
    "url": "https://swapi.co/api/people/68/"
  },
  "https://swapi.co/api/people/69/": {
    "name": "Jango Fett",
    "height": "183",
    "mass": "79",
    "hair_color": "black",
    "skin_color": "tan",
    "eye_color": "brown",
    "birth_year": "66BBY",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/53/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T16:54:41.620000Z",
    "edited": "2014-12-20T21:17:50.465000Z",
    "url": "https://swapi.co/api/people/69/"
  },
  "https://swapi.co/api/people/70/": {
    "name": "Zam Wesell",
    "height": "168",
    "mass": "55",
    "hair_color": "blonde",
    "skin_color": "fair, green, yellow",
    "eye_color": "yellow",
    "birth_year": "unknown",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/54/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/30/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/45/"
    ],
    "starships": [],
    "created": "2014-12-20T16:57:44.471000Z",
    "edited": "2014-12-20T21:17:50.468000Z",
    "url": "https://swapi.co/api/people/70/"
  },
  "https://swapi.co/api/people/71/": {
    "name": "Dexter Jettster",
    "height": "198",
    "mass": "102",
    "hair_color": "none",
    "skin_color": "brown",
    "eye_color": "yellow",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/55/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/31/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T17:28:27.248000Z",
    "edited": "2014-12-20T21:17:50.470000Z",
    "url": "https://swapi.co/api/people/71/"
  },
  "https://swapi.co/api/people/72/": {
    "name": "Lama Su",
    "height": "229",
    "mass": "88",
    "hair_color": "none",
    "skin_color": "grey",
    "eye_color": "black",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/10/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/32/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T17:30:50.416000Z",
    "edited": "2014-12-20T21:17:50.473000Z",
    "url": "https://swapi.co/api/people/72/"
  },
  "https://swapi.co/api/people/73/": {
    "name": "Taun We",
    "height": "213",
    "mass": "unknown",
    "hair_color": "none",
    "skin_color": "grey",
    "eye_color": "black",
    "birth_year": "unknown",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/10/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/32/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T17:31:21.195000Z",
    "edited": "2014-12-20T21:17:50.474000Z",
    "url": "https://swapi.co/api/people/73/"
  },
  "https://swapi.co/api/people/?page=8": {
    "count": 87,
    "next": "https://swapi.co/api/people/?page=9",
    "previous": "https://swapi.co/api/people/?page=7",
    "results": [
      {
        "name": "Jocasta Nu",
        "height": "167",
        "mass": "unknown",
        "hair_color": "white",
        "skin_color": "fair",
        "eye_color": "blue",
        "birth_year": "unknown",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/9/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T17:32:51.996000Z",
        "edited": "2014-12-20T21:17:50.476000Z",
        "url": "https://swapi.co/api/people/74/"
      },
      {
        "name": "Ratts Tyerell",
        "height": "79",
        "mass": "15",
        "hair_color": "none",
        "skin_color": "grey, blue",
        "eye_color": "unknown",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/38/",
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "species": [
          "https://swapi.co/api/species/16/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T09:53:15.086000Z",
        "edited": "2016-06-30T12:52:19.604868Z",
        "url": "https://swapi.co/api/people/47/"
      },
      {
        "name": "R4-P17",
        "height": "96",
        "mass": "unknown",
        "hair_color": "none",
        "skin_color": "silver, red",
        "eye_color": "red, blue",
        "birth_year": "unknown",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/28/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T17:43:36.409000Z",
        "edited": "2014-12-20T21:17:50.478000Z",
        "url": "https://swapi.co/api/people/75/"
      },
      {
        "name": "Wat Tambor",
        "height": "193",
        "mass": "48",
        "hair_color": "none",
        "skin_color": "green, grey",
        "eye_color": "unknown",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/56/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/33/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T17:53:52.607000Z",
        "edited": "2014-12-20T21:17:50.481000Z",
        "url": "https://swapi.co/api/people/76/"
      },
      {
        "name": "San Hill",
        "height": "191",
        "mass": "unknown",
        "hair_color": "none",
        "skin_color": "grey",
        "eye_color": "gold",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/57/",
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "species": [
          "https://swapi.co/api/species/34/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T17:58:17.049000Z",
        "edited": "2014-12-20T21:17:50.484000Z",
        "url": "https://swapi.co/api/people/77/"
      },
      {
        "name": "Shaak Ti",
        "height": "178",
        "mass": "57",
        "hair_color": "none",
        "skin_color": "red, blue, white",
        "eye_color": "black",
        "birth_year": "unknown",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/58/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/35/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T18:44:01.103000Z",
        "edited": "2014-12-20T21:17:50.486000Z",
        "url": "https://swapi.co/api/people/78/"
      },
      {
        "name": "Grievous",
        "height": "216",
        "mass": "159",
        "hair_color": "none",
        "skin_color": "brown, white",
        "eye_color": "green, yellow",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/59/",
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/36/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/60/"
        ],
        "starships": [
          "https://swapi.co/api/starships/74/"
        ],
        "created": "2014-12-20T19:43:53.348000Z",
        "edited": "2014-12-20T21:17:50.488000Z",
        "url": "https://swapi.co/api/people/79/"
      },
      {
        "name": "Tarfful",
        "height": "234",
        "mass": "136",
        "hair_color": "brown",
        "skin_color": "brown",
        "eye_color": "blue",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/14/",
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/3/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T19:46:34.209000Z",
        "edited": "2014-12-20T21:17:50.491000Z",
        "url": "https://swapi.co/api/people/80/"
      },
      {
        "name": "Raymus Antilles",
        "height": "188",
        "mass": "79",
        "hair_color": "brown",
        "skin_color": "light",
        "eye_color": "brown",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/2/",
        "films": [
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/1/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T19:49:35.583000Z",
        "edited": "2014-12-20T21:17:50.493000Z",
        "url": "https://swapi.co/api/people/81/"
      },
      {
        "name": "Sly Moore",
        "height": "178",
        "mass": "48",
        "hair_color": "none",
        "skin_color": "pale",
        "eye_color": "white",
        "birth_year": "unknown",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/60/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T20:18:37.619000Z",
        "edited": "2014-12-20T21:17:50.496000Z",
        "url": "https://swapi.co/api/people/82/"
      }
    ]
  },
  "https://swapi.co/api/people/74/": {
    "name": "Jocasta Nu",
    "height": "167",
    "mass": "unknown",
    "hair_color": "white",
    "skin_color": "fair",
    "eye_color": "blue",
    "birth_year": "unknown",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/9/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T17:32:51.996000Z",
    "edited": "2014-12-20T21:17:50.476000Z",
    "url": "https://swapi.co/api/people/74/"
  },
  "https://swapi.co/api/people/47/": {
    "name": "Ratts Tyerell",
    "height": "79",
    "mass": "15",
    "hair_color": "none",
    "skin_color": "grey, blue",
    "eye_color": "unknown",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/38/",
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "species": [
      "https://swapi.co/api/species/16/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T09:53:15.086000Z",
    "edited": "2016-06-30T12:52:19.604868Z",
    "url": "https://swapi.co/api/people/47/"
  },
  "https://swapi.co/api/people/75/": {
    "name": "R4-P17",
    "height": "96",
    "mass": "unknown",
    "hair_color": "none",
    "skin_color": "silver, red",
    "eye_color": "red, blue",
    "birth_year": "unknown",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/28/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T17:43:36.409000Z",
    "edited": "2014-12-20T21:17:50.478000Z",
    "url": "https://swapi.co/api/people/75/"
  },
  "https://swapi.co/api/people/76/": {
    "name": "Wat Tambor",
    "height": "193",
    "mass": "48",
    "hair_color": "none",
    "skin_color": "green, grey",
    "eye_color": "unknown",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/56/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/33/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T17:53:52.607000Z",
    "edited": "2014-12-20T21:17:50.481000Z",
    "url": "https://swapi.co/api/people/76/"
  },
  "https://swapi.co/api/people/77/": {
    "name": "San Hill",
    "height": "191",
    "mass": "unknown",
    "hair_color": "none",
    "skin_color": "grey",
    "eye_color": "gold",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/57/",
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "species": [
      "https://swapi.co/api/species/34/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T17:58:17.049000Z",
    "edited": "2014-12-20T21:17:50.484000Z",
    "url": "https://swapi.co/api/people/77/"
  },
  "https://swapi.co/api/people/78/": {
    "name": "Shaak Ti",
    "height": "178",
    "mass": "57",
    "hair_color": "none",
    "skin_color": "red, blue, white",
    "eye_color": "black",
    "birth_year": "unknown",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/58/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/35/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T18:44:01.103000Z",
    "edited": "2014-12-20T21:17:50.486000Z",
    "url": "https://swapi.co/api/people/78/"
  },
  "https://swapi.co/api/people/79/": {
    "name": "Grievous",
    "height": "216",
    "mass": "159",
    "hair_color": "none",
    "skin_color": "brown, white",
    "eye_color": "green, yellow",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/59/",
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/36/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/60/"
    ],
    "starships": [
      "https://swapi.co/api/starships/74/"
    ],
    "created": "2014-12-20T19:43:53.348000Z",
    "edited": "2014-12-20T21:17:50.488000Z",
    "url": "https://swapi.co/api/people/79/"
  },
  "https://swapi.co/api/people/80/": {
    "name": "Tarfful",
    "height": "234",
    "mass": "136",
    "hair_color": "brown",
    "skin_color": "brown",
    "eye_color": "blue",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/14/",
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/3/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T19:46:34.209000Z",
    "edited": "2014-12-20T21:17:50.491000Z",
    "url": "https://swapi.co/api/people/80/"
  },
  "https://swapi.co/api/people/81/": {
    "name": "Raymus Antilles",
    "height": "188",
    "mass": "79",
    "hair_color": "brown",
    "skin_color": "light",
    "eye_color": "brown",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/2/",
    "films": [
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/1/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T19:49:35.583000Z",
    "edited": "2014-12-20T21:17:50.493000Z",
    "url": "https://swapi.co/api/people/81/"
  },
  "https://swapi.co/api/people/82/": {
    "name": "Sly Moore",
    "height": "178",
    "mass": "48",
    "hair_color": "none",
    "skin_color": "pale",
    "eye_color": "white",
    "birth_year": "unknown",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/60/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T20:18:37.619000Z",
    "edited": "2014-12-20T21:17:50.496000Z",
    "url": "https://swapi.co/api/people/82/"
  },
  "https://swapi.co/api/people/?page=9": {
    "count": 87,
    "next": null,
    "previous": "https://swapi.co/api/people/?page=8",
    "results": [
      {
        "name": "Tion Medon",
        "height": "206",
        "mass": "80",
        "hair_color": "none",
        "skin_color": "grey",
        "eye_color": "black",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/12/",
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/37/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2014-12-20T20:35:04.260000Z",
        "edited": "2014-12-20T21:17:50.498000Z",
        "url": "https://swapi.co/api/people/83/"
      },
      {
        "name": "Finn",
        "height": "unknown",
        "mass": "unknown",
        "hair_color": "black",
        "skin_color": "dark",
        "eye_color": "dark",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/28/",
        "films": [
          "https://swapi.co/api/films/7/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2015-04-17T06:52:40.793621Z",
        "edited": "2015-04-17T06:52:40.793674Z",
        "url": "https://swapi.co/api/people/84/"
      },
      {
        "name": "Rey",
        "height": "unknown",
        "mass": "unknown",
        "hair_color": "brown",
        "skin_color": "light",
        "eye_color": "hazel",
        "birth_year": "unknown",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/28/",
        "films": [
          "https://swapi.co/api/films/7/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2015-04-17T06:54:01.495077Z",
        "edited": "2015-04-17T06:54:01.495128Z",
        "url": "https://swapi.co/api/people/85/"
      },
      {
        "name": "Poe Dameron",
        "height": "unknown",
        "mass": "unknown",
        "hair_color": "brown",
        "skin_color": "light",
        "eye_color": "brown",
        "birth_year": "unknown",
        "gender": "male",
        "homeworld": "https://swapi.co/api/planets/28/",
        "films": [
          "https://swapi.co/api/films/7/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/77/"
        ],
        "created": "2015-04-17T06:55:21.622786Z",
        "edited": "2015-04-17T06:55:21.622835Z",
        "url": "https://swapi.co/api/people/86/"
      },
      {
        "name": "BB8",
        "height": "unknown",
        "mass": "unknown",
        "hair_color": "none",
        "skin_color": "none",
        "eye_color": "black",
        "birth_year": "unknown",
        "gender": "none",
        "homeworld": "https://swapi.co/api/planets/28/",
        "films": [
          "https://swapi.co/api/films/7/"
        ],
        "species": [
          "https://swapi.co/api/species/2/"
        ],
        "vehicles": [],
        "starships": [],
        "created": "2015-04-17T06:57:38.061346Z",
        "edited": "2015-04-17T06:57:38.061453Z",
        "url": "https://swapi.co/api/people/87/"
      },
      {
        "name": "Captain Phasma",
        "height": "unknown",
        "mass": "unknown",
        "hair_color": "unknown",
        "skin_color": "unknown",
        "eye_color": "unknown",
        "birth_year": "unknown",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/28/",
        "films": [
          "https://swapi.co/api/films/7/"
        ],
        "species": [],
        "vehicles": [],
        "starships": [],
        "created": "2015-10-13T10:35:39.229823Z",
        "edited": "2015-10-13T10:35:39.229894Z",
        "url": "https://swapi.co/api/people/88/"
      },
      {
        "name": "Padmé Amidala",
        "height": "165",
        "mass": "45",
        "hair_color": "brown",
        "skin_color": "light",
        "eye_color": "brown",
        "birth_year": "46BBY",
        "gender": "female",
        "homeworld": "https://swapi.co/api/planets/8/",
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "species": [
          "https://swapi.co/api/species/1/"
        ],
        "vehicles": [],
        "starships": [
          "https://swapi.co/api/starships/49/",
          "https://swapi.co/api/starships/64/",
          "https://swapi.co/api/starships/39/"
        ],
        "created": "2014-12-19T17:28:26.926000Z",
        "edited": "2016-04-20T17:06:31.502555Z",
        "url": "https://swapi.co/api/people/35/"
      }
    ]
  },
  "https://swapi.co/api/people/83/": {
    "name": "Tion Medon",
    "height": "206",
    "mass": "80",
    "hair_color": "none",
    "skin_color": "grey",
    "eye_color": "black",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/12/",
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/37/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2014-12-20T20:35:04.260000Z",
    "edited": "2014-12-20T21:17:50.498000Z",
    "url": "https://swapi.co/api/people/83/"
  },
  "https://swapi.co/api/people/84/": {
    "name": "Finn",
    "height": "unknown",
    "mass": "unknown",
    "hair_color": "black",
    "skin_color": "dark",
    "eye_color": "dark",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/28/",
    "films": [
      "https://swapi.co/api/films/7/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2015-04-17T06:52:40.793621Z",
    "edited": "2015-04-17T06:52:40.793674Z",
    "url": "https://swapi.co/api/people/84/"
  },
  "https://swapi.co/api/people/85/": {
    "name": "Rey",
    "height": "unknown",
    "mass": "unknown",
    "hair_color": "brown",
    "skin_color": "light",
    "eye_color": "hazel",
    "birth_year": "unknown",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/28/",
    "films": [
      "https://swapi.co/api/films/7/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2015-04-17T06:54:01.495077Z",
    "edited": "2015-04-17T06:54:01.495128Z",
    "url": "https://swapi.co/api/people/85/"
  },
  "https://swapi.co/api/people/86/": {
    "name": "Poe Dameron",
    "height": "unknown",
    "mass": "unknown",
    "hair_color": "brown",
    "skin_color": "light",
    "eye_color": "brown",
    "birth_year": "unknown",
    "gender": "male",
    "homeworld": "https://swapi.co/api/planets/28/",
    "films": [
      "https://swapi.co/api/films/7/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/77/"
    ],
    "created": "2015-04-17T06:55:21.622786Z",
    "edited": "2015-04-17T06:55:21.622835Z",
    "url": "https://swapi.co/api/people/86/"
  },
  "https://swapi.co/api/people/87/": {
    "name": "BB8",
    "height": "unknown",
    "mass": "unknown",
    "hair_color": "none",
    "skin_color": "none",
    "eye_color": "black",
    "birth_year": "unknown",
    "gender": "none",
    "homeworld": "https://swapi.co/api/planets/28/",
    "films": [
      "https://swapi.co/api/films/7/"
    ],
    "species": [
      "https://swapi.co/api/species/2/"
    ],
    "vehicles": [],
    "starships": [],
    "created": "2015-04-17T06:57:38.061346Z",
    "edited": "2015-04-17T06:57:38.061453Z",
    "url": "https://swapi.co/api/people/87/"
  },
  "https://swapi.co/api/people/88/": {
    "name": "Captain Phasma",
    "height": "unknown",
    "mass": "unknown",
    "hair_color": "unknown",
    "skin_color": "unknown",
    "eye_color": "unknown",
    "birth_year": "unknown",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/28/",
    "films": [
      "https://swapi.co/api/films/7/"
    ],
    "species": [],
    "vehicles": [],
    "starships": [],
    "created": "2015-10-13T10:35:39.229823Z",
    "edited": "2015-10-13T10:35:39.229894Z",
    "url": "https://swapi.co/api/people/88/"
  },
  "https://swapi.co/api/people/35/": {
    "name": "Padmé Amidala",
    "height": "165",
    "mass": "45",
    "hair_color": "brown",
    "skin_color": "light",
    "eye_color": "brown",
    "birth_year": "46BBY",
    "gender": "female",
    "homeworld": "https://swapi.co/api/planets/8/",
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "species": [
      "https://swapi.co/api/species/1/"
    ],
    "vehicles": [],
    "starships": [
      "https://swapi.co/api/starships/49/",
      "https://swapi.co/api/starships/64/",
      "https://swapi.co/api/starships/39/"
    ],
    "created": "2014-12-19T17:28:26.926000Z",
    "edited": "2016-04-20T17:06:31.502555Z",
    "url": "https://swapi.co/api/people/35/"
  },
  "https://swapi.co/api/starships/": {
    "count": 37,
    "next": "https://swapi.co/api/starships/?page=2",
    "previous": null,
    "results": [
      {
        "name": "Executor",
        "model": "Executor-class star dreadnought",
        "manufacturer": "Kuat Drive Yards, Fondor Shipyards",
        "cost_in_credits": "1143350000",
        "length": "19000",
        "max_atmosphering_speed": "n/a",
        "crew": "279144",
        "passengers": "38000",
        "cargo_capacity": "250000000",
        "consumables": "6 years",
        "hyperdrive_rating": "2.0",
        "MGLT": "40",
        "starship_class": "Star dreadnought",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-15T12:31:42.547000Z",
        "edited": "2017-04-19T10:56:06.685592Z",
        "url": "https://swapi.co/api/starships/15/"
      },
      {
        "name": "Sentinel-class landing craft",
        "model": "Sentinel-class landing craft",
        "manufacturer": "Sienar Fleet Systems, Cyngus Spaceworks",
        "cost_in_credits": "240000",
        "length": "38",
        "max_atmosphering_speed": "E1000",
        "crew": "5",
        "passengers": "75",
        "cargo_capacity": "180000",
        "consumables": "1 month",
        "hyperdrive_rating": "1.0",
        "MGLT": "70",
        "starship_class": "landing craft",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T15:48:00.586000Z",
        "edited": "2014-12-22T17:35:44.431407Z",
        "url": "https://swapi.co/api/starships/5/"
      },
      {
        "name": "Death Star",
        "model": "DS-1 Orbital Battle Station",
        "manufacturer": "Imperial Department of Military Research, Sienar Fleet Systems",
        "cost_in_credits": "E1000000000000",
        "length": "120000",
        "max_atmosphering_speed": "n/a",
        "crew": "342953",
        "passengers": "843342",
        "cargo_capacity": "E1000000000000",
        "consumables": "3 years",
        "hyperdrive_rating": "4.0",
        "MGLT": "10",
        "starship_class": "Deep Space Mobile Battlestation",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T16:36:50.509000Z",
        "edited": "2014-12-22T17:35:44.452589Z",
        "url": "https://swapi.co/api/starships/9/"
      },
      {
        "name": "Millennium Falcon",
        "model": "YT-1300 light freighter",
        "manufacturer": "Corellian Engineering Corporation",
        "cost_in_credits": "E100000",
        "length": "34.37",
        "max_atmosphering_speed": "1050",
        "crew": "4",
        "passengers": "6",
        "cargo_capacity": "E100000",
        "consumables": "2 months",
        "hyperdrive_rating": "0.5",
        "MGLT": "75",
        "starship_class": "Light freighter",
        "pilots": [
          "https://swapi.co/api/people/13/",
          "https://swapi.co/api/people/14/",
          "https://swapi.co/api/people/25/",
          "https://swapi.co/api/people/31/"
        ],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/7/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T16:59:45.094000Z",
        "edited": "2014-12-22T17:35:44.464156Z",
        "url": "https://swapi.co/api/starships/10/"
      },
      {
        "name": "Y-wing",
        "model": "BTL Y-wing",
        "manufacturer": "Koensayr Manufacturing",
        "cost_in_credits": "134999",
        "length": "14",
        "max_atmosphering_speed": "E1000km",
        "crew": "2",
        "passengers": "0",
        "cargo_capacity": "110",
        "consumables": "1 week",
        "hyperdrive_rating": "1.0",
        "MGLT": "80",
        "starship_class": "assault starfighter",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-12T11:00:39.817000Z",
        "edited": "2014-12-22T17:35:44.479706Z",
        "url": "https://swapi.co/api/starships/11/"
      },
      {
        "name": "X-wing",
        "model": "T-65 X-wing",
        "manufacturer": "Incom Corporation",
        "cost_in_credits": "149999",
        "length": "12.5",
        "max_atmosphering_speed": "1050",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "110",
        "consumables": "1 week",
        "hyperdrive_rating": "1.0",
        "MGLT": "100",
        "starship_class": "Starfighter",
        "pilots": [
          "https://swapi.co/api/people/1/",
          "https://swapi.co/api/people/9/",
          "https://swapi.co/api/people/18/",
          "https://swapi.co/api/people/19/"
        ],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-12T11:19:05.340000Z",
        "edited": "2014-12-22T17:35:44.491233Z",
        "url": "https://swapi.co/api/starships/12/"
      },
      {
        "name": "TIE Advanced x1",
        "model": "Twin Ion Engine Advanced x1",
        "manufacturer": "Sienar Fleet Systems",
        "cost_in_credits": "unknown",
        "length": "9.2",
        "max_atmosphering_speed": "1200",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "150",
        "consumables": "5 days",
        "hyperdrive_rating": "1.0",
        "MGLT": "105",
        "starship_class": "Starfighter",
        "pilots": [
          "https://swapi.co/api/people/4/"
        ],
        "films": [
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-12T11:21:32.991000Z",
        "edited": "2014-12-22T17:35:44.549047Z",
        "url": "https://swapi.co/api/starships/13/"
      },
      {
        "name": "Slave 1",
        "model": "Firespray-31-class patrol and attack",
        "manufacturer": "Kuat Systems Engineering",
        "cost_in_credits": "unknown",
        "length": "21.5",
        "max_atmosphering_speed": "E1000",
        "crew": "1",
        "passengers": "6",
        "cargo_capacity": "70000",
        "consumables": "1 month",
        "hyperdrive_rating": "3.0",
        "MGLT": "70",
        "starship_class": "Patrol craft",
        "pilots": [
          "https://swapi.co/api/people/22/"
        ],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-15T13:00:56.332000Z",
        "edited": "2014-12-22T17:35:44.716273Z",
        "url": "https://swapi.co/api/starships/21/"
      },
      {
        "name": "Imperial shuttle",
        "model": "Lambda-class T-4a shuttle",
        "manufacturer": "Sienar Fleet Systems",
        "cost_in_credits": "240000",
        "length": "20",
        "max_atmosphering_speed": "850",
        "crew": "6",
        "passengers": "20",
        "cargo_capacity": "80000",
        "consumables": "2 months",
        "hyperdrive_rating": "1.0",
        "MGLT": "50",
        "starship_class": "Armed government transport",
        "pilots": [
          "https://swapi.co/api/people/1/",
          "https://swapi.co/api/people/13/",
          "https://swapi.co/api/people/14/"
        ],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-15T13:04:47.235000Z",
        "edited": "2014-12-22T17:35:44.795405Z",
        "url": "https://swapi.co/api/starships/22/"
      },
      {
        "name": "EF76 Nebulon-B escort frigate",
        "model": "EF76 Nebulon-B escort frigate",
        "manufacturer": "Kuat Drive Yards",
        "cost_in_credits": "8500000",
        "length": "300",
        "max_atmosphering_speed": "800",
        "crew": "854",
        "passengers": "75",
        "cargo_capacity": "6000000",
        "consumables": "2 years",
        "hyperdrive_rating": "2.0",
        "MGLT": "40",
        "starship_class": "Escort ship",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-15T13:06:30.813000Z",
        "edited": "2014-12-22T17:35:44.848329Z",
        "url": "https://swapi.co/api/starships/23/"
      }
    ]
  },
  "https://swapi.co/api/starships/15/": {
    "name": "Executor",
    "model": "Executor-class star dreadnought",
    "manufacturer": "Kuat Drive Yards, Fondor Shipyards",
    "cost_in_credits": "1143350000",
    "length": "19000",
    "max_atmosphering_speed": "n/a",
    "crew": "279144",
    "passengers": "38000",
    "cargo_capacity": "250000000",
    "consumables": "6 years",
    "hyperdrive_rating": "2.0",
    "MGLT": "40",
    "starship_class": "Star dreadnought",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-15T12:31:42.547000Z",
    "edited": "2017-04-19T10:56:06.685592Z",
    "url": "https://swapi.co/api/starships/15/"
  },
  "https://swapi.co/api/starships/5/": {
    "name": "Sentinel-class landing craft",
    "model": "Sentinel-class landing craft",
    "manufacturer": "Sienar Fleet Systems, Cyngus Spaceworks",
    "cost_in_credits": "240000",
    "length": "38",
    "max_atmosphering_speed": "E1000",
    "crew": "5",
    "passengers": "75",
    "cargo_capacity": "180000",
    "consumables": "1 month",
    "hyperdrive_rating": "1.0",
    "MGLT": "70",
    "starship_class": "landing craft",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T15:48:00.586000Z",
    "edited": "2014-12-22T17:35:44.431407Z",
    "url": "https://swapi.co/api/starships/5/"
  },
  "https://swapi.co/api/starships/9/": {
    "name": "Death Star",
    "model": "DS-1 Orbital Battle Station",
    "manufacturer": "Imperial Department of Military Research, Sienar Fleet Systems",
    "cost_in_credits": "E1000000000000",
    "length": "120000",
    "max_atmosphering_speed": "n/a",
    "crew": "342953",
    "passengers": "843342",
    "cargo_capacity": "E1000000000000",
    "consumables": "3 years",
    "hyperdrive_rating": "4.0",
    "MGLT": "10",
    "starship_class": "Deep Space Mobile Battlestation",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T16:36:50.509000Z",
    "edited": "2014-12-22T17:35:44.452589Z",
    "url": "https://swapi.co/api/starships/9/"
  },
  "https://swapi.co/api/starships/10/": {
    "name": "Millennium Falcon",
    "model": "YT-1300 light freighter",
    "manufacturer": "Corellian Engineering Corporation",
    "cost_in_credits": "E100000",
    "length": "34.37",
    "max_atmosphering_speed": "1050",
    "crew": "4",
    "passengers": "6",
    "cargo_capacity": "E100000",
    "consumables": "2 months",
    "hyperdrive_rating": "0.5",
    "MGLT": "75",
    "starship_class": "Light freighter",
    "pilots": [
      "https://swapi.co/api/people/13/",
      "https://swapi.co/api/people/14/",
      "https://swapi.co/api/people/25/",
      "https://swapi.co/api/people/31/"
    ],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/7/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T16:59:45.094000Z",
    "edited": "2014-12-22T17:35:44.464156Z",
    "url": "https://swapi.co/api/starships/10/"
  },
  "https://swapi.co/api/starships/11/": {
    "name": "Y-wing",
    "model": "BTL Y-wing",
    "manufacturer": "Koensayr Manufacturing",
    "cost_in_credits": "134999",
    "length": "14",
    "max_atmosphering_speed": "E1000km",
    "crew": "2",
    "passengers": "0",
    "cargo_capacity": "110",
    "consumables": "1 week",
    "hyperdrive_rating": "1.0",
    "MGLT": "80",
    "starship_class": "assault starfighter",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-12T11:00:39.817000Z",
    "edited": "2014-12-22T17:35:44.479706Z",
    "url": "https://swapi.co/api/starships/11/"
  },
  "https://swapi.co/api/starships/12/": {
    "name": "X-wing",
    "model": "T-65 X-wing",
    "manufacturer": "Incom Corporation",
    "cost_in_credits": "149999",
    "length": "12.5",
    "max_atmosphering_speed": "1050",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "110",
    "consumables": "1 week",
    "hyperdrive_rating": "1.0",
    "MGLT": "100",
    "starship_class": "Starfighter",
    "pilots": [
      "https://swapi.co/api/people/1/",
      "https://swapi.co/api/people/9/",
      "https://swapi.co/api/people/18/",
      "https://swapi.co/api/people/19/"
    ],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-12T11:19:05.340000Z",
    "edited": "2014-12-22T17:35:44.491233Z",
    "url": "https://swapi.co/api/starships/12/"
  },
  "https://swapi.co/api/starships/13/": {
    "name": "TIE Advanced x1",
    "model": "Twin Ion Engine Advanced x1",
    "manufacturer": "Sienar Fleet Systems",
    "cost_in_credits": "unknown",
    "length": "9.2",
    "max_atmosphering_speed": "1200",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "150",
    "consumables": "5 days",
    "hyperdrive_rating": "1.0",
    "MGLT": "105",
    "starship_class": "Starfighter",
    "pilots": [
      "https://swapi.co/api/people/4/"
    ],
    "films": [
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-12T11:21:32.991000Z",
    "edited": "2014-12-22T17:35:44.549047Z",
    "url": "https://swapi.co/api/starships/13/"
  },
  "https://swapi.co/api/starships/21/": {
    "name": "Slave 1",
    "model": "Firespray-31-class patrol and attack",
    "manufacturer": "Kuat Systems Engineering",
    "cost_in_credits": "unknown",
    "length": "21.5",
    "max_atmosphering_speed": "E1000",
    "crew": "1",
    "passengers": "6",
    "cargo_capacity": "70000",
    "consumables": "1 month",
    "hyperdrive_rating": "3.0",
    "MGLT": "70",
    "starship_class": "Patrol craft",
    "pilots": [
      "https://swapi.co/api/people/22/"
    ],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-15T13:00:56.332000Z",
    "edited": "2014-12-22T17:35:44.716273Z",
    "url": "https://swapi.co/api/starships/21/"
  },
  "https://swapi.co/api/starships/22/": {
    "name": "Imperial shuttle",
    "model": "Lambda-class T-4a shuttle",
    "manufacturer": "Sienar Fleet Systems",
    "cost_in_credits": "240000",
    "length": "20",
    "max_atmosphering_speed": "850",
    "crew": "6",
    "passengers": "20",
    "cargo_capacity": "80000",
    "consumables": "2 months",
    "hyperdrive_rating": "1.0",
    "MGLT": "50",
    "starship_class": "Armed government transport",
    "pilots": [
      "https://swapi.co/api/people/1/",
      "https://swapi.co/api/people/13/",
      "https://swapi.co/api/people/14/"
    ],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-15T13:04:47.235000Z",
    "edited": "2014-12-22T17:35:44.795405Z",
    "url": "https://swapi.co/api/starships/22/"
  },
  "https://swapi.co/api/starships/23/": {
    "name": "EF76 Nebulon-B escort frigate",
    "model": "EF76 Nebulon-B escort frigate",
    "manufacturer": "Kuat Drive Yards",
    "cost_in_credits": "8500000",
    "length": "300",
    "max_atmosphering_speed": "800",
    "crew": "854",
    "passengers": "75",
    "cargo_capacity": "6000000",
    "consumables": "2 years",
    "hyperdrive_rating": "2.0",
    "MGLT": "40",
    "starship_class": "Escort ship",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-15T13:06:30.813000Z",
    "edited": "2014-12-22T17:35:44.848329Z",
    "url": "https://swapi.co/api/starships/23/"
  },
  "https://swapi.co/api/starships/?page=2": {
    "count": 37,
    "next": "https://swapi.co/api/starships/?page=3",
    "previous": "https://swapi.co/api/starships/?page=1",
    "results": [
      {
        "name": "Calamari Cruiser",
        "model": "MC80 Liberty type Star Cruiser",
        "manufacturer": "Mon Calamari shipyards",
        "cost_in_credits": "104000000",
        "length": "1200",
        "max_atmosphering_speed": "n/a",
        "crew": "5400",
        "passengers": "1200",
        "cargo_capacity": "unknown",
        "consumables": "2 years",
        "hyperdrive_rating": "1.0",
        "MGLT": "60",
        "starship_class": "Star Cruiser",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-18T10:54:57.804000Z",
        "edited": "2014-12-22T17:35:44.957852Z",
        "url": "https://swapi.co/api/starships/27/"
      },
      {
        "name": "A-wing",
        "model": "RZ-1 A-wing Interceptor",
        "manufacturer": "Alliance Underground Engineering, Incom Corporation",
        "cost_in_credits": "175000",
        "length": "9.6",
        "max_atmosphering_speed": "1300",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "40",
        "consumables": "1 week",
        "hyperdrive_rating": "1.0",
        "MGLT": "120",
        "starship_class": "Starfighter",
        "pilots": [
          "https://swapi.co/api/people/29/"
        ],
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-18T11:16:34.542000Z",
        "edited": "2014-12-22T17:35:44.978754Z",
        "url": "https://swapi.co/api/starships/28/"
      },
      {
        "name": "B-wing",
        "model": "A/SF-01 B-wing starfighter",
        "manufacturer": "Slayn & Korpil",
        "cost_in_credits": "220000",
        "length": "16.9",
        "max_atmosphering_speed": "950",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "45",
        "consumables": "1 week",
        "hyperdrive_rating": "2.0",
        "MGLT": "91",
        "starship_class": "Assault Starfighter",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-18T11:18:04.763000Z",
        "edited": "2014-12-22T17:35:45.011193Z",
        "url": "https://swapi.co/api/starships/29/"
      },
      {
        "name": "Republic Cruiser",
        "model": "Consular-class cruiser",
        "manufacturer": "Corellian Engineering Corporation",
        "cost_in_credits": "unknown",
        "length": "115",
        "max_atmosphering_speed": "900",
        "crew": "9",
        "passengers": "16",
        "cargo_capacity": "unknown",
        "consumables": "unknown",
        "hyperdrive_rating": "2.0",
        "MGLT": "unknown",
        "starship_class": "Space cruiser",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:01:31.488000Z",
        "edited": "2014-12-22T17:35:45.027308Z",
        "url": "https://swapi.co/api/starships/31/"
      },
      {
        "name": "Naboo fighter",
        "model": "N-1 starfighter",
        "manufacturer": "Theed Palace Space Vessel Engineering Corps",
        "cost_in_credits": "200000",
        "length": "11",
        "max_atmosphering_speed": "1100",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "65",
        "consumables": "7 days",
        "hyperdrive_rating": "1.0",
        "MGLT": "unknown",
        "starship_class": "Starfighter",
        "pilots": [
          "https://swapi.co/api/people/11/",
          "https://swapi.co/api/people/60/",
          "https://swapi.co/api/people/35/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:39:17.582000Z",
        "edited": "2014-12-22T17:35:45.079452Z",
        "url": "https://swapi.co/api/starships/39/"
      },
      {
        "name": "Naboo Royal Starship",
        "model": "J-type 327 Nubian royal starship",
        "manufacturer": "Theed Palace Space Vessel Engineering Corps, Nubia Star Drives",
        "cost_in_credits": "unknown",
        "length": "76",
        "max_atmosphering_speed": "920",
        "crew": "8",
        "passengers": "unknown",
        "cargo_capacity": "unknown",
        "consumables": "unknown",
        "hyperdrive_rating": "1.8",
        "MGLT": "unknown",
        "starship_class": "yacht",
        "pilots": [
          "https://swapi.co/api/people/39/"
        ],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:45:03.506000Z",
        "edited": "2014-12-22T17:35:45.091925Z",
        "url": "https://swapi.co/api/starships/40/"
      },
      {
        "name": "Scimitar",
        "model": "Star Courier",
        "manufacturer": "Republic Sienar Systems",
        "cost_in_credits": "55000000",
        "length": "26.5",
        "max_atmosphering_speed": "1180",
        "crew": "1",
        "passengers": "6",
        "cargo_capacity": "2500000",
        "consumables": "30 days",
        "hyperdrive_rating": "1.5",
        "MGLT": "unknown",
        "starship_class": "Space Transport",
        "pilots": [
          "https://swapi.co/api/people/44/"
        ],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-20T09:39:56.116000Z",
        "edited": "2014-12-22T17:35:45.105522Z",
        "url": "https://swapi.co/api/starships/41/"
      },
      {
        "name": "J-type diplomatic barge",
        "model": "J-type diplomatic barge",
        "manufacturer": "Theed Palace Space Vessel Engineering Corps, Nubia Star Drives",
        "cost_in_credits": "2000000",
        "length": "39",
        "max_atmosphering_speed": "2000",
        "crew": "5",
        "passengers": "10",
        "cargo_capacity": "unknown",
        "consumables": "1 year",
        "hyperdrive_rating": "0.7",
        "MGLT": "unknown",
        "starship_class": "Diplomatic barge",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T11:05:51.237000Z",
        "edited": "2014-12-22T17:35:45.124386Z",
        "url": "https://swapi.co/api/starships/43/"
      },
      {
        "name": "AA-9 Coruscant freighter",
        "model": "Botajef AA-9 Freighter-Liner",
        "manufacturer": "Botajef Shipyards",
        "cost_in_credits": "unknown",
        "length": "390",
        "max_atmosphering_speed": "unknown",
        "crew": "unknown",
        "passengers": "30000",
        "cargo_capacity": "unknown",
        "consumables": "unknown",
        "hyperdrive_rating": "unknown",
        "MGLT": "unknown",
        "starship_class": "freighter",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T17:24:23.509000Z",
        "edited": "2014-12-22T17:35:45.135987Z",
        "url": "https://swapi.co/api/starships/47/"
      },
      {
        "name": "Jedi starfighter",
        "model": "Delta-7 Aethersprite-class interceptor",
        "manufacturer": "Kuat Systems Engineering",
        "cost_in_credits": "180000",
        "length": "8",
        "max_atmosphering_speed": "1150",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "60",
        "consumables": "7 days",
        "hyperdrive_rating": "1.0",
        "MGLT": "unknown",
        "starship_class": "Starfighter",
        "pilots": [
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/58/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T17:35:23.906000Z",
        "edited": "2014-12-22T17:35:45.147746Z",
        "url": "https://swapi.co/api/starships/48/"
      }
    ]
  },
  "https://swapi.co/api/starships/27/": {
    "name": "Calamari Cruiser",
    "model": "MC80 Liberty type Star Cruiser",
    "manufacturer": "Mon Calamari shipyards",
    "cost_in_credits": "104000000",
    "length": "1200",
    "max_atmosphering_speed": "n/a",
    "crew": "5400",
    "passengers": "1200",
    "cargo_capacity": "unknown",
    "consumables": "2 years",
    "hyperdrive_rating": "1.0",
    "MGLT": "60",
    "starship_class": "Star Cruiser",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-18T10:54:57.804000Z",
    "edited": "2014-12-22T17:35:44.957852Z",
    "url": "https://swapi.co/api/starships/27/"
  },
  "https://swapi.co/api/starships/28/": {
    "name": "A-wing",
    "model": "RZ-1 A-wing Interceptor",
    "manufacturer": "Alliance Underground Engineering, Incom Corporation",
    "cost_in_credits": "175000",
    "length": "9.6",
    "max_atmosphering_speed": "1300",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "40",
    "consumables": "1 week",
    "hyperdrive_rating": "1.0",
    "MGLT": "120",
    "starship_class": "Starfighter",
    "pilots": [
      "https://swapi.co/api/people/29/"
    ],
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-18T11:16:34.542000Z",
    "edited": "2014-12-22T17:35:44.978754Z",
    "url": "https://swapi.co/api/starships/28/"
  },
  "https://swapi.co/api/starships/29/": {
    "name": "B-wing",
    "model": "A/SF-01 B-wing starfighter",
    "manufacturer": "Slayn & Korpil",
    "cost_in_credits": "220000",
    "length": "16.9",
    "max_atmosphering_speed": "950",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "45",
    "consumables": "1 week",
    "hyperdrive_rating": "2.0",
    "MGLT": "91",
    "starship_class": "Assault Starfighter",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-18T11:18:04.763000Z",
    "edited": "2014-12-22T17:35:45.011193Z",
    "url": "https://swapi.co/api/starships/29/"
  },
  "https://swapi.co/api/starships/31/": {
    "name": "Republic Cruiser",
    "model": "Consular-class cruiser",
    "manufacturer": "Corellian Engineering Corporation",
    "cost_in_credits": "unknown",
    "length": "115",
    "max_atmosphering_speed": "900",
    "crew": "9",
    "passengers": "16",
    "cargo_capacity": "unknown",
    "consumables": "unknown",
    "hyperdrive_rating": "2.0",
    "MGLT": "unknown",
    "starship_class": "Space cruiser",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:01:31.488000Z",
    "edited": "2014-12-22T17:35:45.027308Z",
    "url": "https://swapi.co/api/starships/31/"
  },
  "https://swapi.co/api/starships/39/": {
    "name": "Naboo fighter",
    "model": "N-1 starfighter",
    "manufacturer": "Theed Palace Space Vessel Engineering Corps",
    "cost_in_credits": "200000",
    "length": "11",
    "max_atmosphering_speed": "1100",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "65",
    "consumables": "7 days",
    "hyperdrive_rating": "1.0",
    "MGLT": "unknown",
    "starship_class": "Starfighter",
    "pilots": [
      "https://swapi.co/api/people/11/",
      "https://swapi.co/api/people/60/",
      "https://swapi.co/api/people/35/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:39:17.582000Z",
    "edited": "2014-12-22T17:35:45.079452Z",
    "url": "https://swapi.co/api/starships/39/"
  },
  "https://swapi.co/api/starships/40/": {
    "name": "Naboo Royal Starship",
    "model": "J-type 327 Nubian royal starship",
    "manufacturer": "Theed Palace Space Vessel Engineering Corps, Nubia Star Drives",
    "cost_in_credits": "unknown",
    "length": "76",
    "max_atmosphering_speed": "920",
    "crew": "8",
    "passengers": "unknown",
    "cargo_capacity": "unknown",
    "consumables": "unknown",
    "hyperdrive_rating": "1.8",
    "MGLT": "unknown",
    "starship_class": "yacht",
    "pilots": [
      "https://swapi.co/api/people/39/"
    ],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:45:03.506000Z",
    "edited": "2014-12-22T17:35:45.091925Z",
    "url": "https://swapi.co/api/starships/40/"
  },
  "https://swapi.co/api/starships/41/": {
    "name": "Scimitar",
    "model": "Star Courier",
    "manufacturer": "Republic Sienar Systems",
    "cost_in_credits": "55000000",
    "length": "26.5",
    "max_atmosphering_speed": "1180",
    "crew": "1",
    "passengers": "6",
    "cargo_capacity": "2500000",
    "consumables": "30 days",
    "hyperdrive_rating": "1.5",
    "MGLT": "unknown",
    "starship_class": "Space Transport",
    "pilots": [
      "https://swapi.co/api/people/44/"
    ],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-20T09:39:56.116000Z",
    "edited": "2014-12-22T17:35:45.105522Z",
    "url": "https://swapi.co/api/starships/41/"
  },
  "https://swapi.co/api/starships/43/": {
    "name": "J-type diplomatic barge",
    "model": "J-type diplomatic barge",
    "manufacturer": "Theed Palace Space Vessel Engineering Corps, Nubia Star Drives",
    "cost_in_credits": "2000000",
    "length": "39",
    "max_atmosphering_speed": "2000",
    "crew": "5",
    "passengers": "10",
    "cargo_capacity": "unknown",
    "consumables": "1 year",
    "hyperdrive_rating": "0.7",
    "MGLT": "unknown",
    "starship_class": "Diplomatic barge",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T11:05:51.237000Z",
    "edited": "2014-12-22T17:35:45.124386Z",
    "url": "https://swapi.co/api/starships/43/"
  },
  "https://swapi.co/api/starships/47/": {
    "name": "AA-9 Coruscant freighter",
    "model": "Botajef AA-9 Freighter-Liner",
    "manufacturer": "Botajef Shipyards",
    "cost_in_credits": "unknown",
    "length": "390",
    "max_atmosphering_speed": "unknown",
    "crew": "unknown",
    "passengers": "30000",
    "cargo_capacity": "unknown",
    "consumables": "unknown",
    "hyperdrive_rating": "unknown",
    "MGLT": "unknown",
    "starship_class": "freighter",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T17:24:23.509000Z",
    "edited": "2014-12-22T17:35:45.135987Z",
    "url": "https://swapi.co/api/starships/47/"
  },
  "https://swapi.co/api/starships/48/": {
    "name": "Jedi starfighter",
    "model": "Delta-7 Aethersprite-class interceptor",
    "manufacturer": "Kuat Systems Engineering",
    "cost_in_credits": "180000",
    "length": "8",
    "max_atmosphering_speed": "1150",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "60",
    "consumables": "7 days",
    "hyperdrive_rating": "1.0",
    "MGLT": "unknown",
    "starship_class": "Starfighter",
    "pilots": [
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/58/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T17:35:23.906000Z",
    "edited": "2014-12-22T17:35:45.147746Z",
    "url": "https://swapi.co/api/starships/48/"
  },
  "https://swapi.co/api/starships/?page=3": {
    "count": 37,
    "next": "https://swapi.co/api/starships/?page=4",
    "previous": "https://swapi.co/api/starships/?page=2",
    "results": [
      {
        "name": "H-type Nubian yacht",
        "model": "H-type Nubian yacht",
        "manufacturer": "Theed Palace Space Vessel Engineering Corps",
        "cost_in_credits": "unknown",
        "length": "47.9",
        "max_atmosphering_speed": "8000",
        "crew": "4",
        "passengers": "unknown",
        "cargo_capacity": "unknown",
        "consumables": "unknown",
        "hyperdrive_rating": "0.9",
        "MGLT": "unknown",
        "starship_class": "yacht",
        "pilots": [
          "https://swapi.co/api/people/35/"
        ],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T17:46:46.847000Z",
        "edited": "2014-12-22T17:35:45.158969Z",
        "url": "https://swapi.co/api/starships/49/"
      },
      {
        "name": "Star Destroyer",
        "model": "Imperial I-class Star Destroyer",
        "manufacturer": "Kuat Drive Yards",
        "cost_in_credits": "150000000",
        "length": "1,600",
        "max_atmosphering_speed": "975",
        "crew": "47060",
        "passengers": "0",
        "cargo_capacity": "36000000",
        "consumables": "2 years",
        "hyperdrive_rating": "2.0",
        "MGLT": "60",
        "starship_class": "Star Destroyer",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T15:08:19.848000Z",
        "edited": "2014-12-22T17:35:44.410941Z",
        "url": "https://swapi.co/api/starships/3/"
      },
      {
        "name": "Trade Federation cruiser",
        "model": "Providence-class carrier/destroyer",
        "manufacturer": "Rendili StarDrive, Free Dac Volunteers Engineering corps.",
        "cost_in_credits": "125000000",
        "length": "1088",
        "max_atmosphering_speed": "1050",
        "crew": "600",
        "passengers": "48247",
        "cargo_capacity": "50000000",
        "consumables": "4 years",
        "hyperdrive_rating": "1.5",
        "MGLT": "unknown",
        "starship_class": "capital ship",
        "pilots": [
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/11/"
        ],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T19:40:21.902000Z",
        "edited": "2014-12-22T17:35:45.195165Z",
        "url": "https://swapi.co/api/starships/59/"
      },
      {
        "name": "Theta-class T-2c shuttle",
        "model": "Theta-class T-2c shuttle",
        "manufacturer": "Cygnus Spaceworks",
        "cost_in_credits": "E1000000",
        "length": "18.5",
        "max_atmosphering_speed": "2000",
        "crew": "5",
        "passengers": "16",
        "cargo_capacity": "50000",
        "consumables": "56 days",
        "hyperdrive_rating": "1.0",
        "MGLT": "unknown",
        "starship_class": "transport",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T19:48:40.409000Z",
        "edited": "2014-12-22T17:35:45.208584Z",
        "url": "https://swapi.co/api/starships/61/"
      },
      {
        "name": "T-70 X-wing fighter",
        "model": "T-70 X-wing fighter",
        "manufacturer": "Incom",
        "cost_in_credits": "unknown",
        "length": "unknown",
        "max_atmosphering_speed": "unknown",
        "crew": "1",
        "passengers": "unknown",
        "cargo_capacity": "unknown",
        "consumables": "unknown",
        "hyperdrive_rating": "unknown",
        "MGLT": "unknown",
        "starship_class": "fighter",
        "pilots": [
          "https://swapi.co/api/people/86/"
        ],
        "films": [
          "https://swapi.co/api/films/7/"
        ],
        "created": "2015-04-17T06:58:50.614475Z",
        "edited": "2015-04-17T06:58:50.614528Z",
        "url": "https://swapi.co/api/starships/77/"
      },
      {
        "name": "Rebel transport",
        "model": "GR-75 medium transport",
        "manufacturer": "Gallofree Yards, Inc.",
        "cost_in_credits": "unknown",
        "length": "90",
        "max_atmosphering_speed": "650",
        "crew": "6",
        "passengers": "90",
        "cargo_capacity": "19000000",
        "consumables": "6 months",
        "hyperdrive_rating": "4.0",
        "MGLT": "20",
        "starship_class": "Medium transport",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-15T12:34:52.264000Z",
        "edited": "2014-12-22T17:35:44.680838Z",
        "url": "https://swapi.co/api/starships/17/"
      },
      {
        "name": "Droid control ship",
        "model": "Lucrehulk-class Droid Control Ship",
        "manufacturer": "Hoersch-Kessel Drive, Inc.",
        "cost_in_credits": "unknown",
        "length": "3170",
        "max_atmosphering_speed": "n/a",
        "crew": "175",
        "passengers": "139000",
        "cargo_capacity": "4000000000",
        "consumables": "500 days",
        "hyperdrive_rating": "2.0",
        "MGLT": "unknown",
        "starship_class": "Droid control ship",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-19T17:04:06.323000Z",
        "edited": "2014-12-22T17:35:45.042900Z",
        "url": "https://swapi.co/api/starships/32/"
      },
      {
        "name": "Republic Assault ship",
        "model": "Acclamator I-class assault ship",
        "manufacturer": "Rothana Heavy Engineering",
        "cost_in_credits": "unknown",
        "length": "752",
        "max_atmosphering_speed": "unknown",
        "crew": "700",
        "passengers": "16000",
        "cargo_capacity": "11250000",
        "consumables": "2 years",
        "hyperdrive_rating": "0.6",
        "MGLT": "unknown",
        "starship_class": "assault ship",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T18:08:42.926000Z",
        "edited": "2014-12-22T17:35:45.171653Z",
        "url": "https://swapi.co/api/starships/52/"
      },
      {
        "name": "Solar Sailer",
        "model": "Punworcca 116-class interstellar sloop",
        "manufacturer": "Huppla Pasa Tisc Shipwrights Collective",
        "cost_in_credits": "35700",
        "length": "15.2",
        "max_atmosphering_speed": "1600",
        "crew": "3",
        "passengers": "11",
        "cargo_capacity": "240",
        "consumables": "7 days",
        "hyperdrive_rating": "1.5",
        "MGLT": "unknown",
        "starship_class": "yacht",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T18:37:56.969000Z",
        "edited": "2014-12-22T17:35:45.183075Z",
        "url": "https://swapi.co/api/starships/58/"
      },
      {
        "name": "Republic attack cruiser",
        "model": "Senator-class Star Destroyer",
        "manufacturer": "Kuat Drive Yards, Allanteen Six shipyards",
        "cost_in_credits": "59000000",
        "length": "1137",
        "max_atmosphering_speed": "975",
        "crew": "7400",
        "passengers": "2000",
        "cargo_capacity": "20000000",
        "consumables": "2 years",
        "hyperdrive_rating": "1.0",
        "MGLT": "unknown",
        "starship_class": "star destroyer",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T19:52:56.232000Z",
        "edited": "2014-12-22T17:35:45.224540Z",
        "url": "https://swapi.co/api/starships/63/"
      }
    ]
  },
  "https://swapi.co/api/starships/49/": {
    "name": "H-type Nubian yacht",
    "model": "H-type Nubian yacht",
    "manufacturer": "Theed Palace Space Vessel Engineering Corps",
    "cost_in_credits": "unknown",
    "length": "47.9",
    "max_atmosphering_speed": "8000",
    "crew": "4",
    "passengers": "unknown",
    "cargo_capacity": "unknown",
    "consumables": "unknown",
    "hyperdrive_rating": "0.9",
    "MGLT": "unknown",
    "starship_class": "yacht",
    "pilots": [
      "https://swapi.co/api/people/35/"
    ],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T17:46:46.847000Z",
    "edited": "2014-12-22T17:35:45.158969Z",
    "url": "https://swapi.co/api/starships/49/"
  },
  "https://swapi.co/api/starships/3/": {
    "name": "Star Destroyer",
    "model": "Imperial I-class Star Destroyer",
    "manufacturer": "Kuat Drive Yards",
    "cost_in_credits": "150000000",
    "length": "1,600",
    "max_atmosphering_speed": "975",
    "crew": "47060",
    "passengers": "0",
    "cargo_capacity": "36000000",
    "consumables": "2 years",
    "hyperdrive_rating": "2.0",
    "MGLT": "60",
    "starship_class": "Star Destroyer",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T15:08:19.848000Z",
    "edited": "2014-12-22T17:35:44.410941Z",
    "url": "https://swapi.co/api/starships/3/"
  },
  "https://swapi.co/api/starships/59/": {
    "name": "Trade Federation cruiser",
    "model": "Providence-class carrier/destroyer",
    "manufacturer": "Rendili StarDrive, Free Dac Volunteers Engineering corps.",
    "cost_in_credits": "125000000",
    "length": "1088",
    "max_atmosphering_speed": "1050",
    "crew": "600",
    "passengers": "48247",
    "cargo_capacity": "50000000",
    "consumables": "4 years",
    "hyperdrive_rating": "1.5",
    "MGLT": "unknown",
    "starship_class": "capital ship",
    "pilots": [
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/11/"
    ],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T19:40:21.902000Z",
    "edited": "2014-12-22T17:35:45.195165Z",
    "url": "https://swapi.co/api/starships/59/"
  },
  "https://swapi.co/api/starships/61/": {
    "name": "Theta-class T-2c shuttle",
    "model": "Theta-class T-2c shuttle",
    "manufacturer": "Cygnus Spaceworks",
    "cost_in_credits": "E1000000",
    "length": "18.5",
    "max_atmosphering_speed": "2000",
    "crew": "5",
    "passengers": "16",
    "cargo_capacity": "50000",
    "consumables": "56 days",
    "hyperdrive_rating": "1.0",
    "MGLT": "unknown",
    "starship_class": "transport",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T19:48:40.409000Z",
    "edited": "2014-12-22T17:35:45.208584Z",
    "url": "https://swapi.co/api/starships/61/"
  },
  "https://swapi.co/api/starships/77/": {
    "name": "T-70 X-wing fighter",
    "model": "T-70 X-wing fighter",
    "manufacturer": "Incom",
    "cost_in_credits": "unknown",
    "length": "unknown",
    "max_atmosphering_speed": "unknown",
    "crew": "1",
    "passengers": "unknown",
    "cargo_capacity": "unknown",
    "consumables": "unknown",
    "hyperdrive_rating": "unknown",
    "MGLT": "unknown",
    "starship_class": "fighter",
    "pilots": [
      "https://swapi.co/api/people/86/"
    ],
    "films": [
      "https://swapi.co/api/films/7/"
    ],
    "created": "2015-04-17T06:58:50.614475Z",
    "edited": "2015-04-17T06:58:50.614528Z",
    "url": "https://swapi.co/api/starships/77/"
  },
  "https://swapi.co/api/starships/17/": {
    "name": "Rebel transport",
    "model": "GR-75 medium transport",
    "manufacturer": "Gallofree Yards, Inc.",
    "cost_in_credits": "unknown",
    "length": "90",
    "max_atmosphering_speed": "650",
    "crew": "6",
    "passengers": "90",
    "cargo_capacity": "19000000",
    "consumables": "6 months",
    "hyperdrive_rating": "4.0",
    "MGLT": "20",
    "starship_class": "Medium transport",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-15T12:34:52.264000Z",
    "edited": "2014-12-22T17:35:44.680838Z",
    "url": "https://swapi.co/api/starships/17/"
  },
  "https://swapi.co/api/starships/32/": {
    "name": "Droid control ship",
    "model": "Lucrehulk-class Droid Control Ship",
    "manufacturer": "Hoersch-Kessel Drive, Inc.",
    "cost_in_credits": "unknown",
    "length": "3170",
    "max_atmosphering_speed": "n/a",
    "crew": "175",
    "passengers": "139000",
    "cargo_capacity": "4000000000",
    "consumables": "500 days",
    "hyperdrive_rating": "2.0",
    "MGLT": "unknown",
    "starship_class": "Droid control ship",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-19T17:04:06.323000Z",
    "edited": "2014-12-22T17:35:45.042900Z",
    "url": "https://swapi.co/api/starships/32/"
  },
  "https://swapi.co/api/starships/52/": {
    "name": "Republic Assault ship",
    "model": "Acclamator I-class assault ship",
    "manufacturer": "Rothana Heavy Engineering",
    "cost_in_credits": "unknown",
    "length": "752",
    "max_atmosphering_speed": "unknown",
    "crew": "700",
    "passengers": "16000",
    "cargo_capacity": "11250000",
    "consumables": "2 years",
    "hyperdrive_rating": "0.6",
    "MGLT": "unknown",
    "starship_class": "assault ship",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T18:08:42.926000Z",
    "edited": "2014-12-22T17:35:45.171653Z",
    "url": "https://swapi.co/api/starships/52/"
  },
  "https://swapi.co/api/starships/58/": {
    "name": "Solar Sailer",
    "model": "Punworcca 116-class interstellar sloop",
    "manufacturer": "Huppla Pasa Tisc Shipwrights Collective",
    "cost_in_credits": "35700",
    "length": "15.2",
    "max_atmosphering_speed": "1600",
    "crew": "3",
    "passengers": "11",
    "cargo_capacity": "240",
    "consumables": "7 days",
    "hyperdrive_rating": "1.5",
    "MGLT": "unknown",
    "starship_class": "yacht",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T18:37:56.969000Z",
    "edited": "2014-12-22T17:35:45.183075Z",
    "url": "https://swapi.co/api/starships/58/"
  },
  "https://swapi.co/api/starships/63/": {
    "name": "Republic attack cruiser",
    "model": "Senator-class Star Destroyer",
    "manufacturer": "Kuat Drive Yards, Allanteen Six shipyards",
    "cost_in_credits": "59000000",
    "length": "1137",
    "max_atmosphering_speed": "975",
    "crew": "7400",
    "passengers": "2000",
    "cargo_capacity": "20000000",
    "consumables": "2 years",
    "hyperdrive_rating": "1.0",
    "MGLT": "unknown",
    "starship_class": "star destroyer",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T19:52:56.232000Z",
    "edited": "2014-12-22T17:35:45.224540Z",
    "url": "https://swapi.co/api/starships/63/"
  },
  "https://swapi.co/api/starships/?page=4": {
    "count": 37,
    "next": null,
    "previous": "https://swapi.co/api/starships/?page=3",
    "results": [
      {
        "name": "Naboo star skiff",
        "model": "J-type star skiff",
        "manufacturer": "Theed Palace Space Vessel Engineering Corps/Nubia Star Drives, Incorporated",
        "cost_in_credits": "unknown",
        "length": "29.2",
        "max_atmosphering_speed": "1050",
        "crew": "3",
        "passengers": "3",
        "cargo_capacity": "unknown",
        "consumables": "unknown",
        "hyperdrive_rating": "0.5",
        "MGLT": "unknown",
        "starship_class": "yacht",
        "pilots": [
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/35/"
        ],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T19:55:15.396000Z",
        "edited": "2014-12-22T17:35:45.258859Z",
        "url": "https://swapi.co/api/starships/64/"
      },
      {
        "name": "Jedi Interceptor",
        "model": "Eta-2 Actis-class light interceptor",
        "manufacturer": "Kuat Systems Engineering",
        "cost_in_credits": "320000",
        "length": "5.47",
        "max_atmosphering_speed": "1500",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "60",
        "consumables": "2 days",
        "hyperdrive_rating": "1.0",
        "MGLT": "unknown",
        "starship_class": "starfighter",
        "pilots": [
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/11/"
        ],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T19:56:57.468000Z",
        "edited": "2014-12-22T17:35:45.272349Z",
        "url": "https://swapi.co/api/starships/65/"
      },
      {
        "name": "arc-170",
        "model": "Aggressive Reconnaissance-170 starfighte",
        "manufacturer": "Incom Corporation, Subpro Corporation",
        "cost_in_credits": "155000",
        "length": "14.5",
        "max_atmosphering_speed": "E1000",
        "crew": "3",
        "passengers": "0",
        "cargo_capacity": "110",
        "consumables": "5 days",
        "hyperdrive_rating": "1.0",
        "MGLT": "100",
        "starship_class": "starfighter",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:03:48.603000Z",
        "edited": "2014-12-22T17:35:45.287214Z",
        "url": "https://swapi.co/api/starships/66/"
      },
      {
        "name": "Belbullab-22 starfighter",
        "model": "Belbullab-22 starfighter",
        "manufacturer": "Feethan Ottraw Scalable Assemblies",
        "cost_in_credits": "168000",
        "length": "6.71",
        "max_atmosphering_speed": "1100",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "140",
        "consumables": "7 days",
        "hyperdrive_rating": "6",
        "MGLT": "unknown",
        "starship_class": "starfighter",
        "pilots": [
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/79/"
        ],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:38:05.031000Z",
        "edited": "2014-12-22T17:35:45.381900Z",
        "url": "https://swapi.co/api/starships/74/"
      },
      {
        "name": "V-wing",
        "model": "Alpha-3 Nimbus-class V-wing starfighter",
        "manufacturer": "Kuat Systems Engineering",
        "cost_in_credits": "102500",
        "length": "7.9",
        "max_atmosphering_speed": "1050",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "60",
        "consumables": "15 hours",
        "hyperdrive_rating": "1.0",
        "MGLT": "unknown",
        "starship_class": "starfighter",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:43:04.349000Z",
        "edited": "2014-12-22T17:35:45.396711Z",
        "url": "https://swapi.co/api/starships/75/"
      },
      {
        "name": "CR90 corvette",
        "model": "CR90 corvette",
        "manufacturer": "Corellian Engineering Corporation",
        "cost_in_credits": "3500000",
        "length": "150",
        "max_atmosphering_speed": "950",
        "crew": "165",
        "passengers": "600",
        "cargo_capacity": "3000000",
        "consumables": "1 year",
        "hyperdrive_rating": "2.0",
        "MGLT": "60",
        "starship_class": "corvette",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T14:20:33.369000Z",
        "edited": "2014-12-22T17:35:45.408368Z",
        "url": "https://swapi.co/api/starships/2/"
      },
      {
        "name": "Banking clan frigate",
        "model": "Munificent-class star frigate",
        "manufacturer": "Hoersch-Kessel Drive, Inc, Gwori Revolutionary Industries",
        "cost_in_credits": "57000000",
        "length": "825",
        "max_atmosphering_speed": "unknown",
        "crew": "200",
        "passengers": "unknown",
        "cargo_capacity": "40000000",
        "consumables": "2 years",
        "hyperdrive_rating": "1.0",
        "MGLT": "unknown",
        "starship_class": "cruiser",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:07:11.538000Z",
        "edited": "2017-04-19T10:53:32.700283Z",
        "url": "https://swapi.co/api/starships/68/"
      }
    ]
  },
  "https://swapi.co/api/starships/64/": {
    "name": "Naboo star skiff",
    "model": "J-type star skiff",
    "manufacturer": "Theed Palace Space Vessel Engineering Corps/Nubia Star Drives, Incorporated",
    "cost_in_credits": "unknown",
    "length": "29.2",
    "max_atmosphering_speed": "1050",
    "crew": "3",
    "passengers": "3",
    "cargo_capacity": "unknown",
    "consumables": "unknown",
    "hyperdrive_rating": "0.5",
    "MGLT": "unknown",
    "starship_class": "yacht",
    "pilots": [
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/35/"
    ],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T19:55:15.396000Z",
    "edited": "2014-12-22T17:35:45.258859Z",
    "url": "https://swapi.co/api/starships/64/"
  },
  "https://swapi.co/api/starships/65/": {
    "name": "Jedi Interceptor",
    "model": "Eta-2 Actis-class light interceptor",
    "manufacturer": "Kuat Systems Engineering",
    "cost_in_credits": "320000",
    "length": "5.47",
    "max_atmosphering_speed": "1500",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "60",
    "consumables": "2 days",
    "hyperdrive_rating": "1.0",
    "MGLT": "unknown",
    "starship_class": "starfighter",
    "pilots": [
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/11/"
    ],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T19:56:57.468000Z",
    "edited": "2014-12-22T17:35:45.272349Z",
    "url": "https://swapi.co/api/starships/65/"
  },
  "https://swapi.co/api/starships/66/": {
    "name": "arc-170",
    "model": "Aggressive Reconnaissance-170 starfighte",
    "manufacturer": "Incom Corporation, Subpro Corporation",
    "cost_in_credits": "155000",
    "length": "14.5",
    "max_atmosphering_speed": "E1000",
    "crew": "3",
    "passengers": "0",
    "cargo_capacity": "110",
    "consumables": "5 days",
    "hyperdrive_rating": "1.0",
    "MGLT": "100",
    "starship_class": "starfighter",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:03:48.603000Z",
    "edited": "2014-12-22T17:35:45.287214Z",
    "url": "https://swapi.co/api/starships/66/"
  },
  "https://swapi.co/api/starships/74/": {
    "name": "Belbullab-22 starfighter",
    "model": "Belbullab-22 starfighter",
    "manufacturer": "Feethan Ottraw Scalable Assemblies",
    "cost_in_credits": "168000",
    "length": "6.71",
    "max_atmosphering_speed": "1100",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "140",
    "consumables": "7 days",
    "hyperdrive_rating": "6",
    "MGLT": "unknown",
    "starship_class": "starfighter",
    "pilots": [
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/79/"
    ],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:38:05.031000Z",
    "edited": "2014-12-22T17:35:45.381900Z",
    "url": "https://swapi.co/api/starships/74/"
  },
  "https://swapi.co/api/starships/75/": {
    "name": "V-wing",
    "model": "Alpha-3 Nimbus-class V-wing starfighter",
    "manufacturer": "Kuat Systems Engineering",
    "cost_in_credits": "102500",
    "length": "7.9",
    "max_atmosphering_speed": "1050",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "60",
    "consumables": "15 hours",
    "hyperdrive_rating": "1.0",
    "MGLT": "unknown",
    "starship_class": "starfighter",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:43:04.349000Z",
    "edited": "2014-12-22T17:35:45.396711Z",
    "url": "https://swapi.co/api/starships/75/"
  },
  "https://swapi.co/api/starships/2/": {
    "name": "CR90 corvette",
    "model": "CR90 corvette",
    "manufacturer": "Corellian Engineering Corporation",
    "cost_in_credits": "3500000",
    "length": "150",
    "max_atmosphering_speed": "950",
    "crew": "165",
    "passengers": "600",
    "cargo_capacity": "3000000",
    "consumables": "1 year",
    "hyperdrive_rating": "2.0",
    "MGLT": "60",
    "starship_class": "corvette",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T14:20:33.369000Z",
    "edited": "2014-12-22T17:35:45.408368Z",
    "url": "https://swapi.co/api/starships/2/"
  },
  "https://swapi.co/api/starships/68/": {
    "name": "Banking clan frigate",
    "model": "Munificent-class star frigate",
    "manufacturer": "Hoersch-Kessel Drive, Inc, Gwori Revolutionary Industries",
    "cost_in_credits": "57000000",
    "length": "825",
    "max_atmosphering_speed": "unknown",
    "crew": "200",
    "passengers": "unknown",
    "cargo_capacity": "40000000",
    "consumables": "2 years",
    "hyperdrive_rating": "1.0",
    "MGLT": "unknown",
    "starship_class": "cruiser",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:07:11.538000Z",
    "edited": "2017-04-19T10:53:32.700283Z",
    "url": "https://swapi.co/api/starships/68/"
  },
  "https://swapi.co/api/vehicles/": {
    "count": 39,
    "next": "https://swapi.co/api/vehicles/?page=2",
    "previous": null,
    "results": [
      {
        "name": "Sand Crawler",
        "model": "Digger Crawler",
        "manufacturer": "Corellia Mining Corporation",
        "cost_in_credits": "150000",
        "length": "36.8",
        "max_atmosphering_speed": "30",
        "crew": "46",
        "passengers": "30",
        "cargo_capacity": "50000",
        "consumables": "2 months",
        "vehicle_class": "wheeled",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T15:36:25.724000Z",
        "edited": "2014-12-22T18:21:15.523587Z",
        "url": "https://swapi.co/api/vehicles/4/"
      },
      {
        "name": "T-16 skyhopper",
        "model": "T-16 skyhopper",
        "manufacturer": "Incom Corporation",
        "cost_in_credits": "14500",
        "length": "10.4",
        "max_atmosphering_speed": "1200",
        "crew": "1",
        "passengers": "1",
        "cargo_capacity": "50",
        "consumables": "0",
        "vehicle_class": "repulsorcraft",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T16:01:52.434000Z",
        "edited": "2014-12-22T18:21:15.552614Z",
        "url": "https://swapi.co/api/vehicles/6/"
      },
      {
        "name": "X-34 landspeeder",
        "model": "X-34 landspeeder",
        "manufacturer": "SoroSuub Corporation",
        "cost_in_credits": "10550",
        "length": "3.4",
        "max_atmosphering_speed": "250",
        "crew": "1",
        "passengers": "1",
        "cargo_capacity": "5",
        "consumables": "unknown",
        "vehicle_class": "repulsorcraft",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T16:13:52.586000Z",
        "edited": "2014-12-22T18:21:15.583700Z",
        "url": "https://swapi.co/api/vehicles/7/"
      },
      {
        "name": "TIE/LN starfighter",
        "model": "Twin Ion Engine/Ln Starfighter",
        "manufacturer": "Sienar Fleet Systems",
        "cost_in_credits": "unknown",
        "length": "6.4",
        "max_atmosphering_speed": "1200",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "65",
        "consumables": "2 days",
        "vehicle_class": "starfighter",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T16:33:52.860000Z",
        "edited": "2014-12-22T18:21:15.606149Z",
        "url": "https://swapi.co/api/vehicles/8/"
      },
      {
        "name": "Snowspeeder",
        "model": "t-47 airspeeder",
        "manufacturer": "Incom corporation",
        "cost_in_credits": "unknown",
        "length": "4.5",
        "max_atmosphering_speed": "650",
        "crew": "2",
        "passengers": "0",
        "cargo_capacity": "10",
        "consumables": "none",
        "vehicle_class": "airspeeder",
        "pilots": [
          "https://swapi.co/api/people/1/",
          "https://swapi.co/api/people/18/"
        ],
        "films": [
          "https://swapi.co/api/films/2/"
        ],
        "created": "2014-12-15T12:22:12Z",
        "edited": "2014-12-22T18:21:15.623033Z",
        "url": "https://swapi.co/api/vehicles/14/"
      },
      {
        "name": "TIE bomber",
        "model": "TIE/sa bomber",
        "manufacturer": "Sienar Fleet Systems",
        "cost_in_credits": "unknown",
        "length": "7.8",
        "max_atmosphering_speed": "850",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "none",
        "consumables": "2 days",
        "vehicle_class": "space/planetary bomber",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-15T12:33:15.838000Z",
        "edited": "2014-12-22T18:21:15.667730Z",
        "url": "https://swapi.co/api/vehicles/16/"
      },
      {
        "name": "AT-AT",
        "model": "All Terrain Armored Transport",
        "manufacturer": "Kuat Drive Yards, Imperial Department of Military Research",
        "cost_in_credits": "unknown",
        "length": "20",
        "max_atmosphering_speed": "60",
        "crew": "5",
        "passengers": "40",
        "cargo_capacity": "E1000",
        "consumables": "unknown",
        "vehicle_class": "assault walker",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-15T12:38:25.937000Z",
        "edited": "2014-12-22T18:21:15.714673Z",
        "url": "https://swapi.co/api/vehicles/18/"
      },
      {
        "name": "AT-ST",
        "model": "All Terrain Scout Transport",
        "manufacturer": "Kuat Drive Yards, Imperial Department of Military Research",
        "cost_in_credits": "unknown",
        "length": "2",
        "max_atmosphering_speed": "90",
        "crew": "2",
        "passengers": "0",
        "cargo_capacity": "200",
        "consumables": "none",
        "vehicle_class": "walker",
        "pilots": [
          "https://swapi.co/api/people/13/"
        ],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-15T12:46:42.384000Z",
        "edited": "2014-12-22T18:21:15.761584Z",
        "url": "https://swapi.co/api/vehicles/19/"
      },
      {
        "name": "Storm IV Twin-Pod cloud car",
        "model": "Storm IV Twin-Pod",
        "manufacturer": "Bespin Motors",
        "cost_in_credits": "75000",
        "length": "7",
        "max_atmosphering_speed": "1500",
        "crew": "2",
        "passengers": "0",
        "cargo_capacity": "10",
        "consumables": "1 day",
        "vehicle_class": "repulsorcraft",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/2/"
        ],
        "created": "2014-12-15T12:58:50.530000Z",
        "edited": "2014-12-22T18:21:15.783232Z",
        "url": "https://swapi.co/api/vehicles/20/"
      },
      {
        "name": "Sail barge",
        "model": "Modified Luxury Sail Barge",
        "manufacturer": "Ubrikkian Industries Custom Vehicle Division",
        "cost_in_credits": "285000",
        "length": "30",
        "max_atmosphering_speed": "100",
        "crew": "26",
        "passengers": "500",
        "cargo_capacity": "2000000",
        "consumables": "Live food tanks",
        "vehicle_class": "sail barge",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-18T10:44:14.217000Z",
        "edited": "2014-12-22T18:21:15.807906Z",
        "url": "https://swapi.co/api/vehicles/24/"
      }
    ]
  },
  "https://swapi.co/api/vehicles/4/": {
    "name": "Sand Crawler",
    "model": "Digger Crawler",
    "manufacturer": "Corellia Mining Corporation",
    "cost_in_credits": "150000",
    "length": "36.8",
    "max_atmosphering_speed": "30",
    "crew": "46",
    "passengers": "30",
    "cargo_capacity": "50000",
    "consumables": "2 months",
    "vehicle_class": "wheeled",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T15:36:25.724000Z",
    "edited": "2014-12-22T18:21:15.523587Z",
    "url": "https://swapi.co/api/vehicles/4/"
  },
  "https://swapi.co/api/vehicles/6/": {
    "name": "T-16 skyhopper",
    "model": "T-16 skyhopper",
    "manufacturer": "Incom Corporation",
    "cost_in_credits": "14500",
    "length": "10.4",
    "max_atmosphering_speed": "1200",
    "crew": "1",
    "passengers": "1",
    "cargo_capacity": "50",
    "consumables": "0",
    "vehicle_class": "repulsorcraft",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T16:01:52.434000Z",
    "edited": "2014-12-22T18:21:15.552614Z",
    "url": "https://swapi.co/api/vehicles/6/"
  },
  "https://swapi.co/api/vehicles/7/": {
    "name": "X-34 landspeeder",
    "model": "X-34 landspeeder",
    "manufacturer": "SoroSuub Corporation",
    "cost_in_credits": "10550",
    "length": "3.4",
    "max_atmosphering_speed": "250",
    "crew": "1",
    "passengers": "1",
    "cargo_capacity": "5",
    "consumables": "unknown",
    "vehicle_class": "repulsorcraft",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T16:13:52.586000Z",
    "edited": "2014-12-22T18:21:15.583700Z",
    "url": "https://swapi.co/api/vehicles/7/"
  },
  "https://swapi.co/api/vehicles/8/": {
    "name": "TIE/LN starfighter",
    "model": "Twin Ion Engine/Ln Starfighter",
    "manufacturer": "Sienar Fleet Systems",
    "cost_in_credits": "unknown",
    "length": "6.4",
    "max_atmosphering_speed": "1200",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "65",
    "consumables": "2 days",
    "vehicle_class": "starfighter",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T16:33:52.860000Z",
    "edited": "2014-12-22T18:21:15.606149Z",
    "url": "https://swapi.co/api/vehicles/8/"
  },
  "https://swapi.co/api/vehicles/14/": {
    "name": "Snowspeeder",
    "model": "t-47 airspeeder",
    "manufacturer": "Incom corporation",
    "cost_in_credits": "unknown",
    "length": "4.5",
    "max_atmosphering_speed": "650",
    "crew": "2",
    "passengers": "0",
    "cargo_capacity": "10",
    "consumables": "none",
    "vehicle_class": "airspeeder",
    "pilots": [
      "https://swapi.co/api/people/1/",
      "https://swapi.co/api/people/18/"
    ],
    "films": [
      "https://swapi.co/api/films/2/"
    ],
    "created": "2014-12-15T12:22:12Z",
    "edited": "2014-12-22T18:21:15.623033Z",
    "url": "https://swapi.co/api/vehicles/14/"
  },
  "https://swapi.co/api/vehicles/16/": {
    "name": "TIE bomber",
    "model": "TIE/sa bomber",
    "manufacturer": "Sienar Fleet Systems",
    "cost_in_credits": "unknown",
    "length": "7.8",
    "max_atmosphering_speed": "850",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "none",
    "consumables": "2 days",
    "vehicle_class": "space/planetary bomber",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-15T12:33:15.838000Z",
    "edited": "2014-12-22T18:21:15.667730Z",
    "url": "https://swapi.co/api/vehicles/16/"
  },
  "https://swapi.co/api/vehicles/18/": {
    "name": "AT-AT",
    "model": "All Terrain Armored Transport",
    "manufacturer": "Kuat Drive Yards, Imperial Department of Military Research",
    "cost_in_credits": "unknown",
    "length": "20",
    "max_atmosphering_speed": "60",
    "crew": "5",
    "passengers": "40",
    "cargo_capacity": "E1000",
    "consumables": "unknown",
    "vehicle_class": "assault walker",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-15T12:38:25.937000Z",
    "edited": "2014-12-22T18:21:15.714673Z",
    "url": "https://swapi.co/api/vehicles/18/"
  },
  "https://swapi.co/api/vehicles/19/": {
    "name": "AT-ST",
    "model": "All Terrain Scout Transport",
    "manufacturer": "Kuat Drive Yards, Imperial Department of Military Research",
    "cost_in_credits": "unknown",
    "length": "2",
    "max_atmosphering_speed": "90",
    "crew": "2",
    "passengers": "0",
    "cargo_capacity": "200",
    "consumables": "none",
    "vehicle_class": "walker",
    "pilots": [
      "https://swapi.co/api/people/13/"
    ],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-15T12:46:42.384000Z",
    "edited": "2014-12-22T18:21:15.761584Z",
    "url": "https://swapi.co/api/vehicles/19/"
  },
  "https://swapi.co/api/vehicles/20/": {
    "name": "Storm IV Twin-Pod cloud car",
    "model": "Storm IV Twin-Pod",
    "manufacturer": "Bespin Motors",
    "cost_in_credits": "75000",
    "length": "7",
    "max_atmosphering_speed": "1500",
    "crew": "2",
    "passengers": "0",
    "cargo_capacity": "10",
    "consumables": "1 day",
    "vehicle_class": "repulsorcraft",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/2/"
    ],
    "created": "2014-12-15T12:58:50.530000Z",
    "edited": "2014-12-22T18:21:15.783232Z",
    "url": "https://swapi.co/api/vehicles/20/"
  },
  "https://swapi.co/api/vehicles/24/": {
    "name": "Sail barge",
    "model": "Modified Luxury Sail Barge",
    "manufacturer": "Ubrikkian Industries Custom Vehicle Division",
    "cost_in_credits": "285000",
    "length": "30",
    "max_atmosphering_speed": "100",
    "crew": "26",
    "passengers": "500",
    "cargo_capacity": "2000000",
    "consumables": "Live food tanks",
    "vehicle_class": "sail barge",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-18T10:44:14.217000Z",
    "edited": "2014-12-22T18:21:15.807906Z",
    "url": "https://swapi.co/api/vehicles/24/"
  },
  "https://swapi.co/api/vehicles/?page=2": {
    "count": 39,
    "next": "https://swapi.co/api/vehicles/?page=3",
    "previous": "https://swapi.co/api/vehicles/?page=1",
    "results": [
      {
        "name": "Bantha-II cargo skiff",
        "model": "Bantha-II",
        "manufacturer": "Ubrikkian Industries",
        "cost_in_credits": "8000",
        "length": "9.5",
        "max_atmosphering_speed": "250",
        "crew": "5",
        "passengers": "16",
        "cargo_capacity": "135000",
        "consumables": "1 day",
        "vehicle_class": "repulsorcraft cargo skiff",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-18T10:48:03.208000Z",
        "edited": "2014-12-22T18:21:15.845988Z",
        "url": "https://swapi.co/api/vehicles/25/"
      },
      {
        "name": "TIE/IN interceptor",
        "model": "Twin Ion Engine Interceptor",
        "manufacturer": "Sienar Fleet Systems",
        "cost_in_credits": "unknown",
        "length": "9.6",
        "max_atmosphering_speed": "1250",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "75",
        "consumables": "2 days",
        "vehicle_class": "starfighter",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-18T10:50:28.225000Z",
        "edited": "2014-12-22T18:21:15.882388Z",
        "url": "https://swapi.co/api/vehicles/26/"
      },
      {
        "name": "Imperial Speeder Bike",
        "model": "74-Z speeder bike",
        "manufacturer": "Aratech Repulsor Company",
        "cost_in_credits": "8000",
        "length": "3",
        "max_atmosphering_speed": "360",
        "crew": "1",
        "passengers": "1",
        "cargo_capacity": "4",
        "consumables": "1 day",
        "vehicle_class": "speeder",
        "pilots": [
          "https://swapi.co/api/people/1/",
          "https://swapi.co/api/people/5/"
        ],
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-18T11:20:04.625000Z",
        "edited": "2014-12-22T18:21:15.920537Z",
        "url": "https://swapi.co/api/vehicles/30/"
      },
      {
        "name": "Vulture Droid",
        "model": "Vulture-class droid starfighter",
        "manufacturer": "Haor Chall Engineering, Baktoid Armor Workshop",
        "cost_in_credits": "unknown",
        "length": "3.5",
        "max_atmosphering_speed": "1200",
        "crew": "0",
        "passengers": "0",
        "cargo_capacity": "0",
        "consumables": "none",
        "vehicle_class": "starfighter",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-19T17:09:53.584000Z",
        "edited": "2014-12-22T18:21:15.953870Z",
        "url": "https://swapi.co/api/vehicles/33/"
      },
      {
        "name": "Multi-Troop Transport",
        "model": "Multi-Troop Transport",
        "manufacturer": "Baktoid Armor Workshop",
        "cost_in_credits": "138000",
        "length": "31",
        "max_atmosphering_speed": "35",
        "crew": "4",
        "passengers": "112",
        "cargo_capacity": "12000",
        "consumables": "unknown",
        "vehicle_class": "repulsorcraft",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:12:04.400000Z",
        "edited": "2014-12-22T18:21:15.975171Z",
        "url": "https://swapi.co/api/vehicles/34/"
      },
      {
        "name": "Armored Assault Tank",
        "model": "Armoured Assault Tank",
        "manufacturer": "Baktoid Armor Workshop",
        "cost_in_credits": "unknown",
        "length": "9.75",
        "max_atmosphering_speed": "55",
        "crew": "4",
        "passengers": "6",
        "cargo_capacity": "unknown",
        "consumables": "unknown",
        "vehicle_class": "repulsorcraft",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:13:29.799000Z",
        "edited": "2014-12-22T18:21:15.984817Z",
        "url": "https://swapi.co/api/vehicles/35/"
      },
      {
        "name": "Single Trooper Aerial Platform",
        "model": "Single Trooper Aerial Platform",
        "manufacturer": "Baktoid Armor Workshop",
        "cost_in_credits": "2500",
        "length": "2",
        "max_atmosphering_speed": "400",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "none",
        "consumables": "none",
        "vehicle_class": "repulsorcraft",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:15:09.511000Z",
        "edited": "2014-12-22T18:21:16.008594Z",
        "url": "https://swapi.co/api/vehicles/36/"
      },
      {
        "name": "C-9979 landing craft",
        "model": "C-9979 landing craft",
        "manufacturer": "Haor Chall Engineering",
        "cost_in_credits": "200000",
        "length": "210",
        "max_atmosphering_speed": "587",
        "crew": "140",
        "passengers": "284",
        "cargo_capacity": "1800000",
        "consumables": "1 day",
        "vehicle_class": "landing craft",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:20:36.373000Z",
        "edited": "2014-12-22T18:21:16.033738Z",
        "url": "https://swapi.co/api/vehicles/37/"
      },
      {
        "name": "Tribubble bongo",
        "model": "Tribubble bongo",
        "manufacturer": "Otoh Gunga Bongameken Cooperative",
        "cost_in_credits": "unknown",
        "length": "15",
        "max_atmosphering_speed": "85",
        "crew": "1",
        "passengers": "2",
        "cargo_capacity": "1600",
        "consumables": "unknown",
        "vehicle_class": "submarine",
        "pilots": [
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/32/"
        ],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:37:37.924000Z",
        "edited": "2014-12-22T18:21:16.072083Z",
        "url": "https://swapi.co/api/vehicles/38/"
      },
      {
        "name": "Sith speeder",
        "model": "FC-20 speeder bike",
        "manufacturer": "Razalon",
        "cost_in_credits": "4000",
        "length": "1.5",
        "max_atmosphering_speed": "180",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "2",
        "consumables": "unknown",
        "vehicle_class": "speeder",
        "pilots": [
          "https://swapi.co/api/people/44/"
        ],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-20T10:09:56.095000Z",
        "edited": "2014-12-22T18:21:16.095041Z",
        "url": "https://swapi.co/api/vehicles/42/"
      }
    ]
  },
  "https://swapi.co/api/vehicles/25/": {
    "name": "Bantha-II cargo skiff",
    "model": "Bantha-II",
    "manufacturer": "Ubrikkian Industries",
    "cost_in_credits": "8000",
    "length": "9.5",
    "max_atmosphering_speed": "250",
    "crew": "5",
    "passengers": "16",
    "cargo_capacity": "135000",
    "consumables": "1 day",
    "vehicle_class": "repulsorcraft cargo skiff",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-18T10:48:03.208000Z",
    "edited": "2014-12-22T18:21:15.845988Z",
    "url": "https://swapi.co/api/vehicles/25/"
  },
  "https://swapi.co/api/vehicles/26/": {
    "name": "TIE/IN interceptor",
    "model": "Twin Ion Engine Interceptor",
    "manufacturer": "Sienar Fleet Systems",
    "cost_in_credits": "unknown",
    "length": "9.6",
    "max_atmosphering_speed": "1250",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "75",
    "consumables": "2 days",
    "vehicle_class": "starfighter",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-18T10:50:28.225000Z",
    "edited": "2014-12-22T18:21:15.882388Z",
    "url": "https://swapi.co/api/vehicles/26/"
  },
  "https://swapi.co/api/vehicles/30/": {
    "name": "Imperial Speeder Bike",
    "model": "74-Z speeder bike",
    "manufacturer": "Aratech Repulsor Company",
    "cost_in_credits": "8000",
    "length": "3",
    "max_atmosphering_speed": "360",
    "crew": "1",
    "passengers": "1",
    "cargo_capacity": "4",
    "consumables": "1 day",
    "vehicle_class": "speeder",
    "pilots": [
      "https://swapi.co/api/people/1/",
      "https://swapi.co/api/people/5/"
    ],
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-18T11:20:04.625000Z",
    "edited": "2014-12-22T18:21:15.920537Z",
    "url": "https://swapi.co/api/vehicles/30/"
  },
  "https://swapi.co/api/vehicles/33/": {
    "name": "Vulture Droid",
    "model": "Vulture-class droid starfighter",
    "manufacturer": "Haor Chall Engineering, Baktoid Armor Workshop",
    "cost_in_credits": "unknown",
    "length": "3.5",
    "max_atmosphering_speed": "1200",
    "crew": "0",
    "passengers": "0",
    "cargo_capacity": "0",
    "consumables": "none",
    "vehicle_class": "starfighter",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-19T17:09:53.584000Z",
    "edited": "2014-12-22T18:21:15.953870Z",
    "url": "https://swapi.co/api/vehicles/33/"
  },
  "https://swapi.co/api/vehicles/34/": {
    "name": "Multi-Troop Transport",
    "model": "Multi-Troop Transport",
    "manufacturer": "Baktoid Armor Workshop",
    "cost_in_credits": "138000",
    "length": "31",
    "max_atmosphering_speed": "35",
    "crew": "4",
    "passengers": "112",
    "cargo_capacity": "12000",
    "consumables": "unknown",
    "vehicle_class": "repulsorcraft",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:12:04.400000Z",
    "edited": "2014-12-22T18:21:15.975171Z",
    "url": "https://swapi.co/api/vehicles/34/"
  },
  "https://swapi.co/api/vehicles/35/": {
    "name": "Armored Assault Tank",
    "model": "Armoured Assault Tank",
    "manufacturer": "Baktoid Armor Workshop",
    "cost_in_credits": "unknown",
    "length": "9.75",
    "max_atmosphering_speed": "55",
    "crew": "4",
    "passengers": "6",
    "cargo_capacity": "unknown",
    "consumables": "unknown",
    "vehicle_class": "repulsorcraft",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:13:29.799000Z",
    "edited": "2014-12-22T18:21:15.984817Z",
    "url": "https://swapi.co/api/vehicles/35/"
  },
  "https://swapi.co/api/vehicles/36/": {
    "name": "Single Trooper Aerial Platform",
    "model": "Single Trooper Aerial Platform",
    "manufacturer": "Baktoid Armor Workshop",
    "cost_in_credits": "2500",
    "length": "2",
    "max_atmosphering_speed": "400",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "none",
    "consumables": "none",
    "vehicle_class": "repulsorcraft",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:15:09.511000Z",
    "edited": "2014-12-22T18:21:16.008594Z",
    "url": "https://swapi.co/api/vehicles/36/"
  },
  "https://swapi.co/api/vehicles/37/": {
    "name": "C-9979 landing craft",
    "model": "C-9979 landing craft",
    "manufacturer": "Haor Chall Engineering",
    "cost_in_credits": "200000",
    "length": "210",
    "max_atmosphering_speed": "587",
    "crew": "140",
    "passengers": "284",
    "cargo_capacity": "1800000",
    "consumables": "1 day",
    "vehicle_class": "landing craft",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:20:36.373000Z",
    "edited": "2014-12-22T18:21:16.033738Z",
    "url": "https://swapi.co/api/vehicles/37/"
  },
  "https://swapi.co/api/vehicles/38/": {
    "name": "Tribubble bongo",
    "model": "Tribubble bongo",
    "manufacturer": "Otoh Gunga Bongameken Cooperative",
    "cost_in_credits": "unknown",
    "length": "15",
    "max_atmosphering_speed": "85",
    "crew": "1",
    "passengers": "2",
    "cargo_capacity": "1600",
    "consumables": "unknown",
    "vehicle_class": "submarine",
    "pilots": [
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/32/"
    ],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:37:37.924000Z",
    "edited": "2014-12-22T18:21:16.072083Z",
    "url": "https://swapi.co/api/vehicles/38/"
  },
  "https://swapi.co/api/vehicles/42/": {
    "name": "Sith speeder",
    "model": "FC-20 speeder bike",
    "manufacturer": "Razalon",
    "cost_in_credits": "4000",
    "length": "1.5",
    "max_atmosphering_speed": "180",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "2",
    "consumables": "unknown",
    "vehicle_class": "speeder",
    "pilots": [
      "https://swapi.co/api/people/44/"
    ],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-20T10:09:56.095000Z",
    "edited": "2014-12-22T18:21:16.095041Z",
    "url": "https://swapi.co/api/vehicles/42/"
  },
  "https://swapi.co/api/vehicles/?page=3": {
    "count": 39,
    "next": "https://swapi.co/api/vehicles/?page=4",
    "previous": "https://swapi.co/api/vehicles/?page=2",
    "results": [
      {
        "name": "Zephyr-G swoop bike",
        "model": "Zephyr-G swoop bike",
        "manufacturer": "Mobquet Swoops and Speeders",
        "cost_in_credits": "5750",
        "length": "3.68",
        "max_atmosphering_speed": "350",
        "crew": "1",
        "passengers": "1",
        "cargo_capacity": "200",
        "consumables": "none",
        "vehicle_class": "repulsorcraft",
        "pilots": [
          "https://swapi.co/api/people/11/"
        ],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T16:24:16.026000Z",
        "edited": "2014-12-22T18:21:16.117652Z",
        "url": "https://swapi.co/api/vehicles/44/"
      },
      {
        "name": "Koro-2 Exodrive airspeeder",
        "model": "Koro-2 Exodrive airspeeder",
        "manufacturer": "Desler Gizh Outworld Mobility Corporation",
        "cost_in_credits": "unknown",
        "length": "6.6",
        "max_atmosphering_speed": "800",
        "crew": "1",
        "passengers": "1",
        "cargo_capacity": "80",
        "consumables": "unknown",
        "vehicle_class": "airspeeder",
        "pilots": [
          "https://swapi.co/api/people/70/"
        ],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T17:17:33.526000Z",
        "edited": "2014-12-22T18:21:16.140018Z",
        "url": "https://swapi.co/api/vehicles/45/"
      },
      {
        "name": "XJ-6 airspeeder",
        "model": "XJ-6 airspeeder",
        "manufacturer": "Narglatch AirTech prefabricated kit",
        "cost_in_credits": "unknown",
        "length": "6.23",
        "max_atmosphering_speed": "720",
        "crew": "1",
        "passengers": "1",
        "cargo_capacity": "unknown",
        "consumables": "unknown",
        "vehicle_class": "airspeeder",
        "pilots": [
          "https://swapi.co/api/people/11/"
        ],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T17:19:19.991000Z",
        "edited": "2014-12-22T18:21:16.150194Z",
        "url": "https://swapi.co/api/vehicles/46/"
      },
      {
        "name": "LAAT/i",
        "model": "Low Altitude Assault Transport/infrantry",
        "manufacturer": "Rothana Heavy Engineering",
        "cost_in_credits": "unknown",
        "length": "17.4",
        "max_atmosphering_speed": "620",
        "crew": "6",
        "passengers": "30",
        "cargo_capacity": "170",
        "consumables": "unknown",
        "vehicle_class": "gunship",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T18:01:21.014000Z",
        "edited": "2014-12-22T18:21:16.181363Z",
        "url": "https://swapi.co/api/vehicles/50/"
      },
      {
        "name": "LAAT/c",
        "model": "Low Altitude Assault Transport/carrier",
        "manufacturer": "Rothana Heavy Engineering",
        "cost_in_credits": "unknown",
        "length": "28.82",
        "max_atmosphering_speed": "620",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "40000",
        "consumables": "unknown",
        "vehicle_class": "gunship",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T18:02:46.802000Z",
        "edited": "2014-12-22T18:21:16.229733Z",
        "url": "https://swapi.co/api/vehicles/51/"
      },
      {
        "name": "Tsmeu-6 personal wheel bike",
        "model": "Tsmeu-6 personal wheel bike",
        "manufacturer": "Z-Gomot Ternbuell Guppat Corporation",
        "cost_in_credits": "15000",
        "length": "3.5",
        "max_atmosphering_speed": "330",
        "crew": "1",
        "passengers": "1",
        "cargo_capacity": "10",
        "consumables": "none",
        "vehicle_class": "wheeled walker",
        "pilots": [
          "https://swapi.co/api/people/79/"
        ],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T19:43:54.870000Z",
        "edited": "2014-12-22T18:21:16.422662Z",
        "url": "https://swapi.co/api/vehicles/60/"
      },
      {
        "name": "Emergency Firespeeder",
        "model": "Fire suppression speeder",
        "manufacturer": "unknown",
        "cost_in_credits": "unknown",
        "length": "unknown",
        "max_atmosphering_speed": "unknown",
        "crew": "2",
        "passengers": "unknown",
        "cargo_capacity": "unknown",
        "consumables": "unknown",
        "vehicle_class": "fire suppression ship",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T19:50:58.559000Z",
        "edited": "2014-12-22T18:21:16.450655Z",
        "url": "https://swapi.co/api/vehicles/62/"
      },
      {
        "name": "Droid tri-fighter",
        "model": "tri-fighter",
        "manufacturer": "Colla Designs, Phlac-Arphocc Automata Industries",
        "cost_in_credits": "20000",
        "length": "5.4",
        "max_atmosphering_speed": "1180",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "0",
        "consumables": "none",
        "vehicle_class": "droid starfighter",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:05:19.992000Z",
        "edited": "2014-12-22T18:21:16.478901Z",
        "url": "https://swapi.co/api/vehicles/67/"
      },
      {
        "name": "Oevvaor jet catamaran",
        "model": "Oevvaor jet catamaran",
        "manufacturer": "Appazanna Engineering Works",
        "cost_in_credits": "12125",
        "length": "15.1",
        "max_atmosphering_speed": "420",
        "crew": "2",
        "passengers": "2",
        "cargo_capacity": "50",
        "consumables": "3 days",
        "vehicle_class": "airspeeder",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:20:53.931000Z",
        "edited": "2014-12-22T18:21:16.517049Z",
        "url": "https://swapi.co/api/vehicles/69/"
      },
      {
        "name": "Raddaugh Gnasp fluttercraft",
        "model": "Raddaugh Gnasp fluttercraft",
        "manufacturer": "Appazanna Engineering Works",
        "cost_in_credits": "14750",
        "length": "7",
        "max_atmosphering_speed": "310",
        "crew": "2",
        "passengers": "0",
        "cargo_capacity": "20",
        "consumables": "none",
        "vehicle_class": "air speeder",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:21:55.648000Z",
        "edited": "2014-12-22T18:21:16.547708Z",
        "url": "https://swapi.co/api/vehicles/70/"
      }
    ]
  },
  "https://swapi.co/api/vehicles/44/": {
    "name": "Zephyr-G swoop bike",
    "model": "Zephyr-G swoop bike",
    "manufacturer": "Mobquet Swoops and Speeders",
    "cost_in_credits": "5750",
    "length": "3.68",
    "max_atmosphering_speed": "350",
    "crew": "1",
    "passengers": "1",
    "cargo_capacity": "200",
    "consumables": "none",
    "vehicle_class": "repulsorcraft",
    "pilots": [
      "https://swapi.co/api/people/11/"
    ],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T16:24:16.026000Z",
    "edited": "2014-12-22T18:21:16.117652Z",
    "url": "https://swapi.co/api/vehicles/44/"
  },
  "https://swapi.co/api/vehicles/45/": {
    "name": "Koro-2 Exodrive airspeeder",
    "model": "Koro-2 Exodrive airspeeder",
    "manufacturer": "Desler Gizh Outworld Mobility Corporation",
    "cost_in_credits": "unknown",
    "length": "6.6",
    "max_atmosphering_speed": "800",
    "crew": "1",
    "passengers": "1",
    "cargo_capacity": "80",
    "consumables": "unknown",
    "vehicle_class": "airspeeder",
    "pilots": [
      "https://swapi.co/api/people/70/"
    ],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T17:17:33.526000Z",
    "edited": "2014-12-22T18:21:16.140018Z",
    "url": "https://swapi.co/api/vehicles/45/"
  },
  "https://swapi.co/api/vehicles/46/": {
    "name": "XJ-6 airspeeder",
    "model": "XJ-6 airspeeder",
    "manufacturer": "Narglatch AirTech prefabricated kit",
    "cost_in_credits": "unknown",
    "length": "6.23",
    "max_atmosphering_speed": "720",
    "crew": "1",
    "passengers": "1",
    "cargo_capacity": "unknown",
    "consumables": "unknown",
    "vehicle_class": "airspeeder",
    "pilots": [
      "https://swapi.co/api/people/11/"
    ],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T17:19:19.991000Z",
    "edited": "2014-12-22T18:21:16.150194Z",
    "url": "https://swapi.co/api/vehicles/46/"
  },
  "https://swapi.co/api/vehicles/50/": {
    "name": "LAAT/i",
    "model": "Low Altitude Assault Transport/infrantry",
    "manufacturer": "Rothana Heavy Engineering",
    "cost_in_credits": "unknown",
    "length": "17.4",
    "max_atmosphering_speed": "620",
    "crew": "6",
    "passengers": "30",
    "cargo_capacity": "170",
    "consumables": "unknown",
    "vehicle_class": "gunship",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T18:01:21.014000Z",
    "edited": "2014-12-22T18:21:16.181363Z",
    "url": "https://swapi.co/api/vehicles/50/"
  },
  "https://swapi.co/api/vehicles/51/": {
    "name": "LAAT/c",
    "model": "Low Altitude Assault Transport/carrier",
    "manufacturer": "Rothana Heavy Engineering",
    "cost_in_credits": "unknown",
    "length": "28.82",
    "max_atmosphering_speed": "620",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "40000",
    "consumables": "unknown",
    "vehicle_class": "gunship",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T18:02:46.802000Z",
    "edited": "2014-12-22T18:21:16.229733Z",
    "url": "https://swapi.co/api/vehicles/51/"
  },
  "https://swapi.co/api/vehicles/60/": {
    "name": "Tsmeu-6 personal wheel bike",
    "model": "Tsmeu-6 personal wheel bike",
    "manufacturer": "Z-Gomot Ternbuell Guppat Corporation",
    "cost_in_credits": "15000",
    "length": "3.5",
    "max_atmosphering_speed": "330",
    "crew": "1",
    "passengers": "1",
    "cargo_capacity": "10",
    "consumables": "none",
    "vehicle_class": "wheeled walker",
    "pilots": [
      "https://swapi.co/api/people/79/"
    ],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T19:43:54.870000Z",
    "edited": "2014-12-22T18:21:16.422662Z",
    "url": "https://swapi.co/api/vehicles/60/"
  },
  "https://swapi.co/api/vehicles/62/": {
    "name": "Emergency Firespeeder",
    "model": "Fire suppression speeder",
    "manufacturer": "unknown",
    "cost_in_credits": "unknown",
    "length": "unknown",
    "max_atmosphering_speed": "unknown",
    "crew": "2",
    "passengers": "unknown",
    "cargo_capacity": "unknown",
    "consumables": "unknown",
    "vehicle_class": "fire suppression ship",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T19:50:58.559000Z",
    "edited": "2014-12-22T18:21:16.450655Z",
    "url": "https://swapi.co/api/vehicles/62/"
  },
  "https://swapi.co/api/vehicles/67/": {
    "name": "Droid tri-fighter",
    "model": "tri-fighter",
    "manufacturer": "Colla Designs, Phlac-Arphocc Automata Industries",
    "cost_in_credits": "20000",
    "length": "5.4",
    "max_atmosphering_speed": "1180",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "0",
    "consumables": "none",
    "vehicle_class": "droid starfighter",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:05:19.992000Z",
    "edited": "2014-12-22T18:21:16.478901Z",
    "url": "https://swapi.co/api/vehicles/67/"
  },
  "https://swapi.co/api/vehicles/69/": {
    "name": "Oevvaor jet catamaran",
    "model": "Oevvaor jet catamaran",
    "manufacturer": "Appazanna Engineering Works",
    "cost_in_credits": "12125",
    "length": "15.1",
    "max_atmosphering_speed": "420",
    "crew": "2",
    "passengers": "2",
    "cargo_capacity": "50",
    "consumables": "3 days",
    "vehicle_class": "airspeeder",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:20:53.931000Z",
    "edited": "2014-12-22T18:21:16.517049Z",
    "url": "https://swapi.co/api/vehicles/69/"
  },
  "https://swapi.co/api/vehicles/70/": {
    "name": "Raddaugh Gnasp fluttercraft",
    "model": "Raddaugh Gnasp fluttercraft",
    "manufacturer": "Appazanna Engineering Works",
    "cost_in_credits": "14750",
    "length": "7",
    "max_atmosphering_speed": "310",
    "crew": "2",
    "passengers": "0",
    "cargo_capacity": "20",
    "consumables": "none",
    "vehicle_class": "air speeder",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:21:55.648000Z",
    "edited": "2014-12-22T18:21:16.547708Z",
    "url": "https://swapi.co/api/vehicles/70/"
  },
  "https://swapi.co/api/vehicles/?page=4": {
    "count": 39,
    "next": null,
    "previous": "https://swapi.co/api/vehicles/?page=3",
    "results": [
      {
        "name": "Clone turbo tank",
        "model": "HAVw A6 Juggernaut",
        "manufacturer": "Kuat Drive Yards",
        "cost_in_credits": "350000",
        "length": "49.4",
        "max_atmosphering_speed": "160",
        "crew": "20",
        "passengers": "300",
        "cargo_capacity": "30000",
        "consumables": "20 days",
        "vehicle_class": "wheeled walker",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:24:45.587000Z",
        "edited": "2014-12-22T18:21:16.571079Z",
        "url": "https://swapi.co/api/vehicles/71/"
      },
      {
        "name": "Corporate Alliance tank droid",
        "model": "NR-N99 Persuader-class droid enforcer",
        "manufacturer": "Techno Union",
        "cost_in_credits": "49000",
        "length": "10.96",
        "max_atmosphering_speed": "100",
        "crew": "0",
        "passengers": "4",
        "cargo_capacity": "none",
        "consumables": "none",
        "vehicle_class": "droid tank",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:26:55.522000Z",
        "edited": "2014-12-22T18:21:16.612902Z",
        "url": "https://swapi.co/api/vehicles/72/"
      },
      {
        "name": "Droid gunship",
        "model": "HMP droid gunship",
        "manufacturer": "Baktoid Fleet Ordnance, Haor Chall Engineering",
        "cost_in_credits": "60000",
        "length": "12.3",
        "max_atmosphering_speed": "820",
        "crew": "0",
        "passengers": "0",
        "cargo_capacity": "0",
        "consumables": "none",
        "vehicle_class": "airspeeder",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:32:05.687000Z",
        "edited": "2014-12-22T18:21:16.643329Z",
        "url": "https://swapi.co/api/vehicles/73/"
      },
      {
        "name": "AT-RT",
        "model": "All Terrain Recon Transport",
        "manufacturer": "Kuat Drive Yards",
        "cost_in_credits": "40000",
        "length": "3.2",
        "max_atmosphering_speed": "90",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "20",
        "consumables": "1 day",
        "vehicle_class": "walker",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:47:49.189000Z",
        "edited": "2014-12-22T18:21:16.672821Z",
        "url": "https://swapi.co/api/vehicles/76/"
      },
      {
        "name": "AT-TE",
        "model": "All Terrain Tactical Enforcer",
        "manufacturer": "Rothana Heavy Engineering, Kuat Drive Yards",
        "cost_in_credits": "unknown",
        "length": "13.2",
        "max_atmosphering_speed": "60",
        "crew": "6",
        "passengers": "36",
        "cargo_capacity": "E10000",
        "consumables": "21 days",
        "vehicle_class": "walker",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T18:10:07.560000Z",
        "edited": "2014-12-22T18:21:16.293771Z",
        "url": "https://swapi.co/api/vehicles/53/"
      },
      {
        "name": "SPHA",
        "model": "Self-Propelled Heavy Artillery",
        "manufacturer": "Rothana Heavy Engineering",
        "cost_in_credits": "unknown",
        "length": "140",
        "max_atmosphering_speed": "35",
        "crew": "25",
        "passengers": "30",
        "cargo_capacity": "500",
        "consumables": "7 days",
        "vehicle_class": "walker",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T18:12:32.315000Z",
        "edited": "2014-12-22T18:21:16.311761Z",
        "url": "https://swapi.co/api/vehicles/54/"
      },
      {
        "name": "Flitknot speeder",
        "model": "Flitknot speeder",
        "manufacturer": "Huppla Pasa Tisc Shipwrights Collective",
        "cost_in_credits": "8000",
        "length": "2",
        "max_atmosphering_speed": "634",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "unknown",
        "consumables": "unknown",
        "vehicle_class": "speeder",
        "pilots": [
          "https://swapi.co/api/people/67/"
        ],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T18:15:20.312000Z",
        "edited": "2014-12-22T18:21:16.335005Z",
        "url": "https://swapi.co/api/vehicles/55/"
      },
      {
        "name": "Neimoidian shuttle",
        "model": "Sheathipede-class transport shuttle",
        "manufacturer": "Haor Chall Engineering",
        "cost_in_credits": "unknown",
        "length": "20",
        "max_atmosphering_speed": "880",
        "crew": "2",
        "passengers": "6",
        "cargo_capacity": "E1000",
        "consumables": "7 days",
        "vehicle_class": "transport",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T18:25:44.912000Z",
        "edited": "2014-12-22T18:21:16.366134Z",
        "url": "https://swapi.co/api/vehicles/56/"
      },
      {
        "name": "Geonosian starfighter",
        "model": "Nantex-class territorial defense",
        "manufacturer": "Huppla Pasa Tisc Shipwrights Collective",
        "cost_in_credits": "unknown",
        "length": "9.8",
        "max_atmosphering_speed": "20000",
        "crew": "1",
        "passengers": "0",
        "cargo_capacity": "unknown",
        "consumables": "unknown",
        "vehicle_class": "starfighter",
        "pilots": [],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T18:34:12.541000Z",
        "edited": "2014-12-22T18:21:16.390980Z",
        "url": "https://swapi.co/api/vehicles/57/"
      }
    ]
  },
  "https://swapi.co/api/vehicles/71/": {
    "name": "Clone turbo tank",
    "model": "HAVw A6 Juggernaut",
    "manufacturer": "Kuat Drive Yards",
    "cost_in_credits": "350000",
    "length": "49.4",
    "max_atmosphering_speed": "160",
    "crew": "20",
    "passengers": "300",
    "cargo_capacity": "30000",
    "consumables": "20 days",
    "vehicle_class": "wheeled walker",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:24:45.587000Z",
    "edited": "2014-12-22T18:21:16.571079Z",
    "url": "https://swapi.co/api/vehicles/71/"
  },
  "https://swapi.co/api/vehicles/72/": {
    "name": "Corporate Alliance tank droid",
    "model": "NR-N99 Persuader-class droid enforcer",
    "manufacturer": "Techno Union",
    "cost_in_credits": "49000",
    "length": "10.96",
    "max_atmosphering_speed": "100",
    "crew": "0",
    "passengers": "4",
    "cargo_capacity": "none",
    "consumables": "none",
    "vehicle_class": "droid tank",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:26:55.522000Z",
    "edited": "2014-12-22T18:21:16.612902Z",
    "url": "https://swapi.co/api/vehicles/72/"
  },
  "https://swapi.co/api/vehicles/73/": {
    "name": "Droid gunship",
    "model": "HMP droid gunship",
    "manufacturer": "Baktoid Fleet Ordnance, Haor Chall Engineering",
    "cost_in_credits": "60000",
    "length": "12.3",
    "max_atmosphering_speed": "820",
    "crew": "0",
    "passengers": "0",
    "cargo_capacity": "0",
    "consumables": "none",
    "vehicle_class": "airspeeder",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:32:05.687000Z",
    "edited": "2014-12-22T18:21:16.643329Z",
    "url": "https://swapi.co/api/vehicles/73/"
  },
  "https://swapi.co/api/vehicles/76/": {
    "name": "AT-RT",
    "model": "All Terrain Recon Transport",
    "manufacturer": "Kuat Drive Yards",
    "cost_in_credits": "40000",
    "length": "3.2",
    "max_atmosphering_speed": "90",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "20",
    "consumables": "1 day",
    "vehicle_class": "walker",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:47:49.189000Z",
    "edited": "2014-12-22T18:21:16.672821Z",
    "url": "https://swapi.co/api/vehicles/76/"
  },
  "https://swapi.co/api/vehicles/53/": {
    "name": "AT-TE",
    "model": "All Terrain Tactical Enforcer",
    "manufacturer": "Rothana Heavy Engineering, Kuat Drive Yards",
    "cost_in_credits": "unknown",
    "length": "13.2",
    "max_atmosphering_speed": "60",
    "crew": "6",
    "passengers": "36",
    "cargo_capacity": "E10000",
    "consumables": "21 days",
    "vehicle_class": "walker",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T18:10:07.560000Z",
    "edited": "2014-12-22T18:21:16.293771Z",
    "url": "https://swapi.co/api/vehicles/53/"
  },
  "https://swapi.co/api/vehicles/54/": {
    "name": "SPHA",
    "model": "Self-Propelled Heavy Artillery",
    "manufacturer": "Rothana Heavy Engineering",
    "cost_in_credits": "unknown",
    "length": "140",
    "max_atmosphering_speed": "35",
    "crew": "25",
    "passengers": "30",
    "cargo_capacity": "500",
    "consumables": "7 days",
    "vehicle_class": "walker",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T18:12:32.315000Z",
    "edited": "2014-12-22T18:21:16.311761Z",
    "url": "https://swapi.co/api/vehicles/54/"
  },
  "https://swapi.co/api/vehicles/55/": {
    "name": "Flitknot speeder",
    "model": "Flitknot speeder",
    "manufacturer": "Huppla Pasa Tisc Shipwrights Collective",
    "cost_in_credits": "8000",
    "length": "2",
    "max_atmosphering_speed": "634",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "unknown",
    "consumables": "unknown",
    "vehicle_class": "speeder",
    "pilots": [
      "https://swapi.co/api/people/67/"
    ],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T18:15:20.312000Z",
    "edited": "2014-12-22T18:21:16.335005Z",
    "url": "https://swapi.co/api/vehicles/55/"
  },
  "https://swapi.co/api/vehicles/56/": {
    "name": "Neimoidian shuttle",
    "model": "Sheathipede-class transport shuttle",
    "manufacturer": "Haor Chall Engineering",
    "cost_in_credits": "unknown",
    "length": "20",
    "max_atmosphering_speed": "880",
    "crew": "2",
    "passengers": "6",
    "cargo_capacity": "E1000",
    "consumables": "7 days",
    "vehicle_class": "transport",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T18:25:44.912000Z",
    "edited": "2014-12-22T18:21:16.366134Z",
    "url": "https://swapi.co/api/vehicles/56/"
  },
  "https://swapi.co/api/vehicles/57/": {
    "name": "Geonosian starfighter",
    "model": "Nantex-class territorial defense",
    "manufacturer": "Huppla Pasa Tisc Shipwrights Collective",
    "cost_in_credits": "unknown",
    "length": "9.8",
    "max_atmosphering_speed": "20000",
    "crew": "1",
    "passengers": "0",
    "cargo_capacity": "unknown",
    "consumables": "unknown",
    "vehicle_class": "starfighter",
    "pilots": [],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T18:34:12.541000Z",
    "edited": "2014-12-22T18:21:16.390980Z",
    "url": "https://swapi.co/api/vehicles/57/"
  },
  "https://swapi.co/api/species/": {
    "count": 37,
    "next": "https://swapi.co/api/species/?page=2",
    "previous": null,
    "results": [
      {
        "name": "Hutt",
        "classification": "gastropod",
        "designation": "sentient",
        "average_height": "300",
        "skin_colors": "green, brown, tan",
        "hair_colors": "n/a",
        "eye_colors": "yellow, red",
        "average_lifespan": "E1000",
        "homeworld": "https://swapi.co/api/planets/24/",
        "language": "Huttese",
        "people": [
          "https://swapi.co/api/people/16/"
        ],
        "films": [
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T17:12:50.410000Z",
        "edited": "2014-12-20T21:36:42.146000Z",
        "url": "https://swapi.co/api/species/5/"
      },
      {
        "name": "Yoda's species",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "66",
        "skin_colors": "green, yellow",
        "hair_colors": "brown, white",
        "eye_colors": "brown, green, yellow",
        "average_lifespan": "900",
        "homeworld": "https://swapi.co/api/planets/28/",
        "language": "Galactic basic",
        "people": [
          "https://swapi.co/api/people/20/"
        ],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-15T12:27:22.877000Z",
        "edited": "2014-12-20T21:36:42.148000Z",
        "url": "https://swapi.co/api/species/6/"
      },
      {
        "name": "Trandoshan",
        "classification": "reptile",
        "designation": "sentient",
        "average_height": "200",
        "skin_colors": "brown, green",
        "hair_colors": "none",
        "eye_colors": "yellow, orange",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/29/",
        "language": "Dosh",
        "people": [
          "https://swapi.co/api/people/24/"
        ],
        "films": [
          "https://swapi.co/api/films/2/"
        ],
        "created": "2014-12-15T13:07:47.704000Z",
        "edited": "2014-12-20T21:36:42.151000Z",
        "url": "https://swapi.co/api/species/7/"
      },
      {
        "name": "Mon Calamari",
        "classification": "amphibian",
        "designation": "sentient",
        "average_height": "160",
        "skin_colors": "red, blue, brown, magenta",
        "hair_colors": "none",
        "eye_colors": "yellow",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/31/",
        "language": "Mon Calamarian",
        "people": [
          "https://swapi.co/api/people/27/"
        ],
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-18T11:09:52.263000Z",
        "edited": "2014-12-20T21:36:42.153000Z",
        "url": "https://swapi.co/api/species/8/"
      },
      {
        "name": "Ewok",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "100",
        "skin_colors": "brown",
        "hair_colors": "white, brown, black",
        "eye_colors": "orange, brown",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/7/",
        "language": "Ewokese",
        "people": [
          "https://swapi.co/api/people/30/"
        ],
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-18T11:22:00.285000Z",
        "edited": "2014-12-20T21:36:42.155000Z",
        "url": "https://swapi.co/api/species/9/"
      },
      {
        "name": "Sullustan",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "180",
        "skin_colors": "pale",
        "hair_colors": "none",
        "eye_colors": "black",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/33/",
        "language": "Sullutese",
        "people": [
          "https://swapi.co/api/people/31/"
        ],
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-18T11:26:20.103000Z",
        "edited": "2014-12-20T21:36:42.157000Z",
        "url": "https://swapi.co/api/species/10/"
      },
      {
        "name": "Neimodian",
        "classification": "unknown",
        "designation": "sentient",
        "average_height": "180",
        "skin_colors": "grey, green",
        "hair_colors": "none",
        "eye_colors": "red, pink",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/18/",
        "language": "Neimoidia",
        "people": [
          "https://swapi.co/api/people/33/"
        ],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:07:31.319000Z",
        "edited": "2014-12-20T21:36:42.160000Z",
        "url": "https://swapi.co/api/species/11/"
      },
      {
        "name": "Gungan",
        "classification": "amphibian",
        "designation": "sentient",
        "average_height": "190",
        "skin_colors": "brown, green",
        "hair_colors": "none",
        "eye_colors": "orange",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/8/",
        "language": "Gungan basic",
        "people": [
          "https://swapi.co/api/people/36/",
          "https://swapi.co/api/people/37/",
          "https://swapi.co/api/people/38/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:30:37.341000Z",
        "edited": "2014-12-20T21:36:42.163000Z",
        "url": "https://swapi.co/api/species/12/"
      },
      {
        "name": "Toydarian",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "120",
        "skin_colors": "blue, green, grey",
        "hair_colors": "none",
        "eye_colors": "yellow",
        "average_lifespan": "91",
        "homeworld": "https://swapi.co/api/planets/34/",
        "language": "Toydarian",
        "people": [
          "https://swapi.co/api/people/40/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:48:56.893000Z",
        "edited": "2014-12-20T21:36:42.165000Z",
        "url": "https://swapi.co/api/species/13/"
      },
      {
        "name": "Dug",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "100",
        "skin_colors": "brown, purple, grey, red",
        "hair_colors": "none",
        "eye_colors": "yellow, blue",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/35/",
        "language": "Dugese",
        "people": [
          "https://swapi.co/api/people/41/"
        ],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-19T17:53:11.214000Z",
        "edited": "2014-12-20T21:36:42.167000Z",
        "url": "https://swapi.co/api/species/14/"
      }
    ]
  },
  "https://swapi.co/api/species/5/": {
    "name": "Hutt",
    "classification": "gastropod",
    "designation": "sentient",
    "average_height": "300",
    "skin_colors": "green, brown, tan",
    "hair_colors": "n/a",
    "eye_colors": "yellow, red",
    "average_lifespan": "E1000",
    "homeworld": "https://swapi.co/api/planets/24/",
    "language": "Huttese",
    "people": [
      "https://swapi.co/api/people/16/"
    ],
    "films": [
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T17:12:50.410000Z",
    "edited": "2014-12-20T21:36:42.146000Z",
    "url": "https://swapi.co/api/species/5/"
  },
  "https://swapi.co/api/species/6/": {
    "name": "Yoda's species",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "66",
    "skin_colors": "green, yellow",
    "hair_colors": "brown, white",
    "eye_colors": "brown, green, yellow",
    "average_lifespan": "900",
    "homeworld": "https://swapi.co/api/planets/28/",
    "language": "Galactic basic",
    "people": [
      "https://swapi.co/api/people/20/"
    ],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-15T12:27:22.877000Z",
    "edited": "2014-12-20T21:36:42.148000Z",
    "url": "https://swapi.co/api/species/6/"
  },
  "https://swapi.co/api/species/7/": {
    "name": "Trandoshan",
    "classification": "reptile",
    "designation": "sentient",
    "average_height": "200",
    "skin_colors": "brown, green",
    "hair_colors": "none",
    "eye_colors": "yellow, orange",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/29/",
    "language": "Dosh",
    "people": [
      "https://swapi.co/api/people/24/"
    ],
    "films": [
      "https://swapi.co/api/films/2/"
    ],
    "created": "2014-12-15T13:07:47.704000Z",
    "edited": "2014-12-20T21:36:42.151000Z",
    "url": "https://swapi.co/api/species/7/"
  },
  "https://swapi.co/api/species/8/": {
    "name": "Mon Calamari",
    "classification": "amphibian",
    "designation": "sentient",
    "average_height": "160",
    "skin_colors": "red, blue, brown, magenta",
    "hair_colors": "none",
    "eye_colors": "yellow",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/31/",
    "language": "Mon Calamarian",
    "people": [
      "https://swapi.co/api/people/27/"
    ],
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-18T11:09:52.263000Z",
    "edited": "2014-12-20T21:36:42.153000Z",
    "url": "https://swapi.co/api/species/8/"
  },
  "https://swapi.co/api/species/9/": {
    "name": "Ewok",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "100",
    "skin_colors": "brown",
    "hair_colors": "white, brown, black",
    "eye_colors": "orange, brown",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/7/",
    "language": "Ewokese",
    "people": [
      "https://swapi.co/api/people/30/"
    ],
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-18T11:22:00.285000Z",
    "edited": "2014-12-20T21:36:42.155000Z",
    "url": "https://swapi.co/api/species/9/"
  },
  "https://swapi.co/api/species/10/": {
    "name": "Sullustan",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "180",
    "skin_colors": "pale",
    "hair_colors": "none",
    "eye_colors": "black",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/33/",
    "language": "Sullutese",
    "people": [
      "https://swapi.co/api/people/31/"
    ],
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-18T11:26:20.103000Z",
    "edited": "2014-12-20T21:36:42.157000Z",
    "url": "https://swapi.co/api/species/10/"
  },
  "https://swapi.co/api/species/11/": {
    "name": "Neimodian",
    "classification": "unknown",
    "designation": "sentient",
    "average_height": "180",
    "skin_colors": "grey, green",
    "hair_colors": "none",
    "eye_colors": "red, pink",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/18/",
    "language": "Neimoidia",
    "people": [
      "https://swapi.co/api/people/33/"
    ],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:07:31.319000Z",
    "edited": "2014-12-20T21:36:42.160000Z",
    "url": "https://swapi.co/api/species/11/"
  },
  "https://swapi.co/api/species/12/": {
    "name": "Gungan",
    "classification": "amphibian",
    "designation": "sentient",
    "average_height": "190",
    "skin_colors": "brown, green",
    "hair_colors": "none",
    "eye_colors": "orange",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/8/",
    "language": "Gungan basic",
    "people": [
      "https://swapi.co/api/people/36/",
      "https://swapi.co/api/people/37/",
      "https://swapi.co/api/people/38/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:30:37.341000Z",
    "edited": "2014-12-20T21:36:42.163000Z",
    "url": "https://swapi.co/api/species/12/"
  },
  "https://swapi.co/api/species/13/": {
    "name": "Toydarian",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "120",
    "skin_colors": "blue, green, grey",
    "hair_colors": "none",
    "eye_colors": "yellow",
    "average_lifespan": "91",
    "homeworld": "https://swapi.co/api/planets/34/",
    "language": "Toydarian",
    "people": [
      "https://swapi.co/api/people/40/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:48:56.893000Z",
    "edited": "2014-12-20T21:36:42.165000Z",
    "url": "https://swapi.co/api/species/13/"
  },
  "https://swapi.co/api/species/14/": {
    "name": "Dug",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "100",
    "skin_colors": "brown, purple, grey, red",
    "hair_colors": "none",
    "eye_colors": "yellow, blue",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/35/",
    "language": "Dugese",
    "people": [
      "https://swapi.co/api/people/41/"
    ],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-19T17:53:11.214000Z",
    "edited": "2014-12-20T21:36:42.167000Z",
    "url": "https://swapi.co/api/species/14/"
  },
  "https://swapi.co/api/species/?page=2": {
    "count": 37,
    "next": "https://swapi.co/api/species/?page=3",
    "previous": "https://swapi.co/api/species/?page=1",
    "results": [
      {
        "name": "Twi'lek",
        "classification": "mammals",
        "designation": "sentient",
        "average_height": "200",
        "skin_colors": "orange, yellow, blue, green, pink, purple, tan",
        "hair_colors": "none",
        "eye_colors": "blue, brown, orange, pink",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/37/",
        "language": "Twi'leki",
        "people": [
          "https://swapi.co/api/people/45/",
          "https://swapi.co/api/people/46/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-20T09:48:02.406000Z",
        "edited": "2014-12-20T21:36:42.169000Z",
        "url": "https://swapi.co/api/species/15/"
      },
      {
        "name": "Aleena",
        "classification": "reptile",
        "designation": "sentient",
        "average_height": "80",
        "skin_colors": "blue, gray",
        "hair_colors": "none",
        "eye_colors": "unknown",
        "average_lifespan": "79",
        "homeworld": "https://swapi.co/api/planets/38/",
        "language": "Aleena",
        "people": [
          "https://swapi.co/api/people/47/"
        ],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-20T09:53:16.481000Z",
        "edited": "2014-12-20T21:36:42.171000Z",
        "url": "https://swapi.co/api/species/16/"
      },
      {
        "name": "Vulptereen",
        "classification": "unknown",
        "designation": "sentient",
        "average_height": "100",
        "skin_colors": "grey",
        "hair_colors": "none",
        "eye_colors": "yellow",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/39/",
        "language": "vulpterish",
        "people": [
          "https://swapi.co/api/people/48/"
        ],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-20T09:57:33.128000Z",
        "edited": "2014-12-20T21:36:42.173000Z",
        "url": "https://swapi.co/api/species/17/"
      },
      {
        "name": "Xexto",
        "classification": "unknown",
        "designation": "sentient",
        "average_height": "125",
        "skin_colors": "grey, yellow, purple",
        "hair_colors": "none",
        "eye_colors": "black",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/40/",
        "language": "Xextese",
        "people": [
          "https://swapi.co/api/people/49/"
        ],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-20T10:02:13.915000Z",
        "edited": "2014-12-20T21:36:42.175000Z",
        "url": "https://swapi.co/api/species/18/"
      },
      {
        "name": "Toong",
        "classification": "unknown",
        "designation": "sentient",
        "average_height": "200",
        "skin_colors": "grey, green, yellow",
        "hair_colors": "none",
        "eye_colors": "orange",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/41/",
        "language": "Tundan",
        "people": [
          "https://swapi.co/api/people/50/"
        ],
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T10:08:36.795000Z",
        "edited": "2014-12-20T21:36:42.177000Z",
        "url": "https://swapi.co/api/species/19/"
      },
      {
        "name": "Cerean",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "200",
        "skin_colors": "pale pink",
        "hair_colors": "red, blond, black, white",
        "eye_colors": "hazel",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/43/",
        "language": "Cerean",
        "people": [
          "https://swapi.co/api/people/52/"
        ],
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T10:15:33.765000Z",
        "edited": "2014-12-20T21:36:42.179000Z",
        "url": "https://swapi.co/api/species/20/"
      },
      {
        "name": "Nautolan",
        "classification": "amphibian",
        "designation": "sentient",
        "average_height": "180",
        "skin_colors": "green, blue, brown, red",
        "hair_colors": "none",
        "eye_colors": "black",
        "average_lifespan": "70",
        "homeworld": "https://swapi.co/api/planets/44/",
        "language": "Nautila",
        "people": [
          "https://swapi.co/api/people/53/"
        ],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-20T10:18:58.610000Z",
        "edited": "2014-12-20T21:36:42.181000Z",
        "url": "https://swapi.co/api/species/21/"
      },
      {
        "name": "Zabrak",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "180",
        "skin_colors": "pale, brown, red, orange, yellow",
        "hair_colors": "black",
        "eye_colors": "brown, orange",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/45/",
        "language": "Zabraki",
        "people": [
          "https://swapi.co/api/people/44/",
          "https://swapi.co/api/people/54/"
        ],
        "films": [
          "https://swapi.co/api/films/4/"
        ],
        "created": "2014-12-20T10:26:59.894000Z",
        "edited": "2014-12-20T21:36:42.183000Z",
        "url": "https://swapi.co/api/species/22/"
      },
      {
        "name": "Tholothian",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "unknown",
        "skin_colors": "dark",
        "hair_colors": "unknown",
        "eye_colors": "blue, indigo",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/46/",
        "language": "unknown",
        "people": [
          "https://swapi.co/api/people/55/"
        ],
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T10:29:13.798000Z",
        "edited": "2014-12-20T21:36:42.186000Z",
        "url": "https://swapi.co/api/species/23/"
      },
      {
        "name": "Iktotchi",
        "classification": "unknown",
        "designation": "sentient",
        "average_height": "180",
        "skin_colors": "pink",
        "hair_colors": "none",
        "eye_colors": "orange",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/47/",
        "language": "Iktotchese",
        "people": [
          "https://swapi.co/api/people/56/"
        ],
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T10:32:13.046000Z",
        "edited": "2014-12-20T21:36:42.188000Z",
        "url": "https://swapi.co/api/species/24/"
      }
    ]
  },
  "https://swapi.co/api/species/15/": {
    "name": "Twi'lek",
    "classification": "mammals",
    "designation": "sentient",
    "average_height": "200",
    "skin_colors": "orange, yellow, blue, green, pink, purple, tan",
    "hair_colors": "none",
    "eye_colors": "blue, brown, orange, pink",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/37/",
    "language": "Twi'leki",
    "people": [
      "https://swapi.co/api/people/45/",
      "https://swapi.co/api/people/46/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-20T09:48:02.406000Z",
    "edited": "2014-12-20T21:36:42.169000Z",
    "url": "https://swapi.co/api/species/15/"
  },
  "https://swapi.co/api/species/16/": {
    "name": "Aleena",
    "classification": "reptile",
    "designation": "sentient",
    "average_height": "80",
    "skin_colors": "blue, gray",
    "hair_colors": "none",
    "eye_colors": "unknown",
    "average_lifespan": "79",
    "homeworld": "https://swapi.co/api/planets/38/",
    "language": "Aleena",
    "people": [
      "https://swapi.co/api/people/47/"
    ],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-20T09:53:16.481000Z",
    "edited": "2014-12-20T21:36:42.171000Z",
    "url": "https://swapi.co/api/species/16/"
  },
  "https://swapi.co/api/species/17/": {
    "name": "Vulptereen",
    "classification": "unknown",
    "designation": "sentient",
    "average_height": "100",
    "skin_colors": "grey",
    "hair_colors": "none",
    "eye_colors": "yellow",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/39/",
    "language": "vulpterish",
    "people": [
      "https://swapi.co/api/people/48/"
    ],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-20T09:57:33.128000Z",
    "edited": "2014-12-20T21:36:42.173000Z",
    "url": "https://swapi.co/api/species/17/"
  },
  "https://swapi.co/api/species/18/": {
    "name": "Xexto",
    "classification": "unknown",
    "designation": "sentient",
    "average_height": "125",
    "skin_colors": "grey, yellow, purple",
    "hair_colors": "none",
    "eye_colors": "black",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/40/",
    "language": "Xextese",
    "people": [
      "https://swapi.co/api/people/49/"
    ],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-20T10:02:13.915000Z",
    "edited": "2014-12-20T21:36:42.175000Z",
    "url": "https://swapi.co/api/species/18/"
  },
  "https://swapi.co/api/species/19/": {
    "name": "Toong",
    "classification": "unknown",
    "designation": "sentient",
    "average_height": "200",
    "skin_colors": "grey, green, yellow",
    "hair_colors": "none",
    "eye_colors": "orange",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/41/",
    "language": "Tundan",
    "people": [
      "https://swapi.co/api/people/50/"
    ],
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T10:08:36.795000Z",
    "edited": "2014-12-20T21:36:42.177000Z",
    "url": "https://swapi.co/api/species/19/"
  },
  "https://swapi.co/api/species/20/": {
    "name": "Cerean",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "200",
    "skin_colors": "pale pink",
    "hair_colors": "red, blond, black, white",
    "eye_colors": "hazel",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/43/",
    "language": "Cerean",
    "people": [
      "https://swapi.co/api/people/52/"
    ],
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T10:15:33.765000Z",
    "edited": "2014-12-20T21:36:42.179000Z",
    "url": "https://swapi.co/api/species/20/"
  },
  "https://swapi.co/api/species/21/": {
    "name": "Nautolan",
    "classification": "amphibian",
    "designation": "sentient",
    "average_height": "180",
    "skin_colors": "green, blue, brown, red",
    "hair_colors": "none",
    "eye_colors": "black",
    "average_lifespan": "70",
    "homeworld": "https://swapi.co/api/planets/44/",
    "language": "Nautila",
    "people": [
      "https://swapi.co/api/people/53/"
    ],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-20T10:18:58.610000Z",
    "edited": "2014-12-20T21:36:42.181000Z",
    "url": "https://swapi.co/api/species/21/"
  },
  "https://swapi.co/api/species/22/": {
    "name": "Zabrak",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "180",
    "skin_colors": "pale, brown, red, orange, yellow",
    "hair_colors": "black",
    "eye_colors": "brown, orange",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/45/",
    "language": "Zabraki",
    "people": [
      "https://swapi.co/api/people/44/",
      "https://swapi.co/api/people/54/"
    ],
    "films": [
      "https://swapi.co/api/films/4/"
    ],
    "created": "2014-12-20T10:26:59.894000Z",
    "edited": "2014-12-20T21:36:42.183000Z",
    "url": "https://swapi.co/api/species/22/"
  },
  "https://swapi.co/api/species/23/": {
    "name": "Tholothian",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "unknown",
    "skin_colors": "dark",
    "hair_colors": "unknown",
    "eye_colors": "blue, indigo",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/46/",
    "language": "unknown",
    "people": [
      "https://swapi.co/api/people/55/"
    ],
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T10:29:13.798000Z",
    "edited": "2014-12-20T21:36:42.186000Z",
    "url": "https://swapi.co/api/species/23/"
  },
  "https://swapi.co/api/species/24/": {
    "name": "Iktotchi",
    "classification": "unknown",
    "designation": "sentient",
    "average_height": "180",
    "skin_colors": "pink",
    "hair_colors": "none",
    "eye_colors": "orange",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/47/",
    "language": "Iktotchese",
    "people": [
      "https://swapi.co/api/people/56/"
    ],
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T10:32:13.046000Z",
    "edited": "2014-12-20T21:36:42.188000Z",
    "url": "https://swapi.co/api/species/24/"
  },
  "https://swapi.co/api/species/?page=3": {
    "count": 37,
    "next": "https://swapi.co/api/species/?page=4",
    "previous": "https://swapi.co/api/species/?page=2",
    "results": [
      {
        "name": "Quermian",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "240",
        "skin_colors": "white",
        "hair_colors": "none",
        "eye_colors": "yellow",
        "average_lifespan": "86",
        "homeworld": "https://swapi.co/api/planets/48/",
        "language": "Quermian",
        "people": [
          "https://swapi.co/api/people/57/"
        ],
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T10:34:50.827000Z",
        "edited": "2014-12-20T21:36:42.189000Z",
        "url": "https://swapi.co/api/species/25/"
      },
      {
        "name": "Kel Dor",
        "classification": "unknown",
        "designation": "sentient",
        "average_height": "180",
        "skin_colors": "peach, orange, red",
        "hair_colors": "none",
        "eye_colors": "black, silver",
        "average_lifespan": "70",
        "homeworld": "https://swapi.co/api/planets/49/",
        "language": "Kel Dor",
        "people": [
          "https://swapi.co/api/people/58/"
        ],
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T10:49:21.692000Z",
        "edited": "2014-12-20T21:36:42.191000Z",
        "url": "https://swapi.co/api/species/26/"
      },
      {
        "name": "Chagrian",
        "classification": "amphibian",
        "designation": "sentient",
        "average_height": "190",
        "skin_colors": "blue",
        "hair_colors": "none",
        "eye_colors": "blue",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/50/",
        "language": "Chagria",
        "people": [
          "https://swapi.co/api/people/59/"
        ],
        "films": [
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T10:53:28.795000Z",
        "edited": "2014-12-20T21:36:42.193000Z",
        "url": "https://swapi.co/api/species/27/"
      },
      {
        "name": "Geonosian",
        "classification": "insectoid",
        "designation": "sentient",
        "average_height": "178",
        "skin_colors": "green, brown",
        "hair_colors": "none",
        "eye_colors": "green, hazel",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/11/",
        "language": "Geonosian",
        "people": [
          "https://swapi.co/api/people/63/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T16:40:45.618000Z",
        "edited": "2014-12-20T21:36:42.195000Z",
        "url": "https://swapi.co/api/species/28/"
      },
      {
        "name": "Mirialan",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "180",
        "skin_colors": "yellow, green",
        "hair_colors": "black, brown",
        "eye_colors": "blue, green, red, yellow, brown, orange",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/51/",
        "language": "Mirialan",
        "people": [
          "https://swapi.co/api/people/64/",
          "https://swapi.co/api/people/65/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T16:46:48.290000Z",
        "edited": "2014-12-20T21:36:42.197000Z",
        "url": "https://swapi.co/api/species/29/"
      },
      {
        "name": "Clawdite",
        "classification": "reptilian",
        "designation": "sentient",
        "average_height": "180",
        "skin_colors": "green, yellow",
        "hair_colors": "none",
        "eye_colors": "yellow",
        "average_lifespan": "70",
        "homeworld": "https://swapi.co/api/planets/54/",
        "language": "Clawdite",
        "people": [
          "https://swapi.co/api/people/70/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T16:57:46.171000Z",
        "edited": "2014-12-20T21:36:42.199000Z",
        "url": "https://swapi.co/api/species/30/"
      },
      {
        "name": "Besalisk",
        "classification": "amphibian",
        "designation": "sentient",
        "average_height": "178",
        "skin_colors": "brown",
        "hair_colors": "none",
        "eye_colors": "yellow",
        "average_lifespan": "75",
        "homeworld": "https://swapi.co/api/planets/55/",
        "language": "besalisk",
        "people": [
          "https://swapi.co/api/people/71/"
        ],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T17:28:28.821000Z",
        "edited": "2014-12-20T21:36:42.200000Z",
        "url": "https://swapi.co/api/species/31/"
      },
      {
        "name": "Kaminoan",
        "classification": "amphibian",
        "designation": "sentient",
        "average_height": "220",
        "skin_colors": "grey, blue",
        "hair_colors": "none",
        "eye_colors": "black",
        "average_lifespan": "80",
        "homeworld": "https://swapi.co/api/planets/10/",
        "language": "Kaminoan",
        "people": [
          "https://swapi.co/api/people/72/",
          "https://swapi.co/api/people/73/"
        ],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-20T17:31:24.838000Z",
        "edited": "2014-12-20T21:36:42.202000Z",
        "url": "https://swapi.co/api/species/32/"
      },
      {
        "name": "Skakoan",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "unknown",
        "skin_colors": "grey, green",
        "hair_colors": "none",
        "eye_colors": "unknown",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/56/",
        "language": "Skakoan",
        "people": [
          "https://swapi.co/api/people/76/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T17:53:54.515000Z",
        "edited": "2014-12-20T21:36:42.204000Z",
        "url": "https://swapi.co/api/species/33/"
      },
      {
        "name": "Muun",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "190",
        "skin_colors": "grey, white",
        "hair_colors": "none",
        "eye_colors": "black",
        "average_lifespan": "100",
        "homeworld": "https://swapi.co/api/planets/57/",
        "language": "Muun",
        "people": [
          "https://swapi.co/api/people/77/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T17:58:19.088000Z",
        "edited": "2014-12-20T21:36:42.207000Z",
        "url": "https://swapi.co/api/species/34/"
      }
    ]
  },
  "https://swapi.co/api/species/25/": {
    "name": "Quermian",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "240",
    "skin_colors": "white",
    "hair_colors": "none",
    "eye_colors": "yellow",
    "average_lifespan": "86",
    "homeworld": "https://swapi.co/api/planets/48/",
    "language": "Quermian",
    "people": [
      "https://swapi.co/api/people/57/"
    ],
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T10:34:50.827000Z",
    "edited": "2014-12-20T21:36:42.189000Z",
    "url": "https://swapi.co/api/species/25/"
  },
  "https://swapi.co/api/species/26/": {
    "name": "Kel Dor",
    "classification": "unknown",
    "designation": "sentient",
    "average_height": "180",
    "skin_colors": "peach, orange, red",
    "hair_colors": "none",
    "eye_colors": "black, silver",
    "average_lifespan": "70",
    "homeworld": "https://swapi.co/api/planets/49/",
    "language": "Kel Dor",
    "people": [
      "https://swapi.co/api/people/58/"
    ],
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T10:49:21.692000Z",
    "edited": "2014-12-20T21:36:42.191000Z",
    "url": "https://swapi.co/api/species/26/"
  },
  "https://swapi.co/api/species/27/": {
    "name": "Chagrian",
    "classification": "amphibian",
    "designation": "sentient",
    "average_height": "190",
    "skin_colors": "blue",
    "hair_colors": "none",
    "eye_colors": "blue",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/50/",
    "language": "Chagria",
    "people": [
      "https://swapi.co/api/people/59/"
    ],
    "films": [
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T10:53:28.795000Z",
    "edited": "2014-12-20T21:36:42.193000Z",
    "url": "https://swapi.co/api/species/27/"
  },
  "https://swapi.co/api/species/28/": {
    "name": "Geonosian",
    "classification": "insectoid",
    "designation": "sentient",
    "average_height": "178",
    "skin_colors": "green, brown",
    "hair_colors": "none",
    "eye_colors": "green, hazel",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/11/",
    "language": "Geonosian",
    "people": [
      "https://swapi.co/api/people/63/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T16:40:45.618000Z",
    "edited": "2014-12-20T21:36:42.195000Z",
    "url": "https://swapi.co/api/species/28/"
  },
  "https://swapi.co/api/species/29/": {
    "name": "Mirialan",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "180",
    "skin_colors": "yellow, green",
    "hair_colors": "black, brown",
    "eye_colors": "blue, green, red, yellow, brown, orange",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/51/",
    "language": "Mirialan",
    "people": [
      "https://swapi.co/api/people/64/",
      "https://swapi.co/api/people/65/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T16:46:48.290000Z",
    "edited": "2014-12-20T21:36:42.197000Z",
    "url": "https://swapi.co/api/species/29/"
  },
  "https://swapi.co/api/species/30/": {
    "name": "Clawdite",
    "classification": "reptilian",
    "designation": "sentient",
    "average_height": "180",
    "skin_colors": "green, yellow",
    "hair_colors": "none",
    "eye_colors": "yellow",
    "average_lifespan": "70",
    "homeworld": "https://swapi.co/api/planets/54/",
    "language": "Clawdite",
    "people": [
      "https://swapi.co/api/people/70/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T16:57:46.171000Z",
    "edited": "2014-12-20T21:36:42.199000Z",
    "url": "https://swapi.co/api/species/30/"
  },
  "https://swapi.co/api/species/31/": {
    "name": "Besalisk",
    "classification": "amphibian",
    "designation": "sentient",
    "average_height": "178",
    "skin_colors": "brown",
    "hair_colors": "none",
    "eye_colors": "yellow",
    "average_lifespan": "75",
    "homeworld": "https://swapi.co/api/planets/55/",
    "language": "besalisk",
    "people": [
      "https://swapi.co/api/people/71/"
    ],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T17:28:28.821000Z",
    "edited": "2014-12-20T21:36:42.200000Z",
    "url": "https://swapi.co/api/species/31/"
  },
  "https://swapi.co/api/species/32/": {
    "name": "Kaminoan",
    "classification": "amphibian",
    "designation": "sentient",
    "average_height": "220",
    "skin_colors": "grey, blue",
    "hair_colors": "none",
    "eye_colors": "black",
    "average_lifespan": "80",
    "homeworld": "https://swapi.co/api/planets/10/",
    "language": "Kaminoan",
    "people": [
      "https://swapi.co/api/people/72/",
      "https://swapi.co/api/people/73/"
    ],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-20T17:31:24.838000Z",
    "edited": "2014-12-20T21:36:42.202000Z",
    "url": "https://swapi.co/api/species/32/"
  },
  "https://swapi.co/api/species/33/": {
    "name": "Skakoan",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "unknown",
    "skin_colors": "grey, green",
    "hair_colors": "none",
    "eye_colors": "unknown",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/56/",
    "language": "Skakoan",
    "people": [
      "https://swapi.co/api/people/76/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T17:53:54.515000Z",
    "edited": "2014-12-20T21:36:42.204000Z",
    "url": "https://swapi.co/api/species/33/"
  },
  "https://swapi.co/api/species/34/": {
    "name": "Muun",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "190",
    "skin_colors": "grey, white",
    "hair_colors": "none",
    "eye_colors": "black",
    "average_lifespan": "100",
    "homeworld": "https://swapi.co/api/planets/57/",
    "language": "Muun",
    "people": [
      "https://swapi.co/api/people/77/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T17:58:19.088000Z",
    "edited": "2014-12-20T21:36:42.207000Z",
    "url": "https://swapi.co/api/species/34/"
  },
  "https://swapi.co/api/species/?page=4": {
    "count": 37,
    "next": null,
    "previous": "https://swapi.co/api/species/?page=3",
    "results": [
      {
        "name": "Togruta",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "180",
        "skin_colors": "red, white, orange, yellow, green, blue",
        "hair_colors": "none",
        "eye_colors": "red, orange, yellow, green, blue, black",
        "average_lifespan": "94",
        "homeworld": "https://swapi.co/api/planets/58/",
        "language": "Togruti",
        "people": [
          "https://swapi.co/api/people/78/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T18:44:03.246000Z",
        "edited": "2014-12-20T21:36:42.209000Z",
        "url": "https://swapi.co/api/species/35/"
      },
      {
        "name": "Kaleesh",
        "classification": "reptile",
        "designation": "sentient",
        "average_height": "170",
        "skin_colors": "brown, orange, tan",
        "hair_colors": "none",
        "eye_colors": "yellow",
        "average_lifespan": "80",
        "homeworld": "https://swapi.co/api/planets/59/",
        "language": "Kaleesh",
        "people": [
          "https://swapi.co/api/people/79/"
        ],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T19:45:42.537000Z",
        "edited": "2014-12-20T21:36:42.210000Z",
        "url": "https://swapi.co/api/species/36/"
      },
      {
        "name": "Pau'an",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "190",
        "skin_colors": "grey",
        "hair_colors": "none",
        "eye_colors": "black",
        "average_lifespan": "700",
        "homeworld": "https://swapi.co/api/planets/12/",
        "language": "Utapese",
        "people": [
          "https://swapi.co/api/people/83/"
        ],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-20T20:35:06.777000Z",
        "edited": "2014-12-20T21:36:42.212000Z",
        "url": "https://swapi.co/api/species/37/"
      },
      {
        "name": "Wookiee",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "210",
        "skin_colors": "gray",
        "hair_colors": "black, brown",
        "eye_colors": "blue, green, yellow, brown, golden, red",
        "average_lifespan": "400",
        "homeworld": "https://swapi.co/api/planets/14/",
        "language": "Shyriiwook",
        "people": [
          "https://swapi.co/api/people/13/",
          "https://swapi.co/api/people/80/"
        ],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/7/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T16:44:31.486000Z",
        "edited": "2015-01-30T21:23:03.074598Z",
        "url": "https://swapi.co/api/species/3/"
      },
      {
        "name": "Droid",
        "classification": "artificial",
        "designation": "sentient",
        "average_height": "n/a",
        "skin_colors": "n/a",
        "hair_colors": "n/a",
        "eye_colors": "n/a",
        "average_lifespan": "indefinite",
        "homeworld": null,
        "language": "n/a",
        "people": [
          "https://swapi.co/api/people/2/",
          "https://swapi.co/api/people/3/",
          "https://swapi.co/api/people/8/",
          "https://swapi.co/api/people/23/",
          "https://swapi.co/api/people/87/"
        ],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/7/",
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T15:16:16.259000Z",
        "edited": "2015-04-17T06:59:43.869528Z",
        "url": "https://swapi.co/api/species/2/"
      },
      {
        "name": "Human",
        "classification": "mammal",
        "designation": "sentient",
        "average_height": "180",
        "skin_colors": "caucasian, black, asian, hispanic",
        "hair_colors": "blonde, brown, black, red",
        "eye_colors": "brown, blue, green, hazel, grey, amber",
        "average_lifespan": "120",
        "homeworld": "https://swapi.co/api/planets/9/",
        "language": "Galactic Basic",
        "people": [
          "https://swapi.co/api/people/1/",
          "https://swapi.co/api/people/4/",
          "https://swapi.co/api/people/5/",
          "https://swapi.co/api/people/6/",
          "https://swapi.co/api/people/7/",
          "https://swapi.co/api/people/9/",
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/11/",
          "https://swapi.co/api/people/12/",
          "https://swapi.co/api/people/14/",
          "https://swapi.co/api/people/18/",
          "https://swapi.co/api/people/19/",
          "https://swapi.co/api/people/21/",
          "https://swapi.co/api/people/22/",
          "https://swapi.co/api/people/25/",
          "https://swapi.co/api/people/26/",
          "https://swapi.co/api/people/28/",
          "https://swapi.co/api/people/29/",
          "https://swapi.co/api/people/32/",
          "https://swapi.co/api/people/34/",
          "https://swapi.co/api/people/43/",
          "https://swapi.co/api/people/51/",
          "https://swapi.co/api/people/60/",
          "https://swapi.co/api/people/61/",
          "https://swapi.co/api/people/62/",
          "https://swapi.co/api/people/66/",
          "https://swapi.co/api/people/67/",
          "https://swapi.co/api/people/68/",
          "https://swapi.co/api/people/69/",
          "https://swapi.co/api/people/74/",
          "https://swapi.co/api/people/81/",
          "https://swapi.co/api/people/84/",
          "https://swapi.co/api/people/85/",
          "https://swapi.co/api/people/86/",
          "https://swapi.co/api/people/35/"
        ],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/7/",
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T13:52:11.567000Z",
        "edited": "2015-04-17T06:59:55.850671Z",
        "url": "https://swapi.co/api/species/1/"
      },
      {
        "name": "Rodian",
        "classification": "sentient",
        "designation": "reptilian",
        "average_height": "170",
        "skin_colors": "green, blue",
        "hair_colors": "n/a",
        "eye_colors": "black",
        "average_lifespan": "unknown",
        "homeworld": "https://swapi.co/api/planets/23/",
        "language": "Galactic Basic",
        "people": [
          "https://swapi.co/api/people/15/"
        ],
        "films": [
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T17:05:26.471000Z",
        "edited": "2016-07-19T13:27:03.156498Z",
        "url": "https://swapi.co/api/species/4/"
      }
    ]
  },
  "https://swapi.co/api/species/35/": {
    "name": "Togruta",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "180",
    "skin_colors": "red, white, orange, yellow, green, blue",
    "hair_colors": "none",
    "eye_colors": "red, orange, yellow, green, blue, black",
    "average_lifespan": "94",
    "homeworld": "https://swapi.co/api/planets/58/",
    "language": "Togruti",
    "people": [
      "https://swapi.co/api/people/78/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T18:44:03.246000Z",
    "edited": "2014-12-20T21:36:42.209000Z",
    "url": "https://swapi.co/api/species/35/"
  },
  "https://swapi.co/api/species/36/": {
    "name": "Kaleesh",
    "classification": "reptile",
    "designation": "sentient",
    "average_height": "170",
    "skin_colors": "brown, orange, tan",
    "hair_colors": "none",
    "eye_colors": "yellow",
    "average_lifespan": "80",
    "homeworld": "https://swapi.co/api/planets/59/",
    "language": "Kaleesh",
    "people": [
      "https://swapi.co/api/people/79/"
    ],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T19:45:42.537000Z",
    "edited": "2014-12-20T21:36:42.210000Z",
    "url": "https://swapi.co/api/species/36/"
  },
  "https://swapi.co/api/species/37/": {
    "name": "Pau'an",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "190",
    "skin_colors": "grey",
    "hair_colors": "none",
    "eye_colors": "black",
    "average_lifespan": "700",
    "homeworld": "https://swapi.co/api/planets/12/",
    "language": "Utapese",
    "people": [
      "https://swapi.co/api/people/83/"
    ],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-20T20:35:06.777000Z",
    "edited": "2014-12-20T21:36:42.212000Z",
    "url": "https://swapi.co/api/species/37/"
  },
  "https://swapi.co/api/species/3/": {
    "name": "Wookiee",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "210",
    "skin_colors": "gray",
    "hair_colors": "black, brown",
    "eye_colors": "blue, green, yellow, brown, golden, red",
    "average_lifespan": "400",
    "homeworld": "https://swapi.co/api/planets/14/",
    "language": "Shyriiwook",
    "people": [
      "https://swapi.co/api/people/13/",
      "https://swapi.co/api/people/80/"
    ],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/7/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T16:44:31.486000Z",
    "edited": "2015-01-30T21:23:03.074598Z",
    "url": "https://swapi.co/api/species/3/"
  },
  "https://swapi.co/api/species/2/": {
    "name": "Droid",
    "classification": "artificial",
    "designation": "sentient",
    "average_height": "n/a",
    "skin_colors": "n/a",
    "hair_colors": "n/a",
    "eye_colors": "n/a",
    "average_lifespan": "indefinite",
    "homeworld": null,
    "language": "n/a",
    "people": [
      "https://swapi.co/api/people/2/",
      "https://swapi.co/api/people/3/",
      "https://swapi.co/api/people/8/",
      "https://swapi.co/api/people/23/",
      "https://swapi.co/api/people/87/"
    ],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/7/",
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T15:16:16.259000Z",
    "edited": "2015-04-17T06:59:43.869528Z",
    "url": "https://swapi.co/api/species/2/"
  },
  "https://swapi.co/api/species/1/": {
    "name": "Human",
    "classification": "mammal",
    "designation": "sentient",
    "average_height": "180",
    "skin_colors": "caucasian, black, asian, hispanic",
    "hair_colors": "blonde, brown, black, red",
    "eye_colors": "brown, blue, green, hazel, grey, amber",
    "average_lifespan": "120",
    "homeworld": "https://swapi.co/api/planets/9/",
    "language": "Galactic Basic",
    "people": [
      "https://swapi.co/api/people/1/",
      "https://swapi.co/api/people/4/",
      "https://swapi.co/api/people/5/",
      "https://swapi.co/api/people/6/",
      "https://swapi.co/api/people/7/",
      "https://swapi.co/api/people/9/",
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/11/",
      "https://swapi.co/api/people/12/",
      "https://swapi.co/api/people/14/",
      "https://swapi.co/api/people/18/",
      "https://swapi.co/api/people/19/",
      "https://swapi.co/api/people/21/",
      "https://swapi.co/api/people/22/",
      "https://swapi.co/api/people/25/",
      "https://swapi.co/api/people/26/",
      "https://swapi.co/api/people/28/",
      "https://swapi.co/api/people/29/",
      "https://swapi.co/api/people/32/",
      "https://swapi.co/api/people/34/",
      "https://swapi.co/api/people/43/",
      "https://swapi.co/api/people/51/",
      "https://swapi.co/api/people/60/",
      "https://swapi.co/api/people/61/",
      "https://swapi.co/api/people/62/",
      "https://swapi.co/api/people/66/",
      "https://swapi.co/api/people/67/",
      "https://swapi.co/api/people/68/",
      "https://swapi.co/api/people/69/",
      "https://swapi.co/api/people/74/",
      "https://swapi.co/api/people/81/",
      "https://swapi.co/api/people/84/",
      "https://swapi.co/api/people/85/",
      "https://swapi.co/api/people/86/",
      "https://swapi.co/api/people/35/"
    ],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/7/",
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T13:52:11.567000Z",
    "edited": "2015-04-17T06:59:55.850671Z",
    "url": "https://swapi.co/api/species/1/"
  },
  "https://swapi.co/api/species/4/": {
    "name": "Rodian",
    "classification": "sentient",
    "designation": "reptilian",
    "average_height": "170",
    "skin_colors": "green, blue",
    "hair_colors": "n/a",
    "eye_colors": "black",
    "average_lifespan": "unknown",
    "homeworld": "https://swapi.co/api/planets/23/",
    "language": "Galactic Basic",
    "people": [
      "https://swapi.co/api/people/15/"
    ],
    "films": [
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T17:05:26.471000Z",
    "edited": "2016-07-19T13:27:03.156498Z",
    "url": "https://swapi.co/api/species/4/"
  },
  "https://swapi.co/api/planets/": {
    "count": 61,
    "next": "https://swapi.co/api/planets/?page=2",
    "previous": null,
    "results": [
      {
        "name": "Alderaan",
        "rotation_period": "24",
        "orbital_period": "364",
        "diameter": "12500",
        "climate": "temperate",
        "gravity": "1 standard",
        "terrain": "grasslands, mountains",
        "surface_water": "40",
        "population": "2000000000",
        "residents": [
          "https://swapi.co/api/people/5/",
          "https://swapi.co/api/people/68/",
          "https://swapi.co/api/people/81/"
        ],
        "films": [
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T11:35:48.479000Z",
        "edited": "2014-12-20T20:58:18.420000Z",
        "url": "https://swapi.co/api/planets/2/"
      },
      {
        "name": "Yavin IV",
        "rotation_period": "24",
        "orbital_period": "4818",
        "diameter": "10200",
        "climate": "temperate, tropical",
        "gravity": "1 standard",
        "terrain": "jungle, rainforests",
        "surface_water": "8",
        "population": "E1000",
        "residents": [],
        "films": [
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-10T11:37:19.144000Z",
        "edited": "2014-12-20T20:58:18.421000Z",
        "url": "https://swapi.co/api/planets/3/"
      },
      {
        "name": "Hoth",
        "rotation_period": "23",
        "orbital_period": "549",
        "diameter": "7200",
        "climate": "frozen",
        "gravity": "1.1 standard",
        "terrain": "tundra, ice caves, mountain ranges",
        "surface_water": "100",
        "population": "unknown",
        "residents": [],
        "films": [
          "https://swapi.co/api/films/2/"
        ],
        "created": "2014-12-10T11:39:13.934000Z",
        "edited": "2014-12-20T20:58:18.423000Z",
        "url": "https://swapi.co/api/planets/4/"
      },
      {
        "name": "Dagobah",
        "rotation_period": "23",
        "orbital_period": "341",
        "diameter": "8900",
        "climate": "murky",
        "gravity": "N/A",
        "terrain": "swamp, jungles",
        "surface_water": "8",
        "population": "unknown",
        "residents": [],
        "films": [
          "https://swapi.co/api/films/2/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-10T11:42:22.590000Z",
        "edited": "2014-12-20T20:58:18.425000Z",
        "url": "https://swapi.co/api/planets/5/"
      },
      {
        "name": "Bespin",
        "rotation_period": "12",
        "orbital_period": "5110",
        "diameter": "118000",
        "climate": "temperate",
        "gravity": "1.5 (surface), 1 standard (Cloud City)",
        "terrain": "gas giant",
        "surface_water": "0",
        "population": "6000000",
        "residents": [
          "https://swapi.co/api/people/26/"
        ],
        "films": [
          "https://swapi.co/api/films/2/"
        ],
        "created": "2014-12-10T11:43:55.240000Z",
        "edited": "2014-12-20T20:58:18.427000Z",
        "url": "https://swapi.co/api/planets/6/"
      },
      {
        "name": "Endor",
        "rotation_period": "18",
        "orbital_period": "402",
        "diameter": "4900",
        "climate": "temperate",
        "gravity": "0.85 standard",
        "terrain": "forests, mountains, lakes",
        "surface_water": "8",
        "population": "30000000",
        "residents": [
          "https://swapi.co/api/people/30/"
        ],
        "films": [
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-10T11:50:29.349000Z",
        "edited": "2014-12-20T20:58:18.429000Z",
        "url": "https://swapi.co/api/planets/7/"
      },
      {
        "name": "Naboo",
        "rotation_period": "26",
        "orbital_period": "312",
        "diameter": "12120",
        "climate": "temperate",
        "gravity": "1 standard",
        "terrain": "grassy hills, swamps, forests, mountains",
        "surface_water": "12",
        "population": "4500000000",
        "residents": [
          "https://swapi.co/api/people/3/",
          "https://swapi.co/api/people/21/",
          "https://swapi.co/api/people/36/",
          "https://swapi.co/api/people/37/",
          "https://swapi.co/api/people/38/",
          "https://swapi.co/api/people/39/",
          "https://swapi.co/api/people/42/",
          "https://swapi.co/api/people/60/",
          "https://swapi.co/api/people/61/",
          "https://swapi.co/api/people/66/",
          "https://swapi.co/api/people/35/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-10T11:52:31.066000Z",
        "edited": "2014-12-20T20:58:18.430000Z",
        "url": "https://swapi.co/api/planets/8/"
      },
      {
        "name": "Coruscant",
        "rotation_period": "24",
        "orbital_period": "368",
        "diameter": "12240",
        "climate": "temperate",
        "gravity": "1 standard",
        "terrain": "cityscape, mountains",
        "surface_water": "unknown",
        "population": "E1000000000000",
        "residents": [
          "https://swapi.co/api/people/34/",
          "https://swapi.co/api/people/55/",
          "https://swapi.co/api/people/74/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/"
        ],
        "created": "2014-12-10T11:54:13.921000Z",
        "edited": "2014-12-20T20:58:18.432000Z",
        "url": "https://swapi.co/api/planets/9/"
      },
      {
        "name": "Kamino",
        "rotation_period": "27",
        "orbital_period": "463",
        "diameter": "19720",
        "climate": "temperate",
        "gravity": "1 standard",
        "terrain": "ocean",
        "surface_water": "100",
        "population": "E1000000000",
        "residents": [
          "https://swapi.co/api/people/22/",
          "https://swapi.co/api/people/72/",
          "https://swapi.co/api/people/73/"
        ],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-10T12:45:06.577000Z",
        "edited": "2014-12-20T20:58:18.434000Z",
        "url": "https://swapi.co/api/planets/10/"
      },
      {
        "name": "Geonosis",
        "rotation_period": "30",
        "orbital_period": "256",
        "diameter": "11370",
        "climate": "temperate, arid",
        "gravity": "0.9 standard",
        "terrain": "rock, desert, mountain, barren",
        "surface_water": "5",
        "population": "E100000000000",
        "residents": [
          "https://swapi.co/api/people/63/"
        ],
        "films": [
          "https://swapi.co/api/films/5/"
        ],
        "created": "2014-12-10T12:47:22.350000Z",
        "edited": "2014-12-20T20:58:18.437000Z",
        "url": "https://swapi.co/api/planets/11/"
      }
    ]
  },
  "https://swapi.co/api/planets/2/": {
    "name": "Alderaan",
    "rotation_period": "24",
    "orbital_period": "364",
    "diameter": "12500",
    "climate": "temperate",
    "gravity": "1 standard",
    "terrain": "grasslands, mountains",
    "surface_water": "40",
    "population": "2000000000",
    "residents": [
      "https://swapi.co/api/people/5/",
      "https://swapi.co/api/people/68/",
      "https://swapi.co/api/people/81/"
    ],
    "films": [
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T11:35:48.479000Z",
    "edited": "2014-12-20T20:58:18.420000Z",
    "url": "https://swapi.co/api/planets/2/"
  },
  "https://swapi.co/api/planets/3/": {
    "name": "Yavin IV",
    "rotation_period": "24",
    "orbital_period": "4818",
    "diameter": "10200",
    "climate": "temperate, tropical",
    "gravity": "1 standard",
    "terrain": "jungle, rainforests",
    "surface_water": "8",
    "population": "E1000",
    "residents": [],
    "films": [
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-10T11:37:19.144000Z",
    "edited": "2014-12-20T20:58:18.421000Z",
    "url": "https://swapi.co/api/planets/3/"
  },
  "https://swapi.co/api/planets/4/": {
    "name": "Hoth",
    "rotation_period": "23",
    "orbital_period": "549",
    "diameter": "7200",
    "climate": "frozen",
    "gravity": "1.1 standard",
    "terrain": "tundra, ice caves, mountain ranges",
    "surface_water": "100",
    "population": "unknown",
    "residents": [],
    "films": [
      "https://swapi.co/api/films/2/"
    ],
    "created": "2014-12-10T11:39:13.934000Z",
    "edited": "2014-12-20T20:58:18.423000Z",
    "url": "https://swapi.co/api/planets/4/"
  },
  "https://swapi.co/api/planets/5/": {
    "name": "Dagobah",
    "rotation_period": "23",
    "orbital_period": "341",
    "diameter": "8900",
    "climate": "murky",
    "gravity": "N/A",
    "terrain": "swamp, jungles",
    "surface_water": "8",
    "population": "unknown",
    "residents": [],
    "films": [
      "https://swapi.co/api/films/2/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-10T11:42:22.590000Z",
    "edited": "2014-12-20T20:58:18.425000Z",
    "url": "https://swapi.co/api/planets/5/"
  },
  "https://swapi.co/api/planets/6/": {
    "name": "Bespin",
    "rotation_period": "12",
    "orbital_period": "5110",
    "diameter": "118000",
    "climate": "temperate",
    "gravity": "1.5 (surface), 1 standard (Cloud City)",
    "terrain": "gas giant",
    "surface_water": "0",
    "population": "6000000",
    "residents": [
      "https://swapi.co/api/people/26/"
    ],
    "films": [
      "https://swapi.co/api/films/2/"
    ],
    "created": "2014-12-10T11:43:55.240000Z",
    "edited": "2014-12-20T20:58:18.427000Z",
    "url": "https://swapi.co/api/planets/6/"
  },
  "https://swapi.co/api/planets/7/": {
    "name": "Endor",
    "rotation_period": "18",
    "orbital_period": "402",
    "diameter": "4900",
    "climate": "temperate",
    "gravity": "0.85 standard",
    "terrain": "forests, mountains, lakes",
    "surface_water": "8",
    "population": "30000000",
    "residents": [
      "https://swapi.co/api/people/30/"
    ],
    "films": [
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-10T11:50:29.349000Z",
    "edited": "2014-12-20T20:58:18.429000Z",
    "url": "https://swapi.co/api/planets/7/"
  },
  "https://swapi.co/api/planets/8/": {
    "name": "Naboo",
    "rotation_period": "26",
    "orbital_period": "312",
    "diameter": "12120",
    "climate": "temperate",
    "gravity": "1 standard",
    "terrain": "grassy hills, swamps, forests, mountains",
    "surface_water": "12",
    "population": "4500000000",
    "residents": [
      "https://swapi.co/api/people/3/",
      "https://swapi.co/api/people/21/",
      "https://swapi.co/api/people/36/",
      "https://swapi.co/api/people/37/",
      "https://swapi.co/api/people/38/",
      "https://swapi.co/api/people/39/",
      "https://swapi.co/api/people/42/",
      "https://swapi.co/api/people/60/",
      "https://swapi.co/api/people/61/",
      "https://swapi.co/api/people/66/",
      "https://swapi.co/api/people/35/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-10T11:52:31.066000Z",
    "edited": "2014-12-20T20:58:18.430000Z",
    "url": "https://swapi.co/api/planets/8/"
  },
  "https://swapi.co/api/planets/9/": {
    "name": "Coruscant",
    "rotation_period": "24",
    "orbital_period": "368",
    "diameter": "12240",
    "climate": "temperate",
    "gravity": "1 standard",
    "terrain": "cityscape, mountains",
    "surface_water": "unknown",
    "population": "E1000000000000",
    "residents": [
      "https://swapi.co/api/people/34/",
      "https://swapi.co/api/people/55/",
      "https://swapi.co/api/people/74/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/"
    ],
    "created": "2014-12-10T11:54:13.921000Z",
    "edited": "2014-12-20T20:58:18.432000Z",
    "url": "https://swapi.co/api/planets/9/"
  },
  "https://swapi.co/api/planets/10/": {
    "name": "Kamino",
    "rotation_period": "27",
    "orbital_period": "463",
    "diameter": "19720",
    "climate": "temperate",
    "gravity": "1 standard",
    "terrain": "ocean",
    "surface_water": "100",
    "population": "E1000000000",
    "residents": [
      "https://swapi.co/api/people/22/",
      "https://swapi.co/api/people/72/",
      "https://swapi.co/api/people/73/"
    ],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-10T12:45:06.577000Z",
    "edited": "2014-12-20T20:58:18.434000Z",
    "url": "https://swapi.co/api/planets/10/"
  },
  "https://swapi.co/api/planets/11/": {
    "name": "Geonosis",
    "rotation_period": "30",
    "orbital_period": "256",
    "diameter": "11370",
    "climate": "temperate, arid",
    "gravity": "0.9 standard",
    "terrain": "rock, desert, mountain, barren",
    "surface_water": "5",
    "population": "E100000000000",
    "residents": [
      "https://swapi.co/api/people/63/"
    ],
    "films": [
      "https://swapi.co/api/films/5/"
    ],
    "created": "2014-12-10T12:47:22.350000Z",
    "edited": "2014-12-20T20:58:18.437000Z",
    "url": "https://swapi.co/api/planets/11/"
  },
  "https://swapi.co/api/planets/?page=2": {
    "count": 61,
    "next": "https://swapi.co/api/planets/?page=3",
    "previous": "https://swapi.co/api/planets/?page=1",
    "results": [
      {
        "name": "Utapau",
        "rotation_period": "27",
        "orbital_period": "351",
        "diameter": "12900",
        "climate": "temperate, arid, windy",
        "gravity": "1 standard",
        "terrain": "scrublands, savanna, canyons, sinkholes",
        "surface_water": "0.9",
        "population": "95000000",
        "residents": [
          "https://swapi.co/api/people/83/"
        ],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-10T12:49:01.491000Z",
        "edited": "2014-12-20T20:58:18.439000Z",
        "url": "https://swapi.co/api/planets/12/"
      },
      {
        "name": "Mustafar",
        "rotation_period": "36",
        "orbital_period": "412",
        "diameter": "4200",
        "climate": "hot",
        "gravity": "1 standard",
        "terrain": "volcanoes, lava rivers, mountains, caves",
        "surface_water": "0",
        "population": "20000",
        "residents": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-10T12:50:16.526000Z",
        "edited": "2014-12-20T20:58:18.440000Z",
        "url": "https://swapi.co/api/planets/13/"
      },
      {
        "name": "Kashyyyk",
        "rotation_period": "26",
        "orbital_period": "381",
        "diameter": "12765",
        "climate": "tropical",
        "gravity": "1 standard",
        "terrain": "jungle, forests, lakes, rivers",
        "surface_water": "60",
        "population": "45000000",
        "residents": [
          "https://swapi.co/api/people/13/",
          "https://swapi.co/api/people/80/"
        ],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-10T13:32:00.124000Z",
        "edited": "2014-12-20T20:58:18.442000Z",
        "url": "https://swapi.co/api/planets/14/"
      },
      {
        "name": "Polis Massa",
        "rotation_period": "24",
        "orbital_period": "590",
        "diameter": "0",
        "climate": "artificial temperate ",
        "gravity": "0.56 standard",
        "terrain": "airless asteroid",
        "surface_water": "0",
        "population": "E1000000",
        "residents": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-10T13:33:46.405000Z",
        "edited": "2014-12-20T20:58:18.444000Z",
        "url": "https://swapi.co/api/planets/15/"
      },
      {
        "name": "Mygeeto",
        "rotation_period": "12",
        "orbital_period": "167",
        "diameter": "10088",
        "climate": "frigid",
        "gravity": "1 standard",
        "terrain": "glaciers, mountains, ice canyons",
        "surface_water": "unknown",
        "population": "19000000",
        "residents": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-10T13:43:39.139000Z",
        "edited": "2014-12-20T20:58:18.446000Z",
        "url": "https://swapi.co/api/planets/16/"
      },
      {
        "name": "Felucia",
        "rotation_period": "34",
        "orbital_period": "231",
        "diameter": "9100",
        "climate": "hot, humid",
        "gravity": "0.75 standard",
        "terrain": "fungus forests",
        "surface_water": "unknown",
        "population": "8500000",
        "residents": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-10T13:44:50.397000Z",
        "edited": "2014-12-20T20:58:18.447000Z",
        "url": "https://swapi.co/api/planets/17/"
      },
      {
        "name": "Cato Neimoidia",
        "rotation_period": "25",
        "orbital_period": "278",
        "diameter": "0",
        "climate": "temperate, moist",
        "gravity": "1 standard",
        "terrain": "mountains, fields, forests, rock arches",
        "surface_water": "unknown",
        "population": "E10000000",
        "residents": [
          "https://swapi.co/api/people/33/"
        ],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-10T13:46:28.704000Z",
        "edited": "2014-12-20T20:58:18.449000Z",
        "url": "https://swapi.co/api/planets/18/"
      },
      {
        "name": "Saleucami",
        "rotation_period": "26",
        "orbital_period": "392",
        "diameter": "14920",
        "climate": "hot",
        "gravity": "unknown",
        "terrain": "caves, desert, mountains, volcanoes",
        "surface_water": "unknown",
        "population": "1400000000",
        "residents": [],
        "films": [
          "https://swapi.co/api/films/6/"
        ],
        "created": "2014-12-10T13:47:46.874000Z",
        "edited": "2014-12-20T20:58:18.450000Z",
        "url": "https://swapi.co/api/planets/19/"
      },
      {
        "name": "Stewjon",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "0",
        "climate": "temperate",
        "gravity": "1 standard",
        "terrain": "grass",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/10/"
        ],
        "films": [],
        "created": "2014-12-10T16:16:26.566000Z",
        "edited": "2014-12-20T20:58:18.452000Z",
        "url": "https://swapi.co/api/planets/20/"
      },
      {
        "name": "Eriadu",
        "rotation_period": "24",
        "orbital_period": "360",
        "diameter": "13490",
        "climate": "polluted",
        "gravity": "1 standard",
        "terrain": "cityscape",
        "surface_water": "unknown",
        "population": "22000000000",
        "residents": [
          "https://swapi.co/api/people/12/"
        ],
        "films": [],
        "created": "2014-12-10T16:26:54.384000Z",
        "edited": "2014-12-20T20:58:18.454000Z",
        "url": "https://swapi.co/api/planets/21/"
      }
    ]
  },
  "https://swapi.co/api/planets/12/": {
    "name": "Utapau",
    "rotation_period": "27",
    "orbital_period": "351",
    "diameter": "12900",
    "climate": "temperate, arid, windy",
    "gravity": "1 standard",
    "terrain": "scrublands, savanna, canyons, sinkholes",
    "surface_water": "0.9",
    "population": "95000000",
    "residents": [
      "https://swapi.co/api/people/83/"
    ],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-10T12:49:01.491000Z",
    "edited": "2014-12-20T20:58:18.439000Z",
    "url": "https://swapi.co/api/planets/12/"
  },
  "https://swapi.co/api/planets/13/": {
    "name": "Mustafar",
    "rotation_period": "36",
    "orbital_period": "412",
    "diameter": "4200",
    "climate": "hot",
    "gravity": "1 standard",
    "terrain": "volcanoes, lava rivers, mountains, caves",
    "surface_water": "0",
    "population": "20000",
    "residents": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-10T12:50:16.526000Z",
    "edited": "2014-12-20T20:58:18.440000Z",
    "url": "https://swapi.co/api/planets/13/"
  },
  "https://swapi.co/api/planets/14/": {
    "name": "Kashyyyk",
    "rotation_period": "26",
    "orbital_period": "381",
    "diameter": "12765",
    "climate": "tropical",
    "gravity": "1 standard",
    "terrain": "jungle, forests, lakes, rivers",
    "surface_water": "60",
    "population": "45000000",
    "residents": [
      "https://swapi.co/api/people/13/",
      "https://swapi.co/api/people/80/"
    ],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-10T13:32:00.124000Z",
    "edited": "2014-12-20T20:58:18.442000Z",
    "url": "https://swapi.co/api/planets/14/"
  },
  "https://swapi.co/api/planets/15/": {
    "name": "Polis Massa",
    "rotation_period": "24",
    "orbital_period": "590",
    "diameter": "0",
    "climate": "artificial temperate ",
    "gravity": "0.56 standard",
    "terrain": "airless asteroid",
    "surface_water": "0",
    "population": "E1000000",
    "residents": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-10T13:33:46.405000Z",
    "edited": "2014-12-20T20:58:18.444000Z",
    "url": "https://swapi.co/api/planets/15/"
  },
  "https://swapi.co/api/planets/16/": {
    "name": "Mygeeto",
    "rotation_period": "12",
    "orbital_period": "167",
    "diameter": "10088",
    "climate": "frigid",
    "gravity": "1 standard",
    "terrain": "glaciers, mountains, ice canyons",
    "surface_water": "unknown",
    "population": "19000000",
    "residents": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-10T13:43:39.139000Z",
    "edited": "2014-12-20T20:58:18.446000Z",
    "url": "https://swapi.co/api/planets/16/"
  },
  "https://swapi.co/api/planets/17/": {
    "name": "Felucia",
    "rotation_period": "34",
    "orbital_period": "231",
    "diameter": "9100",
    "climate": "hot, humid",
    "gravity": "0.75 standard",
    "terrain": "fungus forests",
    "surface_water": "unknown",
    "population": "8500000",
    "residents": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-10T13:44:50.397000Z",
    "edited": "2014-12-20T20:58:18.447000Z",
    "url": "https://swapi.co/api/planets/17/"
  },
  "https://swapi.co/api/planets/18/": {
    "name": "Cato Neimoidia",
    "rotation_period": "25",
    "orbital_period": "278",
    "diameter": "0",
    "climate": "temperate, moist",
    "gravity": "1 standard",
    "terrain": "mountains, fields, forests, rock arches",
    "surface_water": "unknown",
    "population": "E10000000",
    "residents": [
      "https://swapi.co/api/people/33/"
    ],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-10T13:46:28.704000Z",
    "edited": "2014-12-20T20:58:18.449000Z",
    "url": "https://swapi.co/api/planets/18/"
  },
  "https://swapi.co/api/planets/19/": {
    "name": "Saleucami",
    "rotation_period": "26",
    "orbital_period": "392",
    "diameter": "14920",
    "climate": "hot",
    "gravity": "unknown",
    "terrain": "caves, desert, mountains, volcanoes",
    "surface_water": "unknown",
    "population": "1400000000",
    "residents": [],
    "films": [
      "https://swapi.co/api/films/6/"
    ],
    "created": "2014-12-10T13:47:46.874000Z",
    "edited": "2014-12-20T20:58:18.450000Z",
    "url": "https://swapi.co/api/planets/19/"
  },
  "https://swapi.co/api/planets/20/": {
    "name": "Stewjon",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "0",
    "climate": "temperate",
    "gravity": "1 standard",
    "terrain": "grass",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/10/"
    ],
    "films": [],
    "created": "2014-12-10T16:16:26.566000Z",
    "edited": "2014-12-20T20:58:18.452000Z",
    "url": "https://swapi.co/api/planets/20/"
  },
  "https://swapi.co/api/planets/21/": {
    "name": "Eriadu",
    "rotation_period": "24",
    "orbital_period": "360",
    "diameter": "13490",
    "climate": "polluted",
    "gravity": "1 standard",
    "terrain": "cityscape",
    "surface_water": "unknown",
    "population": "22000000000",
    "residents": [
      "https://swapi.co/api/people/12/"
    ],
    "films": [],
    "created": "2014-12-10T16:26:54.384000Z",
    "edited": "2014-12-20T20:58:18.454000Z",
    "url": "https://swapi.co/api/planets/21/"
  },
  "https://swapi.co/api/planets/?page=3": {
    "count": 61,
    "next": "https://swapi.co/api/planets/?page=4",
    "previous": "https://swapi.co/api/planets/?page=2",
    "results": [
      {
        "name": "Corellia",
        "rotation_period": "25",
        "orbital_period": "329",
        "diameter": "11000",
        "climate": "temperate",
        "gravity": "1 standard",
        "terrain": "plains, urban, hills, forests",
        "surface_water": "70",
        "population": "3000000000",
        "residents": [
          "https://swapi.co/api/people/14/",
          "https://swapi.co/api/people/18/"
        ],
        "films": [],
        "created": "2014-12-10T16:49:12.453000Z",
        "edited": "2014-12-20T20:58:18.456000Z",
        "url": "https://swapi.co/api/planets/22/"
      },
      {
        "name": "Rodia",
        "rotation_period": "29",
        "orbital_period": "305",
        "diameter": "7549",
        "climate": "hot",
        "gravity": "1 standard",
        "terrain": "jungles, oceans, urban, swamps",
        "surface_water": "60",
        "population": "1300000000",
        "residents": [
          "https://swapi.co/api/people/15/"
        ],
        "films": [],
        "created": "2014-12-10T17:03:28.110000Z",
        "edited": "2014-12-20T20:58:18.458000Z",
        "url": "https://swapi.co/api/planets/23/"
      },
      {
        "name": "Nal Hutta",
        "rotation_period": "87",
        "orbital_period": "413",
        "diameter": "12150",
        "climate": "temperate",
        "gravity": "1 standard",
        "terrain": "urban, oceans, swamps, bogs",
        "surface_water": "unknown",
        "population": "7000000000",
        "residents": [
          "https://swapi.co/api/people/16/"
        ],
        "films": [],
        "created": "2014-12-10T17:11:29.452000Z",
        "edited": "2014-12-20T20:58:18.460000Z",
        "url": "https://swapi.co/api/planets/24/"
      },
      {
        "name": "Dantooine",
        "rotation_period": "25",
        "orbital_period": "378",
        "diameter": "9830",
        "climate": "temperate",
        "gravity": "1 standard",
        "terrain": "oceans, savannas, mountains, grasslands",
        "surface_water": "unknown",
        "population": "E1000",
        "residents": [],
        "films": [],
        "created": "2014-12-10T17:23:29.896000Z",
        "edited": "2014-12-20T20:58:18.461000Z",
        "url": "https://swapi.co/api/planets/25/"
      },
      {
        "name": "Bestine IV",
        "rotation_period": "26",
        "orbital_period": "680",
        "diameter": "6400",
        "climate": "temperate",
        "gravity": "unknown",
        "terrain": "rocky islands, oceans",
        "surface_water": "98",
        "population": "62000000",
        "residents": [
          "https://swapi.co/api/people/19/"
        ],
        "films": [],
        "created": "2014-12-12T11:16:55.078000Z",
        "edited": "2014-12-20T20:58:18.463000Z",
        "url": "https://swapi.co/api/planets/26/"
      },
      {
        "name": "Ord Mantell",
        "rotation_period": "26",
        "orbital_period": "334",
        "diameter": "14050",
        "climate": "temperate",
        "gravity": "1 standard",
        "terrain": "plains, seas, mesas",
        "surface_water": "10",
        "population": "4000000000",
        "residents": [],
        "films": [
          "https://swapi.co/api/films/2/"
        ],
        "created": "2014-12-15T12:23:41.661000Z",
        "edited": "2014-12-20T20:58:18.464000Z",
        "url": "https://swapi.co/api/planets/27/"
      },
      {
        "name": "unknown",
        "rotation_period": "0",
        "orbital_period": "0",
        "diameter": "0",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "unknown",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/20/",
          "https://swapi.co/api/people/23/",
          "https://swapi.co/api/people/29/",
          "https://swapi.co/api/people/32/",
          "https://swapi.co/api/people/75/",
          "https://swapi.co/api/people/84/",
          "https://swapi.co/api/people/85/",
          "https://swapi.co/api/people/86/",
          "https://swapi.co/api/people/87/",
          "https://swapi.co/api/people/88/"
        ],
        "films": [],
        "created": "2014-12-15T12:25:59.569000Z",
        "edited": "2014-12-20T20:58:18.466000Z",
        "url": "https://swapi.co/api/planets/28/"
      },
      {
        "name": "Trandosha",
        "rotation_period": "25",
        "orbital_period": "371",
        "diameter": "0",
        "climate": "arid",
        "gravity": "0.62 standard",
        "terrain": "mountains, seas, grasslands, deserts",
        "surface_water": "unknown",
        "population": "42000000",
        "residents": [
          "https://swapi.co/api/people/24/"
        ],
        "films": [],
        "created": "2014-12-15T12:53:47.695000Z",
        "edited": "2014-12-20T20:58:18.468000Z",
        "url": "https://swapi.co/api/planets/29/"
      },
      {
        "name": "Socorro",
        "rotation_period": "20",
        "orbital_period": "326",
        "diameter": "0",
        "climate": "arid",
        "gravity": "1 standard",
        "terrain": "deserts, mountains",
        "surface_water": "unknown",
        "population": "300000000",
        "residents": [
          "https://swapi.co/api/people/25/"
        ],
        "films": [],
        "created": "2014-12-15T12:56:31.121000Z",
        "edited": "2014-12-20T20:58:18.469000Z",
        "url": "https://swapi.co/api/planets/30/"
      },
      {
        "name": "Mon Cala",
        "rotation_period": "21",
        "orbital_period": "398",
        "diameter": "11030",
        "climate": "temperate",
        "gravity": "1",
        "terrain": "oceans, reefs, islands",
        "surface_water": "100",
        "population": "27000000000",
        "residents": [
          "https://swapi.co/api/people/27/"
        ],
        "films": [],
        "created": "2014-12-18T11:07:01.792000Z",
        "edited": "2014-12-20T20:58:18.471000Z",
        "url": "https://swapi.co/api/planets/31/"
      }
    ]
  },
  "https://swapi.co/api/planets/22/": {
    "name": "Corellia",
    "rotation_period": "25",
    "orbital_period": "329",
    "diameter": "11000",
    "climate": "temperate",
    "gravity": "1 standard",
    "terrain": "plains, urban, hills, forests",
    "surface_water": "70",
    "population": "3000000000",
    "residents": [
      "https://swapi.co/api/people/14/",
      "https://swapi.co/api/people/18/"
    ],
    "films": [],
    "created": "2014-12-10T16:49:12.453000Z",
    "edited": "2014-12-20T20:58:18.456000Z",
    "url": "https://swapi.co/api/planets/22/"
  },
  "https://swapi.co/api/planets/23/": {
    "name": "Rodia",
    "rotation_period": "29",
    "orbital_period": "305",
    "diameter": "7549",
    "climate": "hot",
    "gravity": "1 standard",
    "terrain": "jungles, oceans, urban, swamps",
    "surface_water": "60",
    "population": "1300000000",
    "residents": [
      "https://swapi.co/api/people/15/"
    ],
    "films": [],
    "created": "2014-12-10T17:03:28.110000Z",
    "edited": "2014-12-20T20:58:18.458000Z",
    "url": "https://swapi.co/api/planets/23/"
  },
  "https://swapi.co/api/planets/24/": {
    "name": "Nal Hutta",
    "rotation_period": "87",
    "orbital_period": "413",
    "diameter": "12150",
    "climate": "temperate",
    "gravity": "1 standard",
    "terrain": "urban, oceans, swamps, bogs",
    "surface_water": "unknown",
    "population": "7000000000",
    "residents": [
      "https://swapi.co/api/people/16/"
    ],
    "films": [],
    "created": "2014-12-10T17:11:29.452000Z",
    "edited": "2014-12-20T20:58:18.460000Z",
    "url": "https://swapi.co/api/planets/24/"
  },
  "https://swapi.co/api/planets/25/": {
    "name": "Dantooine",
    "rotation_period": "25",
    "orbital_period": "378",
    "diameter": "9830",
    "climate": "temperate",
    "gravity": "1 standard",
    "terrain": "oceans, savannas, mountains, grasslands",
    "surface_water": "unknown",
    "population": "E1000",
    "residents": [],
    "films": [],
    "created": "2014-12-10T17:23:29.896000Z",
    "edited": "2014-12-20T20:58:18.461000Z",
    "url": "https://swapi.co/api/planets/25/"
  },
  "https://swapi.co/api/planets/26/": {
    "name": "Bestine IV",
    "rotation_period": "26",
    "orbital_period": "680",
    "diameter": "6400",
    "climate": "temperate",
    "gravity": "unknown",
    "terrain": "rocky islands, oceans",
    "surface_water": "98",
    "population": "62000000",
    "residents": [
      "https://swapi.co/api/people/19/"
    ],
    "films": [],
    "created": "2014-12-12T11:16:55.078000Z",
    "edited": "2014-12-20T20:58:18.463000Z",
    "url": "https://swapi.co/api/planets/26/"
  },
  "https://swapi.co/api/planets/27/": {
    "name": "Ord Mantell",
    "rotation_period": "26",
    "orbital_period": "334",
    "diameter": "14050",
    "climate": "temperate",
    "gravity": "1 standard",
    "terrain": "plains, seas, mesas",
    "surface_water": "10",
    "population": "4000000000",
    "residents": [],
    "films": [
      "https://swapi.co/api/films/2/"
    ],
    "created": "2014-12-15T12:23:41.661000Z",
    "edited": "2014-12-20T20:58:18.464000Z",
    "url": "https://swapi.co/api/planets/27/"
  },
  "https://swapi.co/api/planets/28/": {
    "name": "unknown",
    "rotation_period": "0",
    "orbital_period": "0",
    "diameter": "0",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "unknown",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/20/",
      "https://swapi.co/api/people/23/",
      "https://swapi.co/api/people/29/",
      "https://swapi.co/api/people/32/",
      "https://swapi.co/api/people/75/",
      "https://swapi.co/api/people/84/",
      "https://swapi.co/api/people/85/",
      "https://swapi.co/api/people/86/",
      "https://swapi.co/api/people/87/",
      "https://swapi.co/api/people/88/"
    ],
    "films": [],
    "created": "2014-12-15T12:25:59.569000Z",
    "edited": "2014-12-20T20:58:18.466000Z",
    "url": "https://swapi.co/api/planets/28/"
  },
  "https://swapi.co/api/planets/29/": {
    "name": "Trandosha",
    "rotation_period": "25",
    "orbital_period": "371",
    "diameter": "0",
    "climate": "arid",
    "gravity": "0.62 standard",
    "terrain": "mountains, seas, grasslands, deserts",
    "surface_water": "unknown",
    "population": "42000000",
    "residents": [
      "https://swapi.co/api/people/24/"
    ],
    "films": [],
    "created": "2014-12-15T12:53:47.695000Z",
    "edited": "2014-12-20T20:58:18.468000Z",
    "url": "https://swapi.co/api/planets/29/"
  },
  "https://swapi.co/api/planets/30/": {
    "name": "Socorro",
    "rotation_period": "20",
    "orbital_period": "326",
    "diameter": "0",
    "climate": "arid",
    "gravity": "1 standard",
    "terrain": "deserts, mountains",
    "surface_water": "unknown",
    "population": "300000000",
    "residents": [
      "https://swapi.co/api/people/25/"
    ],
    "films": [],
    "created": "2014-12-15T12:56:31.121000Z",
    "edited": "2014-12-20T20:58:18.469000Z",
    "url": "https://swapi.co/api/planets/30/"
  },
  "https://swapi.co/api/planets/31/": {
    "name": "Mon Cala",
    "rotation_period": "21",
    "orbital_period": "398",
    "diameter": "11030",
    "climate": "temperate",
    "gravity": "1",
    "terrain": "oceans, reefs, islands",
    "surface_water": "100",
    "population": "27000000000",
    "residents": [
      "https://swapi.co/api/people/27/"
    ],
    "films": [],
    "created": "2014-12-18T11:07:01.792000Z",
    "edited": "2014-12-20T20:58:18.471000Z",
    "url": "https://swapi.co/api/planets/31/"
  },
  "https://swapi.co/api/planets/?page=4": {
    "count": 61,
    "next": "https://swapi.co/api/planets/?page=5",
    "previous": "https://swapi.co/api/planets/?page=3",
    "results": [
      {
        "name": "Chandrila",
        "rotation_period": "20",
        "orbital_period": "368",
        "diameter": "13500",
        "climate": "temperate",
        "gravity": "1",
        "terrain": "plains, forests",
        "surface_water": "40",
        "population": "1200000000",
        "residents": [
          "https://swapi.co/api/people/28/"
        ],
        "films": [],
        "created": "2014-12-18T11:11:51.872000Z",
        "edited": "2014-12-20T20:58:18.472000Z",
        "url": "https://swapi.co/api/planets/32/"
      },
      {
        "name": "Sullust",
        "rotation_period": "20",
        "orbital_period": "263",
        "diameter": "12780",
        "climate": "superheated",
        "gravity": "1",
        "terrain": "mountains, volcanoes, rocky deserts",
        "surface_water": "5",
        "population": "18500000000",
        "residents": [
          "https://swapi.co/api/people/31/"
        ],
        "films": [],
        "created": "2014-12-18T11:25:40.243000Z",
        "edited": "2014-12-20T20:58:18.474000Z",
        "url": "https://swapi.co/api/planets/33/"
      },
      {
        "name": "Toydaria",
        "rotation_period": "21",
        "orbital_period": "184",
        "diameter": "7900",
        "climate": "temperate",
        "gravity": "1",
        "terrain": "swamps, lakes",
        "surface_water": "unknown",
        "population": "11000000",
        "residents": [
          "https://swapi.co/api/people/40/"
        ],
        "films": [],
        "created": "2014-12-19T17:47:54.403000Z",
        "edited": "2014-12-20T20:58:18.476000Z",
        "url": "https://swapi.co/api/planets/34/"
      },
      {
        "name": "Malastare",
        "rotation_period": "26",
        "orbital_period": "201",
        "diameter": "18880",
        "climate": "arid, temperate, tropical",
        "gravity": "1.56",
        "terrain": "swamps, deserts, jungles, mountains",
        "surface_water": "unknown",
        "population": "2000000000",
        "residents": [
          "https://swapi.co/api/people/41/"
        ],
        "films": [],
        "created": "2014-12-19T17:52:13.106000Z",
        "edited": "2014-12-20T20:58:18.478000Z",
        "url": "https://swapi.co/api/planets/35/"
      },
      {
        "name": "Dathomir",
        "rotation_period": "24",
        "orbital_period": "491",
        "diameter": "10480",
        "climate": "temperate",
        "gravity": "0.9",
        "terrain": "forests, deserts, savannas",
        "surface_water": "unknown",
        "population": "5200",
        "residents": [
          "https://swapi.co/api/people/44/"
        ],
        "films": [],
        "created": "2014-12-19T18:00:40.142000Z",
        "edited": "2014-12-20T20:58:18.480000Z",
        "url": "https://swapi.co/api/planets/36/"
      },
      {
        "name": "Ryloth",
        "rotation_period": "30",
        "orbital_period": "305",
        "diameter": "10600",
        "climate": "temperate, arid, subartic",
        "gravity": "1",
        "terrain": "mountains, valleys, deserts, tundra",
        "surface_water": "5",
        "population": "1500000000",
        "residents": [
          "https://swapi.co/api/people/45/",
          "https://swapi.co/api/people/46/"
        ],
        "films": [],
        "created": "2014-12-20T09:46:25.740000Z",
        "edited": "2014-12-20T20:58:18.481000Z",
        "url": "https://swapi.co/api/planets/37/"
      },
      {
        "name": "Aleen Minor",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "unknown",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/47/"
        ],
        "films": [],
        "created": "2014-12-20T09:52:23.452000Z",
        "edited": "2014-12-20T20:58:18.483000Z",
        "url": "https://swapi.co/api/planets/38/"
      },
      {
        "name": "Vulpter",
        "rotation_period": "22",
        "orbital_period": "391",
        "diameter": "14900",
        "climate": "temperate, artic",
        "gravity": "1",
        "terrain": "urban, barren",
        "surface_water": "unknown",
        "population": "421000000",
        "residents": [
          "https://swapi.co/api/people/48/"
        ],
        "films": [],
        "created": "2014-12-20T09:56:58.874000Z",
        "edited": "2014-12-20T20:58:18.485000Z",
        "url": "https://swapi.co/api/planets/39/"
      },
      {
        "name": "Troiken",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "desert, tundra, rainforests, mountains",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/49/"
        ],
        "films": [],
        "created": "2014-12-20T10:01:37.395000Z",
        "edited": "2014-12-20T20:58:18.487000Z",
        "url": "https://swapi.co/api/planets/40/"
      },
      {
        "name": "Tund",
        "rotation_period": "48",
        "orbital_period": "1770",
        "diameter": "12190",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "barren, ash",
        "surface_water": "unknown",
        "population": "0",
        "residents": [
          "https://swapi.co/api/people/50/"
        ],
        "films": [],
        "created": "2014-12-20T10:07:29.578000Z",
        "edited": "2014-12-20T20:58:18.489000Z",
        "url": "https://swapi.co/api/planets/41/"
      }
    ]
  },
  "https://swapi.co/api/planets/32/": {
    "name": "Chandrila",
    "rotation_period": "20",
    "orbital_period": "368",
    "diameter": "13500",
    "climate": "temperate",
    "gravity": "1",
    "terrain": "plains, forests",
    "surface_water": "40",
    "population": "1200000000",
    "residents": [
      "https://swapi.co/api/people/28/"
    ],
    "films": [],
    "created": "2014-12-18T11:11:51.872000Z",
    "edited": "2014-12-20T20:58:18.472000Z",
    "url": "https://swapi.co/api/planets/32/"
  },
  "https://swapi.co/api/planets/33/": {
    "name": "Sullust",
    "rotation_period": "20",
    "orbital_period": "263",
    "diameter": "12780",
    "climate": "superheated",
    "gravity": "1",
    "terrain": "mountains, volcanoes, rocky deserts",
    "surface_water": "5",
    "population": "18500000000",
    "residents": [
      "https://swapi.co/api/people/31/"
    ],
    "films": [],
    "created": "2014-12-18T11:25:40.243000Z",
    "edited": "2014-12-20T20:58:18.474000Z",
    "url": "https://swapi.co/api/planets/33/"
  },
  "https://swapi.co/api/planets/34/": {
    "name": "Toydaria",
    "rotation_period": "21",
    "orbital_period": "184",
    "diameter": "7900",
    "climate": "temperate",
    "gravity": "1",
    "terrain": "swamps, lakes",
    "surface_water": "unknown",
    "population": "11000000",
    "residents": [
      "https://swapi.co/api/people/40/"
    ],
    "films": [],
    "created": "2014-12-19T17:47:54.403000Z",
    "edited": "2014-12-20T20:58:18.476000Z",
    "url": "https://swapi.co/api/planets/34/"
  },
  "https://swapi.co/api/planets/35/": {
    "name": "Malastare",
    "rotation_period": "26",
    "orbital_period": "201",
    "diameter": "18880",
    "climate": "arid, temperate, tropical",
    "gravity": "1.56",
    "terrain": "swamps, deserts, jungles, mountains",
    "surface_water": "unknown",
    "population": "2000000000",
    "residents": [
      "https://swapi.co/api/people/41/"
    ],
    "films": [],
    "created": "2014-12-19T17:52:13.106000Z",
    "edited": "2014-12-20T20:58:18.478000Z",
    "url": "https://swapi.co/api/planets/35/"
  },
  "https://swapi.co/api/planets/36/": {
    "name": "Dathomir",
    "rotation_period": "24",
    "orbital_period": "491",
    "diameter": "10480",
    "climate": "temperate",
    "gravity": "0.9",
    "terrain": "forests, deserts, savannas",
    "surface_water": "unknown",
    "population": "5200",
    "residents": [
      "https://swapi.co/api/people/44/"
    ],
    "films": [],
    "created": "2014-12-19T18:00:40.142000Z",
    "edited": "2014-12-20T20:58:18.480000Z",
    "url": "https://swapi.co/api/planets/36/"
  },
  "https://swapi.co/api/planets/37/": {
    "name": "Ryloth",
    "rotation_period": "30",
    "orbital_period": "305",
    "diameter": "10600",
    "climate": "temperate, arid, subartic",
    "gravity": "1",
    "terrain": "mountains, valleys, deserts, tundra",
    "surface_water": "5",
    "population": "1500000000",
    "residents": [
      "https://swapi.co/api/people/45/",
      "https://swapi.co/api/people/46/"
    ],
    "films": [],
    "created": "2014-12-20T09:46:25.740000Z",
    "edited": "2014-12-20T20:58:18.481000Z",
    "url": "https://swapi.co/api/planets/37/"
  },
  "https://swapi.co/api/planets/38/": {
    "name": "Aleen Minor",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "unknown",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/47/"
    ],
    "films": [],
    "created": "2014-12-20T09:52:23.452000Z",
    "edited": "2014-12-20T20:58:18.483000Z",
    "url": "https://swapi.co/api/planets/38/"
  },
  "https://swapi.co/api/planets/39/": {
    "name": "Vulpter",
    "rotation_period": "22",
    "orbital_period": "391",
    "diameter": "14900",
    "climate": "temperate, artic",
    "gravity": "1",
    "terrain": "urban, barren",
    "surface_water": "unknown",
    "population": "421000000",
    "residents": [
      "https://swapi.co/api/people/48/"
    ],
    "films": [],
    "created": "2014-12-20T09:56:58.874000Z",
    "edited": "2014-12-20T20:58:18.485000Z",
    "url": "https://swapi.co/api/planets/39/"
  },
  "https://swapi.co/api/planets/40/": {
    "name": "Troiken",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "desert, tundra, rainforests, mountains",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/49/"
    ],
    "films": [],
    "created": "2014-12-20T10:01:37.395000Z",
    "edited": "2014-12-20T20:58:18.487000Z",
    "url": "https://swapi.co/api/planets/40/"
  },
  "https://swapi.co/api/planets/41/": {
    "name": "Tund",
    "rotation_period": "48",
    "orbital_period": "1770",
    "diameter": "12190",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "barren, ash",
    "surface_water": "unknown",
    "population": "0",
    "residents": [
      "https://swapi.co/api/people/50/"
    ],
    "films": [],
    "created": "2014-12-20T10:07:29.578000Z",
    "edited": "2014-12-20T20:58:18.489000Z",
    "url": "https://swapi.co/api/planets/41/"
  },
  "https://swapi.co/api/planets/?page=5": {
    "count": 61,
    "next": "https://swapi.co/api/planets/?page=6",
    "previous": "https://swapi.co/api/planets/?page=4",
    "results": [
      {
        "name": "Haruun Kal",
        "rotation_period": "25",
        "orbital_period": "383",
        "diameter": "10120",
        "climate": "temperate",
        "gravity": "0.98",
        "terrain": "toxic cloudsea, plateaus, volcanoes",
        "surface_water": "unknown",
        "population": "705300",
        "residents": [
          "https://swapi.co/api/people/51/"
        ],
        "films": [],
        "created": "2014-12-20T10:12:28.980000Z",
        "edited": "2014-12-20T20:58:18.491000Z",
        "url": "https://swapi.co/api/planets/42/"
      },
      {
        "name": "Cerea",
        "rotation_period": "27",
        "orbital_period": "386",
        "diameter": "unknown",
        "climate": "temperate",
        "gravity": "1",
        "terrain": "verdant",
        "surface_water": "20",
        "population": "450000000",
        "residents": [
          "https://swapi.co/api/people/52/"
        ],
        "films": [],
        "created": "2014-12-20T10:14:48.178000Z",
        "edited": "2014-12-20T20:58:18.493000Z",
        "url": "https://swapi.co/api/planets/43/"
      },
      {
        "name": "Glee Anselm",
        "rotation_period": "33",
        "orbital_period": "206",
        "diameter": "15600",
        "climate": "tropical, temperate",
        "gravity": "1",
        "terrain": "lakes, islands, swamps, seas",
        "surface_water": "80",
        "population": "500000000",
        "residents": [
          "https://swapi.co/api/people/53/"
        ],
        "films": [],
        "created": "2014-12-20T10:18:26.110000Z",
        "edited": "2014-12-20T20:58:18.495000Z",
        "url": "https://swapi.co/api/planets/44/"
      },
      {
        "name": "Iridonia",
        "rotation_period": "29",
        "orbital_period": "413",
        "diameter": "unknown",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "rocky canyons, acid pools",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/54/"
        ],
        "films": [],
        "created": "2014-12-20T10:26:05.788000Z",
        "edited": "2014-12-20T20:58:18.497000Z",
        "url": "https://swapi.co/api/planets/45/"
      },
      {
        "name": "Tholoth",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "unknown",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [],
        "films": [],
        "created": "2014-12-20T10:28:31.117000Z",
        "edited": "2014-12-20T20:58:18.498000Z",
        "url": "https://swapi.co/api/planets/46/"
      },
      {
        "name": "Iktotch",
        "rotation_period": "22",
        "orbital_period": "481",
        "diameter": "unknown",
        "climate": "arid, rocky, windy",
        "gravity": "1",
        "terrain": "rocky",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/56/"
        ],
        "films": [],
        "created": "2014-12-20T10:31:32.413000Z",
        "edited": "2014-12-20T20:58:18.500000Z",
        "url": "https://swapi.co/api/planets/47/"
      },
      {
        "name": "Quermia",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "unknown",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/57/"
        ],
        "films": [],
        "created": "2014-12-20T10:34:08.249000Z",
        "edited": "2014-12-20T20:58:18.502000Z",
        "url": "https://swapi.co/api/planets/48/"
      },
      {
        "name": "Dorin",
        "rotation_period": "22",
        "orbital_period": "409",
        "diameter": "13400",
        "climate": "temperate",
        "gravity": "1",
        "terrain": "unknown",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/58/"
        ],
        "films": [],
        "created": "2014-12-20T10:48:36.141000Z",
        "edited": "2014-12-20T20:58:18.504000Z",
        "url": "https://swapi.co/api/planets/49/"
      },
      {
        "name": "Champala",
        "rotation_period": "27",
        "orbital_period": "318",
        "diameter": "unknown",
        "climate": "temperate",
        "gravity": "1",
        "terrain": "oceans, rainforests, plateaus",
        "surface_water": "unknown",
        "population": "3500000000",
        "residents": [
          "https://swapi.co/api/people/59/"
        ],
        "films": [],
        "created": "2014-12-20T10:52:51.524000Z",
        "edited": "2014-12-20T20:58:18.506000Z",
        "url": "https://swapi.co/api/planets/50/"
      },
      {
        "name": "Mirial",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "deserts",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/64/",
          "https://swapi.co/api/people/65/"
        ],
        "films": [],
        "created": "2014-12-20T16:44:46.318000Z",
        "edited": "2014-12-20T20:58:18.508000Z",
        "url": "https://swapi.co/api/planets/51/"
      }
    ]
  },
  "https://swapi.co/api/planets/42/": {
    "name": "Haruun Kal",
    "rotation_period": "25",
    "orbital_period": "383",
    "diameter": "10120",
    "climate": "temperate",
    "gravity": "0.98",
    "terrain": "toxic cloudsea, plateaus, volcanoes",
    "surface_water": "unknown",
    "population": "705300",
    "residents": [
      "https://swapi.co/api/people/51/"
    ],
    "films": [],
    "created": "2014-12-20T10:12:28.980000Z",
    "edited": "2014-12-20T20:58:18.491000Z",
    "url": "https://swapi.co/api/planets/42/"
  },
  "https://swapi.co/api/planets/43/": {
    "name": "Cerea",
    "rotation_period": "27",
    "orbital_period": "386",
    "diameter": "unknown",
    "climate": "temperate",
    "gravity": "1",
    "terrain": "verdant",
    "surface_water": "20",
    "population": "450000000",
    "residents": [
      "https://swapi.co/api/people/52/"
    ],
    "films": [],
    "created": "2014-12-20T10:14:48.178000Z",
    "edited": "2014-12-20T20:58:18.493000Z",
    "url": "https://swapi.co/api/planets/43/"
  },
  "https://swapi.co/api/planets/44/": {
    "name": "Glee Anselm",
    "rotation_period": "33",
    "orbital_period": "206",
    "diameter": "15600",
    "climate": "tropical, temperate",
    "gravity": "1",
    "terrain": "lakes, islands, swamps, seas",
    "surface_water": "80",
    "population": "500000000",
    "residents": [
      "https://swapi.co/api/people/53/"
    ],
    "films": [],
    "created": "2014-12-20T10:18:26.110000Z",
    "edited": "2014-12-20T20:58:18.495000Z",
    "url": "https://swapi.co/api/planets/44/"
  },
  "https://swapi.co/api/planets/45/": {
    "name": "Iridonia",
    "rotation_period": "29",
    "orbital_period": "413",
    "diameter": "unknown",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "rocky canyons, acid pools",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/54/"
    ],
    "films": [],
    "created": "2014-12-20T10:26:05.788000Z",
    "edited": "2014-12-20T20:58:18.497000Z",
    "url": "https://swapi.co/api/planets/45/"
  },
  "https://swapi.co/api/planets/46/": {
    "name": "Tholoth",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "unknown",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [],
    "films": [],
    "created": "2014-12-20T10:28:31.117000Z",
    "edited": "2014-12-20T20:58:18.498000Z",
    "url": "https://swapi.co/api/planets/46/"
  },
  "https://swapi.co/api/planets/47/": {
    "name": "Iktotch",
    "rotation_period": "22",
    "orbital_period": "481",
    "diameter": "unknown",
    "climate": "arid, rocky, windy",
    "gravity": "1",
    "terrain": "rocky",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/56/"
    ],
    "films": [],
    "created": "2014-12-20T10:31:32.413000Z",
    "edited": "2014-12-20T20:58:18.500000Z",
    "url": "https://swapi.co/api/planets/47/"
  },
  "https://swapi.co/api/planets/48/": {
    "name": "Quermia",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "unknown",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/57/"
    ],
    "films": [],
    "created": "2014-12-20T10:34:08.249000Z",
    "edited": "2014-12-20T20:58:18.502000Z",
    "url": "https://swapi.co/api/planets/48/"
  },
  "https://swapi.co/api/planets/49/": {
    "name": "Dorin",
    "rotation_period": "22",
    "orbital_period": "409",
    "diameter": "13400",
    "climate": "temperate",
    "gravity": "1",
    "terrain": "unknown",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/58/"
    ],
    "films": [],
    "created": "2014-12-20T10:48:36.141000Z",
    "edited": "2014-12-20T20:58:18.504000Z",
    "url": "https://swapi.co/api/planets/49/"
  },
  "https://swapi.co/api/planets/50/": {
    "name": "Champala",
    "rotation_period": "27",
    "orbital_period": "318",
    "diameter": "unknown",
    "climate": "temperate",
    "gravity": "1",
    "terrain": "oceans, rainforests, plateaus",
    "surface_water": "unknown",
    "population": "3500000000",
    "residents": [
      "https://swapi.co/api/people/59/"
    ],
    "films": [],
    "created": "2014-12-20T10:52:51.524000Z",
    "edited": "2014-12-20T20:58:18.506000Z",
    "url": "https://swapi.co/api/planets/50/"
  },
  "https://swapi.co/api/planets/51/": {
    "name": "Mirial",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "deserts",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/64/",
      "https://swapi.co/api/people/65/"
    ],
    "films": [],
    "created": "2014-12-20T16:44:46.318000Z",
    "edited": "2014-12-20T20:58:18.508000Z",
    "url": "https://swapi.co/api/planets/51/"
  },
  "https://swapi.co/api/planets/?page=6": {
    "count": 61,
    "next": "https://swapi.co/api/planets/?page=7",
    "previous": "https://swapi.co/api/planets/?page=5",
    "results": [
      {
        "name": "Serenno",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "rainforests, rivers, mountains",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/67/"
        ],
        "films": [],
        "created": "2014-12-20T16:52:13.357000Z",
        "edited": "2014-12-20T20:58:18.510000Z",
        "url": "https://swapi.co/api/planets/52/"
      },
      {
        "name": "Concord Dawn",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "jungles, forests, deserts",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/69/"
        ],
        "films": [],
        "created": "2014-12-20T16:54:39.909000Z",
        "edited": "2014-12-20T20:58:18.512000Z",
        "url": "https://swapi.co/api/planets/53/"
      },
      {
        "name": "Zolan",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "unknown",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/70/"
        ],
        "films": [],
        "created": "2014-12-20T16:56:37.250000Z",
        "edited": "2014-12-20T20:58:18.514000Z",
        "url": "https://swapi.co/api/planets/54/"
      },
      {
        "name": "Ojom",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "frigid",
        "gravity": "unknown",
        "terrain": "oceans, glaciers",
        "surface_water": "100",
        "population": "500000000",
        "residents": [
          "https://swapi.co/api/people/71/"
        ],
        "films": [],
        "created": "2014-12-20T17:27:41.286000Z",
        "edited": "2014-12-20T20:58:18.516000Z",
        "url": "https://swapi.co/api/planets/55/"
      },
      {
        "name": "Skako",
        "rotation_period": "27",
        "orbital_period": "384",
        "diameter": "unknown",
        "climate": "temperate",
        "gravity": "1",
        "terrain": "urban, vines",
        "surface_water": "unknown",
        "population": "500000000000",
        "residents": [
          "https://swapi.co/api/people/76/"
        ],
        "films": [],
        "created": "2014-12-20T17:50:47.864000Z",
        "edited": "2014-12-20T20:58:18.517000Z",
        "url": "https://swapi.co/api/planets/56/"
      },
      {
        "name": "Muunilinst",
        "rotation_period": "28",
        "orbital_period": "412",
        "diameter": "13800",
        "climate": "temperate",
        "gravity": "1",
        "terrain": "plains, forests, hills, mountains",
        "surface_water": "25",
        "population": "5000000000",
        "residents": [
          "https://swapi.co/api/people/77/"
        ],
        "films": [],
        "created": "2014-12-20T17:57:47.420000Z",
        "edited": "2014-12-20T20:58:18.519000Z",
        "url": "https://swapi.co/api/planets/57/"
      },
      {
        "name": "Shili",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "temperate",
        "gravity": "1",
        "terrain": "cities, savannahs, seas, plains",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/78/"
        ],
        "films": [],
        "created": "2014-12-20T18:43:14.049000Z",
        "edited": "2014-12-20T20:58:18.521000Z",
        "url": "https://swapi.co/api/planets/58/"
      },
      {
        "name": "Kalee",
        "rotation_period": "23",
        "orbital_period": "378",
        "diameter": "13850",
        "climate": "arid, temperate, tropical",
        "gravity": "1",
        "terrain": "rainforests, cliffs, canyons, seas",
        "surface_water": "unknown",
        "population": "4000000000",
        "residents": [
          "https://swapi.co/api/people/79/"
        ],
        "films": [],
        "created": "2014-12-20T19:43:51.278000Z",
        "edited": "2014-12-20T20:58:18.523000Z",
        "url": "https://swapi.co/api/planets/59/"
      },
      {
        "name": "Umbara",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "unknown",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [
          "https://swapi.co/api/people/82/"
        ],
        "films": [],
        "created": "2014-12-20T20:18:36.256000Z",
        "edited": "2014-12-20T20:58:18.525000Z",
        "url": "https://swapi.co/api/planets/60/"
      },
      {
        "name": "Tatooine",
        "rotation_period": "23",
        "orbital_period": "304",
        "diameter": "10465",
        "climate": "arid",
        "gravity": "1 standard",
        "terrain": "desert",
        "surface_water": "1",
        "population": "200000",
        "residents": [
          "https://swapi.co/api/people/1/",
          "https://swapi.co/api/people/2/",
          "https://swapi.co/api/people/4/",
          "https://swapi.co/api/people/6/",
          "https://swapi.co/api/people/7/",
          "https://swapi.co/api/people/8/",
          "https://swapi.co/api/people/9/",
          "https://swapi.co/api/people/11/",
          "https://swapi.co/api/people/43/",
          "https://swapi.co/api/people/62/"
        ],
        "films": [
          "https://swapi.co/api/films/5/",
          "https://swapi.co/api/films/4/",
          "https://swapi.co/api/films/6/",
          "https://swapi.co/api/films/3/",
          "https://swapi.co/api/films/1/"
        ],
        "created": "2014-12-09T13:50:49.641000Z",
        "edited": "2014-12-21T20:48:04.175778Z",
        "url": "https://swapi.co/api/planets/1/"
      }
    ]
  },
  "https://swapi.co/api/planets/52/": {
    "name": "Serenno",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "rainforests, rivers, mountains",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/67/"
    ],
    "films": [],
    "created": "2014-12-20T16:52:13.357000Z",
    "edited": "2014-12-20T20:58:18.510000Z",
    "url": "https://swapi.co/api/planets/52/"
  },
  "https://swapi.co/api/planets/53/": {
    "name": "Concord Dawn",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "jungles, forests, deserts",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/69/"
    ],
    "films": [],
    "created": "2014-12-20T16:54:39.909000Z",
    "edited": "2014-12-20T20:58:18.512000Z",
    "url": "https://swapi.co/api/planets/53/"
  },
  "https://swapi.co/api/planets/54/": {
    "name": "Zolan",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "unknown",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/70/"
    ],
    "films": [],
    "created": "2014-12-20T16:56:37.250000Z",
    "edited": "2014-12-20T20:58:18.514000Z",
    "url": "https://swapi.co/api/planets/54/"
  },
  "https://swapi.co/api/planets/55/": {
    "name": "Ojom",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "frigid",
    "gravity": "unknown",
    "terrain": "oceans, glaciers",
    "surface_water": "100",
    "population": "500000000",
    "residents": [
      "https://swapi.co/api/people/71/"
    ],
    "films": [],
    "created": "2014-12-20T17:27:41.286000Z",
    "edited": "2014-12-20T20:58:18.516000Z",
    "url": "https://swapi.co/api/planets/55/"
  },
  "https://swapi.co/api/planets/56/": {
    "name": "Skako",
    "rotation_period": "27",
    "orbital_period": "384",
    "diameter": "unknown",
    "climate": "temperate",
    "gravity": "1",
    "terrain": "urban, vines",
    "surface_water": "unknown",
    "population": "500000000000",
    "residents": [
      "https://swapi.co/api/people/76/"
    ],
    "films": [],
    "created": "2014-12-20T17:50:47.864000Z",
    "edited": "2014-12-20T20:58:18.517000Z",
    "url": "https://swapi.co/api/planets/56/"
  },
  "https://swapi.co/api/planets/57/": {
    "name": "Muunilinst",
    "rotation_period": "28",
    "orbital_period": "412",
    "diameter": "13800",
    "climate": "temperate",
    "gravity": "1",
    "terrain": "plains, forests, hills, mountains",
    "surface_water": "25",
    "population": "5000000000",
    "residents": [
      "https://swapi.co/api/people/77/"
    ],
    "films": [],
    "created": "2014-12-20T17:57:47.420000Z",
    "edited": "2014-12-20T20:58:18.519000Z",
    "url": "https://swapi.co/api/planets/57/"
  },
  "https://swapi.co/api/planets/58/": {
    "name": "Shili",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "temperate",
    "gravity": "1",
    "terrain": "cities, savannahs, seas, plains",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/78/"
    ],
    "films": [],
    "created": "2014-12-20T18:43:14.049000Z",
    "edited": "2014-12-20T20:58:18.521000Z",
    "url": "https://swapi.co/api/planets/58/"
  },
  "https://swapi.co/api/planets/59/": {
    "name": "Kalee",
    "rotation_period": "23",
    "orbital_period": "378",
    "diameter": "13850",
    "climate": "arid, temperate, tropical",
    "gravity": "1",
    "terrain": "rainforests, cliffs, canyons, seas",
    "surface_water": "unknown",
    "population": "4000000000",
    "residents": [
      "https://swapi.co/api/people/79/"
    ],
    "films": [],
    "created": "2014-12-20T19:43:51.278000Z",
    "edited": "2014-12-20T20:58:18.523000Z",
    "url": "https://swapi.co/api/planets/59/"
  },
  "https://swapi.co/api/planets/60/": {
    "name": "Umbara",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "unknown",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [
      "https://swapi.co/api/people/82/"
    ],
    "films": [],
    "created": "2014-12-20T20:18:36.256000Z",
    "edited": "2014-12-20T20:58:18.525000Z",
    "url": "https://swapi.co/api/planets/60/"
  },
  "https://swapi.co/api/planets/1/": {
    "name": "Tatooine",
    "rotation_period": "23",
    "orbital_period": "304",
    "diameter": "10465",
    "climate": "arid",
    "gravity": "1 standard",
    "terrain": "desert",
    "surface_water": "1",
    "population": "200000",
    "residents": [
      "https://swapi.co/api/people/1/",
      "https://swapi.co/api/people/2/",
      "https://swapi.co/api/people/4/",
      "https://swapi.co/api/people/6/",
      "https://swapi.co/api/people/7/",
      "https://swapi.co/api/people/8/",
      "https://swapi.co/api/people/9/",
      "https://swapi.co/api/people/11/",
      "https://swapi.co/api/people/43/",
      "https://swapi.co/api/people/62/"
    ],
    "films": [
      "https://swapi.co/api/films/5/",
      "https://swapi.co/api/films/4/",
      "https://swapi.co/api/films/6/",
      "https://swapi.co/api/films/3/",
      "https://swapi.co/api/films/1/"
    ],
    "created": "2014-12-09T13:50:49.641000Z",
    "edited": "2014-12-21T20:48:04.175778Z",
    "url": "https://swapi.co/api/planets/1/"
  },
  "https://swapi.co/api/planets/?page=7": {
    "count": 61,
    "next": null,
    "previous": "https://swapi.co/api/planets/?page=6",
    "results": [
      {
        "name": "Jakku",
        "rotation_period": "unknown",
        "orbital_period": "unknown",
        "diameter": "unknown",
        "climate": "unknown",
        "gravity": "unknown",
        "terrain": "deserts",
        "surface_water": "unknown",
        "population": "unknown",
        "residents": [],
        "films": [
          "https://swapi.co/api/films/7/"
        ],
        "created": "2015-04-17T06:55:57.556495Z",
        "edited": "2015-04-17T06:55:57.556551Z",
        "url": "https://swapi.co/api/planets/61/"
      }
    ]
  },
  "https://swapi.co/api/planets/61/": {
    "name": "Jakku",
    "rotation_period": "unknown",
    "orbital_period": "unknown",
    "diameter": "unknown",
    "climate": "unknown",
    "gravity": "unknown",
    "terrain": "deserts",
    "surface_water": "unknown",
    "population": "unknown",
    "residents": [],
    "films": [
      "https://swapi.co/api/films/7/"
    ],
    "created": "2015-04-17T06:55:57.556495Z",
    "edited": "2015-04-17T06:55:57.556551Z",
    "url": "https://swapi.co/api/planets/61/"
  },
  "https://swapi.co/api/films/": {
    "count": 7,
    "next": null,
    "previous": null,
    "results": [
      {
        "title": "A New Hope",
        "episode_id": 4,
        "opening_crawl": "It is a period of civil war.\r\nRebel spaceships, striking\r\nfrom a hidden base, have won\r\ntheir first victory against\r\nthe evil Galactic Empire.\r\n\r\nDuring the battle, Rebel\r\nspies managed to steal secret\r\nplans to the Empire's\r\nultimate weapon, the DEATH\r\nSTAR, an armored space\r\nstation with enough power\r\nto destroy an entire planet.\r\n\r\nPursued by the Empire's\r\nsinister agents, Princess\r\nLeia races home aboard her\r\nstarship, custodian of the\r\nstolen plans that can save her\r\npeople and restore\r\nfreedom to the galaxy....",
        "director": "George Lucas",
        "producer": "Gary Kurtz, Rick McCallum",
        "release_date": "1977-05-25",
        "characters": [
          "https://swapi.co/api/people/1/",
          "https://swapi.co/api/people/2/",
          "https://swapi.co/api/people/3/",
          "https://swapi.co/api/people/4/",
          "https://swapi.co/api/people/5/",
          "https://swapi.co/api/people/6/",
          "https://swapi.co/api/people/7/",
          "https://swapi.co/api/people/8/",
          "https://swapi.co/api/people/9/",
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/12/",
          "https://swapi.co/api/people/13/",
          "https://swapi.co/api/people/14/",
          "https://swapi.co/api/people/15/",
          "https://swapi.co/api/people/16/",
          "https://swapi.co/api/people/18/",
          "https://swapi.co/api/people/19/",
          "https://swapi.co/api/people/81/"
        ],
        "planets": [
          "https://swapi.co/api/planets/2/",
          "https://swapi.co/api/planets/3/",
          "https://swapi.co/api/planets/1/"
        ],
        "starships": [
          "https://swapi.co/api/starships/2/",
          "https://swapi.co/api/starships/3/",
          "https://swapi.co/api/starships/5/",
          "https://swapi.co/api/starships/9/",
          "https://swapi.co/api/starships/10/",
          "https://swapi.co/api/starships/11/",
          "https://swapi.co/api/starships/12/",
          "https://swapi.co/api/starships/13/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/4/",
          "https://swapi.co/api/vehicles/6/",
          "https://swapi.co/api/vehicles/7/",
          "https://swapi.co/api/vehicles/8/"
        ],
        "species": [
          "https://swapi.co/api/species/5/",
          "https://swapi.co/api/species/3/",
          "https://swapi.co/api/species/2/",
          "https://swapi.co/api/species/1/",
          "https://swapi.co/api/species/4/"
        ],
        "created": "2014-12-10T14:23:31.880000Z",
        "edited": "2015-04-11T09:46:52.774897Z",
        "url": "https://swapi.co/api/films/1/"
      },
      {
        "title": "Attack of the Clones",
        "episode_id": 2,
        "opening_crawl": "There is unrest in the Galactic\r\nSenate. Several thousand solar\r\nsystems have declared their\r\nintentions to leave the Republic.\r\n\r\nThis separatist movement,\r\nunder the leadership of the\r\nmysterious Count Dooku, has\r\nmade it difficult for the limited\r\nnumber of Jedi Knights to maintain \r\npeace and order in the galaxy.\r\n\r\nSenator Amidala, the former\r\nQueen of Naboo, is returning\r\nto the Galactic Senate to vote\r\non the critical issue of creating\r\nan ARMY OF THE REPUBLIC\r\nto assist the overwhelmed\r\nJedi....",
        "director": "George Lucas",
        "producer": "Rick McCallum",
        "release_date": "2002-05-16",
        "characters": [
          "https://swapi.co/api/people/2/",
          "https://swapi.co/api/people/3/",
          "https://swapi.co/api/people/6/",
          "https://swapi.co/api/people/7/",
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/11/",
          "https://swapi.co/api/people/20/",
          "https://swapi.co/api/people/21/",
          "https://swapi.co/api/people/22/",
          "https://swapi.co/api/people/33/",
          "https://swapi.co/api/people/36/",
          "https://swapi.co/api/people/40/",
          "https://swapi.co/api/people/43/",
          "https://swapi.co/api/people/46/",
          "https://swapi.co/api/people/51/",
          "https://swapi.co/api/people/52/",
          "https://swapi.co/api/people/53/",
          "https://swapi.co/api/people/58/",
          "https://swapi.co/api/people/59/",
          "https://swapi.co/api/people/60/",
          "https://swapi.co/api/people/61/",
          "https://swapi.co/api/people/62/",
          "https://swapi.co/api/people/63/",
          "https://swapi.co/api/people/64/",
          "https://swapi.co/api/people/65/",
          "https://swapi.co/api/people/66/",
          "https://swapi.co/api/people/67/",
          "https://swapi.co/api/people/68/",
          "https://swapi.co/api/people/69/",
          "https://swapi.co/api/people/70/",
          "https://swapi.co/api/people/71/",
          "https://swapi.co/api/people/72/",
          "https://swapi.co/api/people/73/",
          "https://swapi.co/api/people/74/",
          "https://swapi.co/api/people/75/",
          "https://swapi.co/api/people/76/",
          "https://swapi.co/api/people/77/",
          "https://swapi.co/api/people/78/",
          "https://swapi.co/api/people/82/",
          "https://swapi.co/api/people/35/"
        ],
        "planets": [
          "https://swapi.co/api/planets/8/",
          "https://swapi.co/api/planets/9/",
          "https://swapi.co/api/planets/10/",
          "https://swapi.co/api/planets/11/",
          "https://swapi.co/api/planets/1/"
        ],
        "starships": [
          "https://swapi.co/api/starships/21/",
          "https://swapi.co/api/starships/39/",
          "https://swapi.co/api/starships/43/",
          "https://swapi.co/api/starships/47/",
          "https://swapi.co/api/starships/48/",
          "https://swapi.co/api/starships/49/",
          "https://swapi.co/api/starships/32/",
          "https://swapi.co/api/starships/52/",
          "https://swapi.co/api/starships/58/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/4/",
          "https://swapi.co/api/vehicles/44/",
          "https://swapi.co/api/vehicles/45/",
          "https://swapi.co/api/vehicles/46/",
          "https://swapi.co/api/vehicles/50/",
          "https://swapi.co/api/vehicles/51/",
          "https://swapi.co/api/vehicles/53/",
          "https://swapi.co/api/vehicles/54/",
          "https://swapi.co/api/vehicles/55/",
          "https://swapi.co/api/vehicles/56/",
          "https://swapi.co/api/vehicles/57/"
        ],
        "species": [
          "https://swapi.co/api/species/32/",
          "https://swapi.co/api/species/33/",
          "https://swapi.co/api/species/2/",
          "https://swapi.co/api/species/35/",
          "https://swapi.co/api/species/6/",
          "https://swapi.co/api/species/1/",
          "https://swapi.co/api/species/12/",
          "https://swapi.co/api/species/34/",
          "https://swapi.co/api/species/13/",
          "https://swapi.co/api/species/15/",
          "https://swapi.co/api/species/28/",
          "https://swapi.co/api/species/29/",
          "https://swapi.co/api/species/30/",
          "https://swapi.co/api/species/31/"
        ],
        "created": "2014-12-20T10:57:57.886000Z",
        "edited": "2015-04-11T09:45:01.623982Z",
        "url": "https://swapi.co/api/films/5/"
      },
      {
        "title": "The Phantom Menace",
        "episode_id": 1,
        "opening_crawl": "Turmoil has engulfed the\r\nGalactic Republic. The taxation\r\nof trade routes to outlying star\r\nsystems is in dispute.\r\n\r\nHoping to resolve the matter\r\nwith a blockade of deadly\r\nbattleships, the greedy Trade\r\nFederation has stopped all\r\nshipping to the small planet\r\nof Naboo.\r\n\r\nWhile the Congress of the\r\nRepublic endlessly debates\r\nthis alarming chain of events,\r\nthe Supreme Chancellor has\r\nsecretly dispatched two Jedi\r\nKnights, the guardians of\r\npeace and justice in the\r\ngalaxy, to settle the conflict....",
        "director": "George Lucas",
        "producer": "Rick McCallum",
        "release_date": "1999-05-19",
        "characters": [
          "https://swapi.co/api/people/2/",
          "https://swapi.co/api/people/3/",
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/11/",
          "https://swapi.co/api/people/16/",
          "https://swapi.co/api/people/20/",
          "https://swapi.co/api/people/21/",
          "https://swapi.co/api/people/32/",
          "https://swapi.co/api/people/33/",
          "https://swapi.co/api/people/34/",
          "https://swapi.co/api/people/36/",
          "https://swapi.co/api/people/37/",
          "https://swapi.co/api/people/38/",
          "https://swapi.co/api/people/39/",
          "https://swapi.co/api/people/40/",
          "https://swapi.co/api/people/41/",
          "https://swapi.co/api/people/42/",
          "https://swapi.co/api/people/43/",
          "https://swapi.co/api/people/44/",
          "https://swapi.co/api/people/46/",
          "https://swapi.co/api/people/48/",
          "https://swapi.co/api/people/49/",
          "https://swapi.co/api/people/50/",
          "https://swapi.co/api/people/51/",
          "https://swapi.co/api/people/52/",
          "https://swapi.co/api/people/53/",
          "https://swapi.co/api/people/54/",
          "https://swapi.co/api/people/55/",
          "https://swapi.co/api/people/56/",
          "https://swapi.co/api/people/57/",
          "https://swapi.co/api/people/58/",
          "https://swapi.co/api/people/59/",
          "https://swapi.co/api/people/47/",
          "https://swapi.co/api/people/35/"
        ],
        "planets": [
          "https://swapi.co/api/planets/8/",
          "https://swapi.co/api/planets/9/",
          "https://swapi.co/api/planets/1/"
        ],
        "starships": [
          "https://swapi.co/api/starships/40/",
          "https://swapi.co/api/starships/41/",
          "https://swapi.co/api/starships/31/",
          "https://swapi.co/api/starships/32/",
          "https://swapi.co/api/starships/39/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/33/",
          "https://swapi.co/api/vehicles/34/",
          "https://swapi.co/api/vehicles/35/",
          "https://swapi.co/api/vehicles/36/",
          "https://swapi.co/api/vehicles/37/",
          "https://swapi.co/api/vehicles/38/",
          "https://swapi.co/api/vehicles/42/"
        ],
        "species": [
          "https://swapi.co/api/species/1/",
          "https://swapi.co/api/species/2/",
          "https://swapi.co/api/species/6/",
          "https://swapi.co/api/species/11/",
          "https://swapi.co/api/species/12/",
          "https://swapi.co/api/species/13/",
          "https://swapi.co/api/species/14/",
          "https://swapi.co/api/species/15/",
          "https://swapi.co/api/species/16/",
          "https://swapi.co/api/species/17/",
          "https://swapi.co/api/species/18/",
          "https://swapi.co/api/species/19/",
          "https://swapi.co/api/species/20/",
          "https://swapi.co/api/species/21/",
          "https://swapi.co/api/species/22/",
          "https://swapi.co/api/species/23/",
          "https://swapi.co/api/species/24/",
          "https://swapi.co/api/species/25/",
          "https://swapi.co/api/species/26/",
          "https://swapi.co/api/species/27/"
        ],
        "created": "2014-12-19T16:52:55.740000Z",
        "edited": "2015-04-11T09:45:18.689301Z",
        "url": "https://swapi.co/api/films/4/"
      },
      {
        "title": "Revenge of the Sith",
        "episode_id": 3,
        "opening_crawl": "War! The Republic is crumbling\r\nunder attacks by the ruthless\r\nSith Lord, Count Dooku.\r\nThere are heroes on both sides.\r\nEvil is everywhere.\r\n\r\nIn a stunning move, the\r\nfiendish droid leader, General\r\nGrievous, has swept into the\r\nRepublic capital and kidnapped\r\nChancellor Palpatine, leader of\r\nthe Galactic Senate.\r\n\r\nAs the Separatist Droid Army\r\nattempts to flee the besieged\r\ncapital with their valuable\r\nhostage, two Jedi Knights lead a\r\ndesperate mission to rescue the\r\ncaptive Chancellor....",
        "director": "George Lucas",
        "producer": "Rick McCallum",
        "release_date": "2005-05-19",
        "characters": [
          "https://swapi.co/api/people/1/",
          "https://swapi.co/api/people/2/",
          "https://swapi.co/api/people/3/",
          "https://swapi.co/api/people/4/",
          "https://swapi.co/api/people/5/",
          "https://swapi.co/api/people/6/",
          "https://swapi.co/api/people/7/",
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/11/",
          "https://swapi.co/api/people/12/",
          "https://swapi.co/api/people/13/",
          "https://swapi.co/api/people/20/",
          "https://swapi.co/api/people/21/",
          "https://swapi.co/api/people/33/",
          "https://swapi.co/api/people/46/",
          "https://swapi.co/api/people/51/",
          "https://swapi.co/api/people/52/",
          "https://swapi.co/api/people/53/",
          "https://swapi.co/api/people/54/",
          "https://swapi.co/api/people/55/",
          "https://swapi.co/api/people/56/",
          "https://swapi.co/api/people/58/",
          "https://swapi.co/api/people/63/",
          "https://swapi.co/api/people/64/",
          "https://swapi.co/api/people/67/",
          "https://swapi.co/api/people/68/",
          "https://swapi.co/api/people/75/",
          "https://swapi.co/api/people/78/",
          "https://swapi.co/api/people/79/",
          "https://swapi.co/api/people/80/",
          "https://swapi.co/api/people/81/",
          "https://swapi.co/api/people/82/",
          "https://swapi.co/api/people/83/",
          "https://swapi.co/api/people/35/"
        ],
        "planets": [
          "https://swapi.co/api/planets/2/",
          "https://swapi.co/api/planets/5/",
          "https://swapi.co/api/planets/8/",
          "https://swapi.co/api/planets/9/",
          "https://swapi.co/api/planets/12/",
          "https://swapi.co/api/planets/13/",
          "https://swapi.co/api/planets/14/",
          "https://swapi.co/api/planets/15/",
          "https://swapi.co/api/planets/16/",
          "https://swapi.co/api/planets/17/",
          "https://swapi.co/api/planets/18/",
          "https://swapi.co/api/planets/19/",
          "https://swapi.co/api/planets/1/"
        ],
        "starships": [
          "https://swapi.co/api/starships/48/",
          "https://swapi.co/api/starships/59/",
          "https://swapi.co/api/starships/61/",
          "https://swapi.co/api/starships/32/",
          "https://swapi.co/api/starships/63/",
          "https://swapi.co/api/starships/64/",
          "https://swapi.co/api/starships/65/",
          "https://swapi.co/api/starships/66/",
          "https://swapi.co/api/starships/74/",
          "https://swapi.co/api/starships/75/",
          "https://swapi.co/api/starships/2/",
          "https://swapi.co/api/starships/68/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/33/",
          "https://swapi.co/api/vehicles/50/",
          "https://swapi.co/api/vehicles/53/",
          "https://swapi.co/api/vehicles/56/",
          "https://swapi.co/api/vehicles/60/",
          "https://swapi.co/api/vehicles/62/",
          "https://swapi.co/api/vehicles/67/",
          "https://swapi.co/api/vehicles/69/",
          "https://swapi.co/api/vehicles/70/",
          "https://swapi.co/api/vehicles/71/",
          "https://swapi.co/api/vehicles/72/",
          "https://swapi.co/api/vehicles/73/",
          "https://swapi.co/api/vehicles/76/"
        ],
        "species": [
          "https://swapi.co/api/species/19/",
          "https://swapi.co/api/species/33/",
          "https://swapi.co/api/species/2/",
          "https://swapi.co/api/species/3/",
          "https://swapi.co/api/species/36/",
          "https://swapi.co/api/species/37/",
          "https://swapi.co/api/species/6/",
          "https://swapi.co/api/species/1/",
          "https://swapi.co/api/species/34/",
          "https://swapi.co/api/species/15/",
          "https://swapi.co/api/species/35/",
          "https://swapi.co/api/species/20/",
          "https://swapi.co/api/species/23/",
          "https://swapi.co/api/species/24/",
          "https://swapi.co/api/species/25/",
          "https://swapi.co/api/species/26/",
          "https://swapi.co/api/species/27/",
          "https://swapi.co/api/species/28/",
          "https://swapi.co/api/species/29/",
          "https://swapi.co/api/species/30/"
        ],
        "created": "2014-12-20T18:49:38.403000Z",
        "edited": "2015-04-11T09:45:44.862122Z",
        "url": "https://swapi.co/api/films/6/"
      },
      {
        "title": "Return of the Jedi",
        "episode_id": 6,
        "opening_crawl": "Luke Skywalker has returned to\r\nhis home planet of Tatooine in\r\nan attempt to rescue his\r\nfriend Han Solo from the\r\nclutches of the vile gangster\r\nJabba the Hutt.\r\n\r\nLittle does Luke know that the\r\nGALACTIC EMPIRE has secretly\r\nbegun construction on a new\r\narmored space station even\r\nmore powerful than the first\r\ndreaded Death Star.\r\n\r\nWhen completed, this ultimate\r\nweapon will spell certain doom\r\nfor the small band of rebels\r\nstruggling to restore freedom\r\nto the galaxy...",
        "director": "Richard Marquand",
        "producer": "Howard G. Kazanjian, George Lucas, Rick McCallum",
        "release_date": "1983-05-25",
        "characters": [
          "https://swapi.co/api/people/1/",
          "https://swapi.co/api/people/2/",
          "https://swapi.co/api/people/3/",
          "https://swapi.co/api/people/4/",
          "https://swapi.co/api/people/5/",
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/13/",
          "https://swapi.co/api/people/14/",
          "https://swapi.co/api/people/16/",
          "https://swapi.co/api/people/18/",
          "https://swapi.co/api/people/20/",
          "https://swapi.co/api/people/21/",
          "https://swapi.co/api/people/22/",
          "https://swapi.co/api/people/25/",
          "https://swapi.co/api/people/27/",
          "https://swapi.co/api/people/28/",
          "https://swapi.co/api/people/29/",
          "https://swapi.co/api/people/30/",
          "https://swapi.co/api/people/31/",
          "https://swapi.co/api/people/45/"
        ],
        "planets": [
          "https://swapi.co/api/planets/5/",
          "https://swapi.co/api/planets/7/",
          "https://swapi.co/api/planets/8/",
          "https://swapi.co/api/planets/9/",
          "https://swapi.co/api/planets/1/"
        ],
        "starships": [
          "https://swapi.co/api/starships/15/",
          "https://swapi.co/api/starships/10/",
          "https://swapi.co/api/starships/11/",
          "https://swapi.co/api/starships/12/",
          "https://swapi.co/api/starships/22/",
          "https://swapi.co/api/starships/23/",
          "https://swapi.co/api/starships/27/",
          "https://swapi.co/api/starships/28/",
          "https://swapi.co/api/starships/29/",
          "https://swapi.co/api/starships/3/",
          "https://swapi.co/api/starships/17/",
          "https://swapi.co/api/starships/2/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/8/",
          "https://swapi.co/api/vehicles/16/",
          "https://swapi.co/api/vehicles/18/",
          "https://swapi.co/api/vehicles/19/",
          "https://swapi.co/api/vehicles/24/",
          "https://swapi.co/api/vehicles/25/",
          "https://swapi.co/api/vehicles/26/",
          "https://swapi.co/api/vehicles/30/"
        ],
        "species": [
          "https://swapi.co/api/species/1/",
          "https://swapi.co/api/species/2/",
          "https://swapi.co/api/species/3/",
          "https://swapi.co/api/species/5/",
          "https://swapi.co/api/species/6/",
          "https://swapi.co/api/species/8/",
          "https://swapi.co/api/species/9/",
          "https://swapi.co/api/species/10/",
          "https://swapi.co/api/species/15/"
        ],
        "created": "2014-12-18T10:39:33.255000Z",
        "edited": "2015-04-11T09:46:05.220365Z",
        "url": "https://swapi.co/api/films/3/"
      },
      {
        "title": "The Empire Strikes Back",
        "episode_id": 5,
        "opening_crawl": "It is a dark time for the\r\nRebellion. Although the Death\r\nStar has been destroyed,\r\nImperial troops have driven the\r\nRebel forces from their hidden\r\nbase and pursued them across\r\nthe galaxy.\r\n\r\nEvading the dreaded Imperial\r\nStarfleet, a group of freedom\r\nfighters led by Luke Skywalker\r\nhas established a new secret\r\nbase on the remote ice world\r\nof Hoth.\r\n\r\nThe evil lord Darth Vader,\r\nobsessed with finding young\r\nSkywalker, has dispatched\r\nthousands of remote probes into\r\nthe far reaches of space....",
        "director": "Irvin Kershner",
        "producer": "Gary Kurtz, Rick McCallum",
        "release_date": "1980-05-17",
        "characters": [
          "https://swapi.co/api/people/1/",
          "https://swapi.co/api/people/2/",
          "https://swapi.co/api/people/3/",
          "https://swapi.co/api/people/4/",
          "https://swapi.co/api/people/5/",
          "https://swapi.co/api/people/10/",
          "https://swapi.co/api/people/13/",
          "https://swapi.co/api/people/14/",
          "https://swapi.co/api/people/18/",
          "https://swapi.co/api/people/20/",
          "https://swapi.co/api/people/21/",
          "https://swapi.co/api/people/22/",
          "https://swapi.co/api/people/23/",
          "https://swapi.co/api/people/24/",
          "https://swapi.co/api/people/25/",
          "https://swapi.co/api/people/26/"
        ],
        "planets": [
          "https://swapi.co/api/planets/4/",
          "https://swapi.co/api/planets/5/",
          "https://swapi.co/api/planets/6/",
          "https://swapi.co/api/planets/27/"
        ],
        "starships": [
          "https://swapi.co/api/starships/15/",
          "https://swapi.co/api/starships/10/",
          "https://swapi.co/api/starships/11/",
          "https://swapi.co/api/starships/12/",
          "https://swapi.co/api/starships/21/",
          "https://swapi.co/api/starships/22/",
          "https://swapi.co/api/starships/23/",
          "https://swapi.co/api/starships/3/",
          "https://swapi.co/api/starships/17/"
        ],
        "vehicles": [
          "https://swapi.co/api/vehicles/8/",
          "https://swapi.co/api/vehicles/14/",
          "https://swapi.co/api/vehicles/16/",
          "https://swapi.co/api/vehicles/18/",
          "https://swapi.co/api/vehicles/19/",
          "https://swapi.co/api/vehicles/20/"
        ],
        "species": [
          "https://swapi.co/api/species/6/",
          "https://swapi.co/api/species/7/",
          "https://swapi.co/api/species/3/",
          "https://swapi.co/api/species/2/",
          "https://swapi.co/api/species/1/"
        ],
        "created": "2014-12-12T11:26:24.656000Z",
        "edited": "2017-04-19T10:57:29.544256Z",
        "url": "https://swapi.co/api/films/2/"
      },
      {
        "title": "The Force Awakens",
        "episode_id": 7,
        "opening_crawl": "Luke Skywalker has vanished.\r\nIn his absence, the sinister\r\nFIRST ORDER has risen from\r\nthe ashes of the Empire\r\nand will not rest until\r\nSkywalker, the last Jedi,\r\nhas been destroyed.\r\n \r\nWith the support of the\r\nREPUBLIC, General Leia Organa\r\nleads a brave RESISTANCE.\r\nShe is desperate to find her\r\nbrother Luke and gain his\r\nhelp in restoring peace and\r\njustice to the galaxy.\r\n \r\nLeia has sent her most daring\r\npilot on a secret mission\r\nto Jakku, where an old ally\r\nhas discovered a clue to\r\nLuke's whereabouts....",
        "director": "J. J. Abrams",
        "producer": "Kathleen Kennedy, J. J. Abrams, Bryan Burk",
        "release_date": "2015-12-11",
        "characters": [
          "https://swapi.co/api/people/1/",
          "https://swapi.co/api/people/3/",
          "https://swapi.co/api/people/5/",
          "https://swapi.co/api/people/13/",
          "https://swapi.co/api/people/14/",
          "https://swapi.co/api/people/27/",
          "https://swapi.co/api/people/84/",
          "https://swapi.co/api/people/85/",
          "https://swapi.co/api/people/86/",
          "https://swapi.co/api/people/87/",
          "https://swapi.co/api/people/88/"
        ],
        "planets": [
          "https://swapi.co/api/planets/61/"
        ],
        "starships": [
          "https://swapi.co/api/starships/77/",
          "https://swapi.co/api/starships/10/"
        ],
        "vehicles": [],
        "species": [
          "https://swapi.co/api/species/3/",
          "https://swapi.co/api/species/2/",
          "https://swapi.co/api/species/1/"
        ],
        "created": "2015-04-17T06:51:30.504780Z",
        "edited": "2015-12-17T14:31:47.617768Z",
        "url": "https://swapi.co/api/films/7/"
      }
    ]
  },
  "https://swapi.co/api/films/1/": {
    "title": "A New Hope",
    "episode_id": 4,
    "opening_crawl": "It is a period of civil war.\r\nRebel spaceships, striking\r\nfrom a hidden base, have won\r\ntheir first victory against\r\nthe evil Galactic Empire.\r\n\r\nDuring the battle, Rebel\r\nspies managed to steal secret\r\nplans to the Empire's\r\nultimate weapon, the DEATH\r\nSTAR, an armored space\r\nstation with enough power\r\nto destroy an entire planet.\r\n\r\nPursued by the Empire's\r\nsinister agents, Princess\r\nLeia races home aboard her\r\nstarship, custodian of the\r\nstolen plans that can save her\r\npeople and restore\r\nfreedom to the galaxy....",
    "director": "George Lucas",
    "producer": "Gary Kurtz, Rick McCallum",
    "release_date": "1977-05-25",
    "characters": [
      "https://swapi.co/api/people/1/",
      "https://swapi.co/api/people/2/",
      "https://swapi.co/api/people/3/",
      "https://swapi.co/api/people/4/",
      "https://swapi.co/api/people/5/",
      "https://swapi.co/api/people/6/",
      "https://swapi.co/api/people/7/",
      "https://swapi.co/api/people/8/",
      "https://swapi.co/api/people/9/",
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/12/",
      "https://swapi.co/api/people/13/",
      "https://swapi.co/api/people/14/",
      "https://swapi.co/api/people/15/",
      "https://swapi.co/api/people/16/",
      "https://swapi.co/api/people/18/",
      "https://swapi.co/api/people/19/",
      "https://swapi.co/api/people/81/"
    ],
    "planets": [
      "https://swapi.co/api/planets/2/",
      "https://swapi.co/api/planets/3/",
      "https://swapi.co/api/planets/1/"
    ],
    "starships": [
      "https://swapi.co/api/starships/2/",
      "https://swapi.co/api/starships/3/",
      "https://swapi.co/api/starships/5/",
      "https://swapi.co/api/starships/9/",
      "https://swapi.co/api/starships/10/",
      "https://swapi.co/api/starships/11/",
      "https://swapi.co/api/starships/12/",
      "https://swapi.co/api/starships/13/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/4/",
      "https://swapi.co/api/vehicles/6/",
      "https://swapi.co/api/vehicles/7/",
      "https://swapi.co/api/vehicles/8/"
    ],
    "species": [
      "https://swapi.co/api/species/5/",
      "https://swapi.co/api/species/3/",
      "https://swapi.co/api/species/2/",
      "https://swapi.co/api/species/1/",
      "https://swapi.co/api/species/4/"
    ],
    "created": "2014-12-10T14:23:31.880000Z",
    "edited": "2015-04-11T09:46:52.774897Z",
    "url": "https://swapi.co/api/films/1/"
  },
  "https://swapi.co/api/films/5/": {
    "title": "Attack of the Clones",
    "episode_id": 2,
    "opening_crawl": "There is unrest in the Galactic\r\nSenate. Several thousand solar\r\nsystems have declared their\r\nintentions to leave the Republic.\r\n\r\nThis separatist movement,\r\nunder the leadership of the\r\nmysterious Count Dooku, has\r\nmade it difficult for the limited\r\nnumber of Jedi Knights to maintain \r\npeace and order in the galaxy.\r\n\r\nSenator Amidala, the former\r\nQueen of Naboo, is returning\r\nto the Galactic Senate to vote\r\non the critical issue of creating\r\nan ARMY OF THE REPUBLIC\r\nto assist the overwhelmed\r\nJedi....",
    "director": "George Lucas",
    "producer": "Rick McCallum",
    "release_date": "2002-05-16",
    "characters": [
      "https://swapi.co/api/people/2/",
      "https://swapi.co/api/people/3/",
      "https://swapi.co/api/people/6/",
      "https://swapi.co/api/people/7/",
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/11/",
      "https://swapi.co/api/people/20/",
      "https://swapi.co/api/people/21/",
      "https://swapi.co/api/people/22/",
      "https://swapi.co/api/people/33/",
      "https://swapi.co/api/people/36/",
      "https://swapi.co/api/people/40/",
      "https://swapi.co/api/people/43/",
      "https://swapi.co/api/people/46/",
      "https://swapi.co/api/people/51/",
      "https://swapi.co/api/people/52/",
      "https://swapi.co/api/people/53/",
      "https://swapi.co/api/people/58/",
      "https://swapi.co/api/people/59/",
      "https://swapi.co/api/people/60/",
      "https://swapi.co/api/people/61/",
      "https://swapi.co/api/people/62/",
      "https://swapi.co/api/people/63/",
      "https://swapi.co/api/people/64/",
      "https://swapi.co/api/people/65/",
      "https://swapi.co/api/people/66/",
      "https://swapi.co/api/people/67/",
      "https://swapi.co/api/people/68/",
      "https://swapi.co/api/people/69/",
      "https://swapi.co/api/people/70/",
      "https://swapi.co/api/people/71/",
      "https://swapi.co/api/people/72/",
      "https://swapi.co/api/people/73/",
      "https://swapi.co/api/people/74/",
      "https://swapi.co/api/people/75/",
      "https://swapi.co/api/people/76/",
      "https://swapi.co/api/people/77/",
      "https://swapi.co/api/people/78/",
      "https://swapi.co/api/people/82/",
      "https://swapi.co/api/people/35/"
    ],
    "planets": [
      "https://swapi.co/api/planets/8/",
      "https://swapi.co/api/planets/9/",
      "https://swapi.co/api/planets/10/",
      "https://swapi.co/api/planets/11/",
      "https://swapi.co/api/planets/1/"
    ],
    "starships": [
      "https://swapi.co/api/starships/21/",
      "https://swapi.co/api/starships/39/",
      "https://swapi.co/api/starships/43/",
      "https://swapi.co/api/starships/47/",
      "https://swapi.co/api/starships/48/",
      "https://swapi.co/api/starships/49/",
      "https://swapi.co/api/starships/32/",
      "https://swapi.co/api/starships/52/",
      "https://swapi.co/api/starships/58/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/4/",
      "https://swapi.co/api/vehicles/44/",
      "https://swapi.co/api/vehicles/45/",
      "https://swapi.co/api/vehicles/46/",
      "https://swapi.co/api/vehicles/50/",
      "https://swapi.co/api/vehicles/51/",
      "https://swapi.co/api/vehicles/53/",
      "https://swapi.co/api/vehicles/54/",
      "https://swapi.co/api/vehicles/55/",
      "https://swapi.co/api/vehicles/56/",
      "https://swapi.co/api/vehicles/57/"
    ],
    "species": [
      "https://swapi.co/api/species/32/",
      "https://swapi.co/api/species/33/",
      "https://swapi.co/api/species/2/",
      "https://swapi.co/api/species/35/",
      "https://swapi.co/api/species/6/",
      "https://swapi.co/api/species/1/",
      "https://swapi.co/api/species/12/",
      "https://swapi.co/api/species/34/",
      "https://swapi.co/api/species/13/",
      "https://swapi.co/api/species/15/",
      "https://swapi.co/api/species/28/",
      "https://swapi.co/api/species/29/",
      "https://swapi.co/api/species/30/",
      "https://swapi.co/api/species/31/"
    ],
    "created": "2014-12-20T10:57:57.886000Z",
    "edited": "2015-04-11T09:45:01.623982Z",
    "url": "https://swapi.co/api/films/5/"
  },
  "https://swapi.co/api/films/4/": {
    "title": "The Phantom Menace",
    "episode_id": 1,
    "opening_crawl": "Turmoil has engulfed the\r\nGalactic Republic. The taxation\r\nof trade routes to outlying star\r\nsystems is in dispute.\r\n\r\nHoping to resolve the matter\r\nwith a blockade of deadly\r\nbattleships, the greedy Trade\r\nFederation has stopped all\r\nshipping to the small planet\r\nof Naboo.\r\n\r\nWhile the Congress of the\r\nRepublic endlessly debates\r\nthis alarming chain of events,\r\nthe Supreme Chancellor has\r\nsecretly dispatched two Jedi\r\nKnights, the guardians of\r\npeace and justice in the\r\ngalaxy, to settle the conflict....",
    "director": "George Lucas",
    "producer": "Rick McCallum",
    "release_date": "1999-05-19",
    "characters": [
      "https://swapi.co/api/people/2/",
      "https://swapi.co/api/people/3/",
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/11/",
      "https://swapi.co/api/people/16/",
      "https://swapi.co/api/people/20/",
      "https://swapi.co/api/people/21/",
      "https://swapi.co/api/people/32/",
      "https://swapi.co/api/people/33/",
      "https://swapi.co/api/people/34/",
      "https://swapi.co/api/people/36/",
      "https://swapi.co/api/people/37/",
      "https://swapi.co/api/people/38/",
      "https://swapi.co/api/people/39/",
      "https://swapi.co/api/people/40/",
      "https://swapi.co/api/people/41/",
      "https://swapi.co/api/people/42/",
      "https://swapi.co/api/people/43/",
      "https://swapi.co/api/people/44/",
      "https://swapi.co/api/people/46/",
      "https://swapi.co/api/people/48/",
      "https://swapi.co/api/people/49/",
      "https://swapi.co/api/people/50/",
      "https://swapi.co/api/people/51/",
      "https://swapi.co/api/people/52/",
      "https://swapi.co/api/people/53/",
      "https://swapi.co/api/people/54/",
      "https://swapi.co/api/people/55/",
      "https://swapi.co/api/people/56/",
      "https://swapi.co/api/people/57/",
      "https://swapi.co/api/people/58/",
      "https://swapi.co/api/people/59/",
      "https://swapi.co/api/people/47/",
      "https://swapi.co/api/people/35/"
    ],
    "planets": [
      "https://swapi.co/api/planets/8/",
      "https://swapi.co/api/planets/9/",
      "https://swapi.co/api/planets/1/"
    ],
    "starships": [
      "https://swapi.co/api/starships/40/",
      "https://swapi.co/api/starships/41/",
      "https://swapi.co/api/starships/31/",
      "https://swapi.co/api/starships/32/",
      "https://swapi.co/api/starships/39/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/33/",
      "https://swapi.co/api/vehicles/34/",
      "https://swapi.co/api/vehicles/35/",
      "https://swapi.co/api/vehicles/36/",
      "https://swapi.co/api/vehicles/37/",
      "https://swapi.co/api/vehicles/38/",
      "https://swapi.co/api/vehicles/42/"
    ],
    "species": [
      "https://swapi.co/api/species/1/",
      "https://swapi.co/api/species/2/",
      "https://swapi.co/api/species/6/",
      "https://swapi.co/api/species/11/",
      "https://swapi.co/api/species/12/",
      "https://swapi.co/api/species/13/",
      "https://swapi.co/api/species/14/",
      "https://swapi.co/api/species/15/",
      "https://swapi.co/api/species/16/",
      "https://swapi.co/api/species/17/",
      "https://swapi.co/api/species/18/",
      "https://swapi.co/api/species/19/",
      "https://swapi.co/api/species/20/",
      "https://swapi.co/api/species/21/",
      "https://swapi.co/api/species/22/",
      "https://swapi.co/api/species/23/",
      "https://swapi.co/api/species/24/",
      "https://swapi.co/api/species/25/",
      "https://swapi.co/api/species/26/",
      "https://swapi.co/api/species/27/"
    ],
    "created": "2014-12-19T16:52:55.740000Z",
    "edited": "2015-04-11T09:45:18.689301Z",
    "url": "https://swapi.co/api/films/4/"
  },
  "https://swapi.co/api/films/6/": {
    "title": "Revenge of the Sith",
    "episode_id": 3,
    "opening_crawl": "War! The Republic is crumbling\r\nunder attacks by the ruthless\r\nSith Lord, Count Dooku.\r\nThere are heroes on both sides.\r\nEvil is everywhere.\r\n\r\nIn a stunning move, the\r\nfiendish droid leader, General\r\nGrievous, has swept into the\r\nRepublic capital and kidnapped\r\nChancellor Palpatine, leader of\r\nthe Galactic Senate.\r\n\r\nAs the Separatist Droid Army\r\nattempts to flee the besieged\r\ncapital with their valuable\r\nhostage, two Jedi Knights lead a\r\ndesperate mission to rescue the\r\ncaptive Chancellor....",
    "director": "George Lucas",
    "producer": "Rick McCallum",
    "release_date": "2005-05-19",
    "characters": [
      "https://swapi.co/api/people/1/",
      "https://swapi.co/api/people/2/",
      "https://swapi.co/api/people/3/",
      "https://swapi.co/api/people/4/",
      "https://swapi.co/api/people/5/",
      "https://swapi.co/api/people/6/",
      "https://swapi.co/api/people/7/",
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/11/",
      "https://swapi.co/api/people/12/",
      "https://swapi.co/api/people/13/",
      "https://swapi.co/api/people/20/",
      "https://swapi.co/api/people/21/",
      "https://swapi.co/api/people/33/",
      "https://swapi.co/api/people/46/",
      "https://swapi.co/api/people/51/",
      "https://swapi.co/api/people/52/",
      "https://swapi.co/api/people/53/",
      "https://swapi.co/api/people/54/",
      "https://swapi.co/api/people/55/",
      "https://swapi.co/api/people/56/",
      "https://swapi.co/api/people/58/",
      "https://swapi.co/api/people/63/",
      "https://swapi.co/api/people/64/",
      "https://swapi.co/api/people/67/",
      "https://swapi.co/api/people/68/",
      "https://swapi.co/api/people/75/",
      "https://swapi.co/api/people/78/",
      "https://swapi.co/api/people/79/",
      "https://swapi.co/api/people/80/",
      "https://swapi.co/api/people/81/",
      "https://swapi.co/api/people/82/",
      "https://swapi.co/api/people/83/",
      "https://swapi.co/api/people/35/"
    ],
    "planets": [
      "https://swapi.co/api/planets/2/",
      "https://swapi.co/api/planets/5/",
      "https://swapi.co/api/planets/8/",
      "https://swapi.co/api/planets/9/",
      "https://swapi.co/api/planets/12/",
      "https://swapi.co/api/planets/13/",
      "https://swapi.co/api/planets/14/",
      "https://swapi.co/api/planets/15/",
      "https://swapi.co/api/planets/16/",
      "https://swapi.co/api/planets/17/",
      "https://swapi.co/api/planets/18/",
      "https://swapi.co/api/planets/19/",
      "https://swapi.co/api/planets/1/"
    ],
    "starships": [
      "https://swapi.co/api/starships/48/",
      "https://swapi.co/api/starships/59/",
      "https://swapi.co/api/starships/61/",
      "https://swapi.co/api/starships/32/",
      "https://swapi.co/api/starships/63/",
      "https://swapi.co/api/starships/64/",
      "https://swapi.co/api/starships/65/",
      "https://swapi.co/api/starships/66/",
      "https://swapi.co/api/starships/74/",
      "https://swapi.co/api/starships/75/",
      "https://swapi.co/api/starships/2/",
      "https://swapi.co/api/starships/68/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/33/",
      "https://swapi.co/api/vehicles/50/",
      "https://swapi.co/api/vehicles/53/",
      "https://swapi.co/api/vehicles/56/",
      "https://swapi.co/api/vehicles/60/",
      "https://swapi.co/api/vehicles/62/",
      "https://swapi.co/api/vehicles/67/",
      "https://swapi.co/api/vehicles/69/",
      "https://swapi.co/api/vehicles/70/",
      "https://swapi.co/api/vehicles/71/",
      "https://swapi.co/api/vehicles/72/",
      "https://swapi.co/api/vehicles/73/",
      "https://swapi.co/api/vehicles/76/"
    ],
    "species": [
      "https://swapi.co/api/species/19/",
      "https://swapi.co/api/species/33/",
      "https://swapi.co/api/species/2/",
      "https://swapi.co/api/species/3/",
      "https://swapi.co/api/species/36/",
      "https://swapi.co/api/species/37/",
      "https://swapi.co/api/species/6/",
      "https://swapi.co/api/species/1/",
      "https://swapi.co/api/species/34/",
      "https://swapi.co/api/species/15/",
      "https://swapi.co/api/species/35/",
      "https://swapi.co/api/species/20/",
      "https://swapi.co/api/species/23/",
      "https://swapi.co/api/species/24/",
      "https://swapi.co/api/species/25/",
      "https://swapi.co/api/species/26/",
      "https://swapi.co/api/species/27/",
      "https://swapi.co/api/species/28/",
      "https://swapi.co/api/species/29/",
      "https://swapi.co/api/species/30/"
    ],
    "created": "2014-12-20T18:49:38.403000Z",
    "edited": "2015-04-11T09:45:44.862122Z",
    "url": "https://swapi.co/api/films/6/"
  },
  "https://swapi.co/api/films/3/": {
    "title": "Return of the Jedi",
    "episode_id": 6,
    "opening_crawl": "Luke Skywalker has returned to\r\nhis home planet of Tatooine in\r\nan attempt to rescue his\r\nfriend Han Solo from the\r\nclutches of the vile gangster\r\nJabba the Hutt.\r\n\r\nLittle does Luke know that the\r\nGALACTIC EMPIRE has secretly\r\nbegun construction on a new\r\narmored space station even\r\nmore powerful than the first\r\ndreaded Death Star.\r\n\r\nWhen completed, this ultimate\r\nweapon will spell certain doom\r\nfor the small band of rebels\r\nstruggling to restore freedom\r\nto the galaxy...",
    "director": "Richard Marquand",
    "producer": "Howard G. Kazanjian, George Lucas, Rick McCallum",
    "release_date": "1983-05-25",
    "characters": [
      "https://swapi.co/api/people/1/",
      "https://swapi.co/api/people/2/",
      "https://swapi.co/api/people/3/",
      "https://swapi.co/api/people/4/",
      "https://swapi.co/api/people/5/",
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/13/",
      "https://swapi.co/api/people/14/",
      "https://swapi.co/api/people/16/",
      "https://swapi.co/api/people/18/",
      "https://swapi.co/api/people/20/",
      "https://swapi.co/api/people/21/",
      "https://swapi.co/api/people/22/",
      "https://swapi.co/api/people/25/",
      "https://swapi.co/api/people/27/",
      "https://swapi.co/api/people/28/",
      "https://swapi.co/api/people/29/",
      "https://swapi.co/api/people/30/",
      "https://swapi.co/api/people/31/",
      "https://swapi.co/api/people/45/"
    ],
    "planets": [
      "https://swapi.co/api/planets/5/",
      "https://swapi.co/api/planets/7/",
      "https://swapi.co/api/planets/8/",
      "https://swapi.co/api/planets/9/",
      "https://swapi.co/api/planets/1/"
    ],
    "starships": [
      "https://swapi.co/api/starships/15/",
      "https://swapi.co/api/starships/10/",
      "https://swapi.co/api/starships/11/",
      "https://swapi.co/api/starships/12/",
      "https://swapi.co/api/starships/22/",
      "https://swapi.co/api/starships/23/",
      "https://swapi.co/api/starships/27/",
      "https://swapi.co/api/starships/28/",
      "https://swapi.co/api/starships/29/",
      "https://swapi.co/api/starships/3/",
      "https://swapi.co/api/starships/17/",
      "https://swapi.co/api/starships/2/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/8/",
      "https://swapi.co/api/vehicles/16/",
      "https://swapi.co/api/vehicles/18/",
      "https://swapi.co/api/vehicles/19/",
      "https://swapi.co/api/vehicles/24/",
      "https://swapi.co/api/vehicles/25/",
      "https://swapi.co/api/vehicles/26/",
      "https://swapi.co/api/vehicles/30/"
    ],
    "species": [
      "https://swapi.co/api/species/1/",
      "https://swapi.co/api/species/2/",
      "https://swapi.co/api/species/3/",
      "https://swapi.co/api/species/5/",
      "https://swapi.co/api/species/6/",
      "https://swapi.co/api/species/8/",
      "https://swapi.co/api/species/9/",
      "https://swapi.co/api/species/10/",
      "https://swapi.co/api/species/15/"
    ],
    "created": "2014-12-18T10:39:33.255000Z",
    "edited": "2015-04-11T09:46:05.220365Z",
    "url": "https://swapi.co/api/films/3/"
  },
  "https://swapi.co/api/films/2/": {
    "title": "The Empire Strikes Back",
    "episode_id": 5,
    "opening_crawl": "It is a dark time for the\r\nRebellion. Although the Death\r\nStar has been destroyed,\r\nImperial troops have driven the\r\nRebel forces from their hidden\r\nbase and pursued them across\r\nthe galaxy.\r\n\r\nEvading the dreaded Imperial\r\nStarfleet, a group of freedom\r\nfighters led by Luke Skywalker\r\nhas established a new secret\r\nbase on the remote ice world\r\nof Hoth.\r\n\r\nThe evil lord Darth Vader,\r\nobsessed with finding young\r\nSkywalker, has dispatched\r\nthousands of remote probes into\r\nthe far reaches of space....",
    "director": "Irvin Kershner",
    "producer": "Gary Kurtz, Rick McCallum",
    "release_date": "1980-05-17",
    "characters": [
      "https://swapi.co/api/people/1/",
      "https://swapi.co/api/people/2/",
      "https://swapi.co/api/people/3/",
      "https://swapi.co/api/people/4/",
      "https://swapi.co/api/people/5/",
      "https://swapi.co/api/people/10/",
      "https://swapi.co/api/people/13/",
      "https://swapi.co/api/people/14/",
      "https://swapi.co/api/people/18/",
      "https://swapi.co/api/people/20/",
      "https://swapi.co/api/people/21/",
      "https://swapi.co/api/people/22/",
      "https://swapi.co/api/people/23/",
      "https://swapi.co/api/people/24/",
      "https://swapi.co/api/people/25/",
      "https://swapi.co/api/people/26/"
    ],
    "planets": [
      "https://swapi.co/api/planets/4/",
      "https://swapi.co/api/planets/5/",
      "https://swapi.co/api/planets/6/",
      "https://swapi.co/api/planets/27/"
    ],
    "starships": [
      "https://swapi.co/api/starships/15/",
      "https://swapi.co/api/starships/10/",
      "https://swapi.co/api/starships/11/",
      "https://swapi.co/api/starships/12/",
      "https://swapi.co/api/starships/21/",
      "https://swapi.co/api/starships/22/",
      "https://swapi.co/api/starships/23/",
      "https://swapi.co/api/starships/3/",
      "https://swapi.co/api/starships/17/"
    ],
    "vehicles": [
      "https://swapi.co/api/vehicles/8/",
      "https://swapi.co/api/vehicles/14/",
      "https://swapi.co/api/vehicles/16/",
      "https://swapi.co/api/vehicles/18/",
      "https://swapi.co/api/vehicles/19/",
      "https://swapi.co/api/vehicles/20/"
    ],
    "species": [
      "https://swapi.co/api/species/6/",
      "https://swapi.co/api/species/7/",
      "https://swapi.co/api/species/3/",
      "https://swapi.co/api/species/2/",
      "https://swapi.co/api/species/1/"
    ],
    "created": "2014-12-12T11:26:24.656000Z",
    "edited": "2017-04-19T10:57:29.544256Z",
    "url": "https://swapi.co/api/films/2/"
  },
  "https://swapi.co/api/films/7/": {
    "title": "The Force Awakens",
    "episode_id": 7,
    "opening_crawl": "Luke Skywalker has vanished.\r\nIn his absence, the sinister\r\nFIRST ORDER has risen from\r\nthe ashes of the Empire\r\nand will not rest until\r\nSkywalker, the last Jedi,\r\nhas been destroyed.\r\n \r\nWith the support of the\r\nREPUBLIC, General Leia Organa\r\nleads a brave RESISTANCE.\r\nShe is desperate to find her\r\nbrother Luke and gain his\r\nhelp in restoring peace and\r\njustice to the galaxy.\r\n \r\nLeia has sent her most daring\r\npilot on a secret mission\r\nto Jakku, where an old ally\r\nhas discovered a clue to\r\nLuke's whereabouts....",
    "director": "J. J. Abrams",
    "producer": "Kathleen Kennedy, J. J. Abrams, Bryan Burk",
    "release_date": "2015-12-11",
    "characters": [
      "https://swapi.co/api/people/1/",
      "https://swapi.co/api/people/3/",
      "https://swapi.co/api/people/5/",
      "https://swapi.co/api/people/13/",
      "https://swapi.co/api/people/14/",
      "https://swapi.co/api/people/27/",
      "https://swapi.co/api/people/84/",
      "https://swapi.co/api/people/85/",
      "https://swapi.co/api/people/86/",
      "https://swapi.co/api/people/87/",
      "https://swapi.co/api/people/88/"
    ],
    "planets": [
      "https://swapi.co/api/planets/61/"
    ],
    "starships": [
      "https://swapi.co/api/starships/77/",
      "https://swapi.co/api/starships/10/"
    ],
    "vehicles": [],
    "species": [
      "https://swapi.co/api/species/3/",
      "https://swapi.co/api/species/2/",
      "https://swapi.co/api/species/1/"
    ],
    "created": "2015-04-17T06:51:30.504780Z",
    "edited": "2015-12-17T14:31:47.617768Z",
    "url": "https://swapi.co/api/films/7/"
  }
}
},{}],2:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":13}],3:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":14}],4:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":15}],5:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _promise = require("../core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};
},{"../core-js/promise":4}],6:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};
},{"../core-js/object/define-property":3}],7:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _assign = require("../core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};
},{"../core-js/object/assign":2}],8:[function(require,module,exports){
// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = require("./runtime");

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}

},{"./runtime":9}],9:[function(require,module,exports){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);

},{}],10:[function(require,module,exports){
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":8}],11:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],12:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (value instanceof ArrayBuffer) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || string instanceof ArrayBuffer) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":11,"ieee754":192}],13:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;
},{"../../modules/_core":23,"../../modules/es6.object.assign":78}],14:[function(require,module,exports){
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};
},{"../../modules/_core":23,"../../modules/es6.object.define-property":79}],15:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
module.exports = require('../modules/_core').Promise;
},{"../modules/_core":23,"../modules/es6.object.to-string":80,"../modules/es6.promise":81,"../modules/es6.string.iterator":82,"../modules/web.dom.iterable":83}],16:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],17:[function(require,module,exports){
module.exports = function(){ /* empty */ };
},{}],18:[function(require,module,exports){
module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};
},{}],19:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":40}],20:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":68,"./_to-iobject":70,"./_to-length":71}],21:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof')
  , TAG = require('./_wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./_cof":22,"./_wks":75}],22:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],23:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],24:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":16}],25:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],26:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":30}],27:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":32,"./_is-object":40}],28:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],29:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , ctx       = require('./_ctx')
  , hide      = require('./_hide')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":23,"./_ctx":24,"./_global":32,"./_hide":34}],30:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],31:[function(require,module,exports){
var ctx         = require('./_ctx')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , anObject    = require('./_an-object')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method')
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;
},{"./_an-object":19,"./_ctx":24,"./_is-array-iter":39,"./_iter-call":41,"./_to-length":71,"./core.get-iterator-method":76}],32:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],33:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],34:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":26,"./_object-dp":51,"./_property-desc":58}],35:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":32}],36:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":26,"./_dom-create":27,"./_fails":30}],37:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],38:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":22}],39:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./_iterators')
  , ITERATOR   = require('./_wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./_iterators":46,"./_wks":75}],40:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],41:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./_an-object":19}],42:[function(require,module,exports){
'use strict';
var create         = require('./_object-create')
  , descriptor     = require('./_property-desc')
  , setToStringTag = require('./_set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./_hide":34,"./_object-create":50,"./_property-desc":58,"./_set-to-string-tag":62,"./_wks":75}],43:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./_library')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , hide           = require('./_hide')
  , has            = require('./_has')
  , Iterators      = require('./_iterators')
  , $iterCreate    = require('./_iter-create')
  , setToStringTag = require('./_set-to-string-tag')
  , getPrototypeOf = require('./_object-gpo')
  , ITERATOR       = require('./_wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./_export":29,"./_has":33,"./_hide":34,"./_iter-create":42,"./_iterators":46,"./_library":47,"./_object-gpo":54,"./_redefine":60,"./_set-to-string-tag":62,"./_wks":75}],44:[function(require,module,exports){
var ITERATOR     = require('./_wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./_wks":75}],45:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],46:[function(require,module,exports){
module.exports = {};
},{}],47:[function(require,module,exports){
module.exports = true;
},{}],48:[function(require,module,exports){
var global    = require('./_global')
  , macrotask = require('./_task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = require('./_cof')(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};
},{"./_cof":22,"./_global":32,"./_task":67}],49:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = require('./_object-keys')
  , gOPS     = require('./_object-gops')
  , pIE      = require('./_object-pie')
  , toObject = require('./_to-object')
  , IObject  = require('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":30,"./_iobject":38,"./_object-gops":53,"./_object-keys":56,"./_object-pie":57,"./_to-object":72}],50:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":19,"./_dom-create":27,"./_enum-bug-keys":28,"./_html":35,"./_object-dps":52,"./_shared-key":63}],51:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":19,"./_descriptors":26,"./_ie8-dom-define":36,"./_to-primitive":73}],52:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":19,"./_descriptors":26,"./_object-dp":51,"./_object-keys":56}],53:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],54:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = require('./_has')
  , toObject    = require('./_to-object')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};
},{"./_has":33,"./_shared-key":63,"./_to-object":72}],55:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":20,"./_has":33,"./_shared-key":63,"./_to-iobject":70}],56:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":28,"./_object-keys-internal":55}],57:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],58:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],59:[function(require,module,exports){
var hide = require('./_hide');
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};
},{"./_hide":34}],60:[function(require,module,exports){
module.exports = require('./_hide');
},{"./_hide":34}],61:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , core        = require('./_core')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_core":23,"./_descriptors":26,"./_global":32,"./_object-dp":51,"./_wks":75}],62:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":33,"./_object-dp":51,"./_wks":75}],63:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":64,"./_uid":74}],64:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":32}],65:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./_an-object')
  , aFunction = require('./_a-function')
  , SPECIES   = require('./_wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./_a-function":16,"./_an-object":19,"./_wks":75}],66:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./_defined":25,"./_to-integer":69}],67:[function(require,module,exports){
var ctx                = require('./_ctx')
  , invoke             = require('./_invoke')
  , html               = require('./_html')
  , cel                = require('./_dom-create')
  , global             = require('./_global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./_cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./_cof":22,"./_ctx":24,"./_dom-create":27,"./_global":32,"./_html":35,"./_invoke":37}],68:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":69}],69:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],70:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":25,"./_iobject":38}],71:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":69}],72:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":25}],73:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":40}],74:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],75:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
},{"./_global":32,"./_shared":64,"./_uid":74}],76:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./_classof":21,"./_core":23,"./_iterators":46,"./_wks":75}],77:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables')
  , step             = require('./_iter-step')
  , Iterators        = require('./_iterators')
  , toIObject        = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./_add-to-unscopables":17,"./_iter-define":43,"./_iter-step":45,"./_iterators":46,"./_to-iobject":70}],78:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});
},{"./_export":29,"./_object-assign":49}],79:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":26,"./_export":29,"./_object-dp":51}],80:[function(require,module,exports){

},{}],81:[function(require,module,exports){
'use strict';
var LIBRARY            = require('./_library')
  , global             = require('./_global')
  , ctx                = require('./_ctx')
  , classof            = require('./_classof')
  , $export            = require('./_export')
  , isObject           = require('./_is-object')
  , aFunction          = require('./_a-function')
  , anInstance         = require('./_an-instance')
  , forOf              = require('./_for-of')
  , speciesConstructor = require('./_species-constructor')
  , task               = require('./_task').set
  , microtask          = require('./_microtask')()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});
},{"./_a-function":16,"./_an-instance":18,"./_classof":21,"./_core":23,"./_ctx":24,"./_export":29,"./_for-of":31,"./_global":32,"./_is-object":40,"./_iter-detect":44,"./_library":47,"./_microtask":48,"./_redefine-all":59,"./_set-species":61,"./_set-to-string-tag":62,"./_species-constructor":65,"./_task":67,"./_wks":75}],82:[function(require,module,exports){
'use strict';
var $at  = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./_iter-define":43,"./_string-at":66}],83:[function(require,module,exports){
require('./es6.array.iterator');
var global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , TO_STRING_TAG = require('./_wks')('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}
},{"./_global":32,"./_hide":34,"./_iterators":46,"./_wks":75,"./es6.array.iterator":77}],84:[function(require,module,exports){
(function (process){
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A `DataLoader` creates a public API for loading data from a particular
 * data back-end with unique keys such as the `id` column of a SQL table or
 * document name in a MongoDB database, given a batch loading function.
 *
 * Each `DataLoader` instance contains a unique memoized cache. Use caution when
 * used in long-lived applications or those which serve many users with
 * different access permissions and consider creating a new instance per
 * web request.
 */


// Optionally turn off batching or caching or provide a cache key function or a
// custom cache instance.
var DataLoader = function () {
  function DataLoader(batchLoadFn, options) {
    _classCallCheck(this, DataLoader);

    if (typeof batchLoadFn !== 'function') {
      throw new TypeError('DataLoader must be constructed with a function which accepts ' + ('Array<key> and returns Promise<Array<value>>, but got: ' + batchLoadFn + '.'));
    }
    this._batchLoadFn = batchLoadFn;
    this._options = options;
    this._promiseCache = getValidCacheMap(options);
    this._queue = [];
  }

  // Private


  /**
   * Loads a key, returning a `Promise` for the value represented by that key.
   */
  DataLoader.prototype.load = function load(key) {
    var _this = this;

    if (key === null || key === undefined) {
      throw new TypeError('The loader.load() function must be called with a value,' + ('but got: ' + String(key) + '.'));
    }

    // Determine options
    var options = this._options;
    var shouldBatch = !options || options.batch !== false;
    var shouldCache = !options || options.cache !== false;
    var cacheKeyFn = options && options.cacheKeyFn;
    var cacheKey = cacheKeyFn ? cacheKeyFn(key) : key;

    // If caching and there is a cache-hit, return cached Promise.
    if (shouldCache) {
      var cachedPromise = this._promiseCache.get(cacheKey);
      if (cachedPromise) {
        return cachedPromise;
      }
    }

    // Otherwise, produce a new Promise for this value.
    var promise = new Promise(function (resolve, reject) {
      // Enqueue this Promise to be dispatched.
      _this._queue.push({ key: key, resolve: resolve, reject: reject });

      // Determine if a dispatch of this queue should be scheduled.
      // A single dispatch should be scheduled per queue at the time when the
      // queue changes from "empty" to "full".
      if (_this._queue.length === 1) {
        if (shouldBatch) {
          // If batching, schedule a task to dispatch the queue.
          enqueuePostPromiseJob(function () {
            return dispatchQueue(_this);
          });
        } else {
          // Otherwise dispatch the (queue of one) immediately.
          dispatchQueue(_this);
        }
      }
    });

    // If caching, cache this promise.
    if (shouldCache) {
      this._promiseCache.set(cacheKey, promise);
    }

    return promise;
  };

  /**
   * Loads multiple keys, promising an array of values:
   *
   *     var [ a, b ] = await myLoader.loadMany([ 'a', 'b' ]);
   *
   * This is equivalent to the more verbose:
   *
   *     var [ a, b ] = await Promise.all([
   *       myLoader.load('a'),
   *       myLoader.load('b')
   *     ]);
   *
   */


  DataLoader.prototype.loadMany = function loadMany(keys) {
    var _this2 = this;

    if (!Array.isArray(keys)) {
      throw new TypeError('The loader.loadMany() function must be called with Array<key> ' + ('but got: ' + keys + '.'));
    }
    return Promise.all(keys.map(function (key) {
      return _this2.load(key);
    }));
  };

  /**
   * Clears the value at `key` from the cache, if it exists. Returns itself for
   * method chaining.
   */


  DataLoader.prototype.clear = function clear(key) {
    var cacheKeyFn = this._options && this._options.cacheKeyFn;
    var cacheKey = cacheKeyFn ? cacheKeyFn(key) : key;
    this._promiseCache.delete(cacheKey);
    return this;
  };

  /**
   * Clears the entire cache. To be used when some event results in unknown
   * invalidations across this particular `DataLoader`. Returns itself for
   * method chaining.
   */


  DataLoader.prototype.clearAll = function clearAll() {
    this._promiseCache.clear();
    return this;
  };

  /**
   * Adds the provided key and value to the cache. If the key already
   * exists, no change is made. Returns itself for method chaining.
   */


  DataLoader.prototype.prime = function prime(key, value) {
    var cacheKeyFn = this._options && this._options.cacheKeyFn;
    var cacheKey = cacheKeyFn ? cacheKeyFn(key) : key;

    // Only add the key if it does not already exist.
    if (this._promiseCache.get(cacheKey) === undefined) {
      // Cache a rejected promise if the value is an Error, in order to match
      // the behavior of load(key).
      var promise = value instanceof Error ? Promise.reject(value) : Promise.resolve(value);

      this._promiseCache.set(cacheKey, promise);
    }

    return this;
  };

  return DataLoader;
}();

// Private: Enqueue a Job to be executed after all "PromiseJobs" Jobs.
//
// ES6 JavaScript uses the concepts Job and JobQueue to schedule work to occur
// after the current execution context has completed:
// http://www.ecma-international.org/ecma-262/6.0/#sec-jobs-and-job-queues
//
// Node.js uses the `process.nextTick` mechanism to implement the concept of a
// Job, maintaining a global FIFO JobQueue for all Jobs, which is flushed after
// the current call stack ends.
//
// When calling `then` on a Promise, it enqueues a Job on a specific
// "PromiseJobs" JobQueue which is flushed in Node as a single Job on the
// global JobQueue.
//
// DataLoader batches all loads which occur in a single frame of execution, but
// should include in the batch all loads which occur during the flushing of the
// "PromiseJobs" JobQueue after that same execution frame.
//
// In order to avoid the DataLoader dispatch Job occuring before "PromiseJobs",
// A Promise Job is created with the sole purpose of enqueuing a global Job,
// ensuring that it always occurs after "PromiseJobs" ends.
//
// Node.js's job queue is unique. Browsers do not have an equivalent mechanism
// for enqueuing a job to be performed after promise microtasks and before the
// next macrotask. For browser environments, a macrotask is used (via
// setImmediate or setTimeout) at a potential performance penalty.


// If a custom cache is provided, it must be of this type (a subset of ES6 Map).

/**
 *  Copyright (c) 2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 */

// A Function, which when given an Array of keys, returns a Promise of an Array
// of values or Errors.


var enqueuePostPromiseJob = typeof process === 'object' && typeof process.nextTick === 'function' ? function (fn) {
  if (!resolvedPromise) {
    resolvedPromise = Promise.resolve();
  }
  resolvedPromise.then(function () {
    return process.nextTick(fn);
  });
} : setImmediate || setTimeout;

// Private: cached resolved Promise instance
var resolvedPromise;

// Private: given the current state of a Loader instance, perform a batch load
// from its current queue.
function dispatchQueue(loader) {
  // Take the current loader queue, replacing it with an empty queue.
  var queue = loader._queue;
  loader._queue = [];

  // If a maxBatchSize was provided and the queue is longer, then segment the
  // queue into multiple batches, otherwise treat the queue as a single batch.
  var maxBatchSize = loader._options && loader._options.maxBatchSize;
  if (maxBatchSize && maxBatchSize > 0 && maxBatchSize < queue.length) {
    for (var i = 0; i < queue.length / maxBatchSize; i++) {
      dispatchQueueBatch(loader, queue.slice(i * maxBatchSize, (i + 1) * maxBatchSize));
    }
  } else {
    dispatchQueueBatch(loader, queue);
  }
}

function dispatchQueueBatch(loader, queue) {
  // Collect all keys to be loaded in this dispatch
  var keys = queue.map(function (_ref) {
    var key = _ref.key;
    return key;
  });

  // Call the provided batchLoadFn for this loader with the loader queue's keys.
  var batchLoadFn = loader._batchLoadFn;
  var batchPromise = batchLoadFn(keys);

  // Assert the expected response from batchLoadFn
  if (!batchPromise || typeof batchPromise.then !== 'function') {
    return failedDispatch(loader, queue, new TypeError('DataLoader must be constructed with a function which accepts ' + 'Array<key> and returns Promise<Array<value>>, but the function did ' + ('not return a Promise: ' + String(batchPromise) + '.')));
  }

  // Await the resolution of the call to batchLoadFn.
  batchPromise.then(function (values) {

    // Assert the expected resolution from batchLoadFn.
    if (!Array.isArray(values)) {
      throw new TypeError('DataLoader must be constructed with a function which accepts ' + 'Array<key> and returns Promise<Array<value>>, but the function did ' + ('not return a Promise of an Array: ' + String(values) + '.'));
    }
    if (values.length !== keys.length) {
      throw new TypeError('DataLoader must be constructed with a function which accepts ' + 'Array<key> and returns Promise<Array<value>>, but the function did ' + 'not return a Promise of an Array of the same length as the Array ' + 'of keys.' + ('\n\nKeys:\n' + String(keys)) + ('\n\nValues:\n' + String(values)));
    }

    // Step through the values, resolving or rejecting each Promise in the
    // loaded queue.
    queue.forEach(function (_ref2, index) {
      var resolve = _ref2.resolve,
          reject = _ref2.reject;

      var value = values[index];
      if (value instanceof Error) {
        reject(value);
      } else {
        resolve(value);
      }
    });
  }).catch(function (error) {
    return failedDispatch(loader, queue, error);
  });
}

// Private: do not cache individual loads if the entire batch dispatch fails,
// but still reject each request so they do not hang.
function failedDispatch(loader, queue, error) {
  queue.forEach(function (_ref3) {
    var key = _ref3.key,
        reject = _ref3.reject;

    loader.clear(key);
    reject(error);
  });
}

// Private: given the DataLoader's options, produce a CacheMap to be used.
function getValidCacheMap(options) {
  var cacheMap = options && options.cacheMap;
  if (!cacheMap) {
    return new Map();
  }
  var cacheFunctions = ['get', 'set', 'delete', 'clear'];
  var missingFunctions = cacheFunctions.filter(function (fnName) {
    return cacheMap && typeof cacheMap[fnName] !== 'function';
  });
  if (missingFunctions.length !== 0) {
    throw new TypeError('Custom cacheMap missing methods: ' + missingFunctions.join(', '));
  }
  return cacheMap;
}

// Private


module.exports = DataLoader;
}).call(this,require('_process'))
},{"_process":194}],85:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectionFromArray = connectionFromArray;
exports.connectionFromPromisedArray = connectionFromPromisedArray;
exports.connectionFromArraySlice = connectionFromArraySlice;
exports.connectionFromPromisedArraySlice = connectionFromPromisedArraySlice;
exports.offsetToCursor = offsetToCursor;
exports.cursorToOffset = cursorToOffset;
exports.cursorForObjectInConnection = cursorForObjectInConnection;
exports.getOffsetWithDefault = getOffsetWithDefault;

var _base = require('../utils/base64.js');

/**
 * A simple function that accepts an array and connection arguments, and returns
 * a connection object for use in GraphQL. It uses array offsets as pagination,
 * so pagination will only work if the array is static.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function connectionFromArray(data, args) {
  return connectionFromArraySlice(data, args, {
    sliceStart: 0,
    arrayLength: data.length
  });
}

/**
 * A version of `connectionFromArray` that takes a promised array, and returns a
 * promised connection.
 */
function connectionFromPromisedArray(dataPromise, args) {
  return dataPromise.then(function (data) {
    return connectionFromArray(data, args);
  });
}

/**
 * Given a slice (subset) of an array, returns a connection object for use in
 * GraphQL.
 *
 * This function is similar to `connectionFromArray`, but is intended for use
 * cases where you know the cardinality of the connection, consider it too large
 * to materialize the entire array, and instead wish pass in a slice of the
 * total result large enough to cover the range specified in `args`.
 */
function connectionFromArraySlice(arraySlice, args, meta) {
  var after = args.after,
      before = args.before,
      first = args.first,
      last = args.last;
  var sliceStart = meta.sliceStart,
      arrayLength = meta.arrayLength;

  var sliceEnd = sliceStart + arraySlice.length;
  var beforeOffset = getOffsetWithDefault(before, arrayLength);
  var afterOffset = getOffsetWithDefault(after, -1);

  var startOffset = Math.max(sliceStart - 1, afterOffset, -1) + 1;
  var endOffset = Math.min(sliceEnd, beforeOffset, arrayLength);
  if (typeof first === 'number') {
    if (first < 0) {
      throw new Error('Argument "first" must be a non-negative integer');
    }

    endOffset = Math.min(endOffset, startOffset + first);
  }
  if (typeof last === 'number') {
    if (last < 0) {
      throw new Error('Argument "last" must be a non-negative integer');
    }

    startOffset = Math.max(startOffset, endOffset - last);
  }

  // If supplied slice is too large, trim it down before mapping over it.
  var slice = arraySlice.slice(Math.max(startOffset - sliceStart, 0), arraySlice.length - (sliceEnd - endOffset));

  var edges = slice.map(function (value, index) {
    return {
      cursor: offsetToCursor(startOffset + index),
      node: value
    };
  });

  var firstEdge = edges[0];
  var lastEdge = edges[edges.length - 1];
  var lowerBound = after ? afterOffset + 1 : 0;
  var upperBound = before ? beforeOffset : arrayLength;
  return {
    edges: edges,
    pageInfo: {
      startCursor: firstEdge ? firstEdge.cursor : null,
      endCursor: lastEdge ? lastEdge.cursor : null,
      hasPreviousPage: typeof last === 'number' ? startOffset > lowerBound : false,
      hasNextPage: typeof first === 'number' ? endOffset < upperBound : false
    }
  };
}

/**
 * A version of `connectionFromArraySlice` that takes a promised array slice,
 * and returns a promised connection.
 */
function connectionFromPromisedArraySlice(dataPromise, args, arrayInfo) {
  return dataPromise.then(function (data) {
    return connectionFromArraySlice(data, args, arrayInfo);
  });
}

var PREFIX = 'arrayconnection:';

/**
 * Creates the cursor string from an offset.
 */
function offsetToCursor(offset) {
  return (0, _base.base64)(PREFIX + offset);
}

/**
 * Rederives the offset from the cursor string.
 */
function cursorToOffset(cursor) {
  return parseInt((0, _base.unbase64)(cursor).substring(PREFIX.length), 10);
}

/**
 * Return the cursor associated with an object in an array.
 */
function cursorForObjectInConnection(data, object) {
  var offset = data.indexOf(object);
  if (offset === -1) {
    return null;
  }
  return offsetToCursor(offset);
}

/**
 * Given an optional cursor and a default offset, returns the offset
 * to use; if the cursor contains a valid offset, that will be used,
 * otherwise it will be the default.
 */
function getOffsetWithDefault(cursor, defaultOffset) {
  if (typeof cursor !== 'string') {
    return defaultOffset;
  }
  var offset = cursorToOffset(cursor);
  return isNaN(offset) ? defaultOffset : offset;
}
},{"../utils/base64.js":91}],86:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectionArgs = exports.backwardConnectionArgs = exports.forwardConnectionArgs = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * 
                                                                                                                                                                                                                                                                   */

exports.connectionDefinitions = connectionDefinitions;

var _graphql = require('graphql');

/**
 * Returns a GraphQLFieldConfigArgumentMap appropriate to include on a field
 * whose return type is a connection type with forward pagination.
 */
var forwardConnectionArgs = exports.forwardConnectionArgs = {
  after: {
    type: _graphql.GraphQLString
  },
  first: {
    type: _graphql.GraphQLInt
  }
};

/**
 * Returns a GraphQLFieldConfigArgumentMap appropriate to include on a field
 * whose return type is a connection type with backward pagination.
 */
var backwardConnectionArgs = exports.backwardConnectionArgs = {
  before: {
    type: _graphql.GraphQLString
  },
  last: {
    type: _graphql.GraphQLInt
  }
};

/**
 * Returns a GraphQLFieldConfigArgumentMap appropriate to include on a field
 * whose return type is a connection type with bidirectional pagination.
 */
var connectionArgs = exports.connectionArgs = _extends({}, forwardConnectionArgs, backwardConnectionArgs);

function resolveMaybeThunk(thingOrThunk) {
  return typeof thingOrThunk === 'function' ? thingOrThunk() : thingOrThunk;
}

/**
 * Returns a GraphQLObjectType for a connection with the given name,
 * and whose nodes are of the specified type.
 */
function connectionDefinitions(config) {
  var nodeType = config.nodeType;

  var name = config.name || nodeType.name;
  var edgeFields = config.edgeFields || {};
  var connectionFields = config.connectionFields || {};
  var resolveNode = config.resolveNode;
  var resolveCursor = config.resolveCursor;
  var edgeType = new _graphql.GraphQLObjectType({
    name: name + 'Edge',
    description: 'An edge in a connection.',
    fields: function fields() {
      return _extends({
        node: {
          type: nodeType,
          resolve: resolveNode,
          description: 'The item at the end of the edge'
        },
        cursor: {
          type: new _graphql.GraphQLNonNull(_graphql.GraphQLString),
          resolve: resolveCursor,
          description: 'A cursor for use in pagination'
        }
      }, resolveMaybeThunk(edgeFields));
    }
  });

  var connectionType = new _graphql.GraphQLObjectType({
    name: name + 'Connection',
    description: 'A connection to a list of items.',
    fields: function fields() {
      return _extends({
        pageInfo: {
          type: new _graphql.GraphQLNonNull(pageInfoType),
          description: 'Information to aid in pagination.'
        },
        edges: {
          type: new _graphql.GraphQLList(edgeType),
          description: 'A list of edges.'
        }
      }, resolveMaybeThunk(connectionFields));
    }
  });

  return { edgeType: edgeType, connectionType: connectionType };
}

/**
 * The common page info type used by all connections.
 */
var pageInfoType = new _graphql.GraphQLObjectType({
  name: 'PageInfo',
  description: 'Information about pagination in a connection.',
  fields: function fields() {
    return {
      hasNextPage: {
        type: new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean),
        description: 'When paginating forwards, are there more items?'
      },
      hasPreviousPage: {
        type: new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean),
        description: 'When paginating backwards, are there more items?'
      },
      startCursor: {
        type: _graphql.GraphQLString,
        description: 'When paginating backwards, the cursor to continue.'
      },
      endCursor: {
        type: _graphql.GraphQLString,
        description: 'When paginating forwards, the cursor to continue.'
      }
    };
  }
});
},{"graphql":102}],87:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _connection = require('./connection/connection.js');

Object.defineProperty(exports, 'backwardConnectionArgs', {
  enumerable: true,
  get: function get() {
    return _connection.backwardConnectionArgs;
  }
});
Object.defineProperty(exports, 'connectionArgs', {
  enumerable: true,
  get: function get() {
    return _connection.connectionArgs;
  }
});
Object.defineProperty(exports, 'connectionDefinitions', {
  enumerable: true,
  get: function get() {
    return _connection.connectionDefinitions;
  }
});
Object.defineProperty(exports, 'forwardConnectionArgs', {
  enumerable: true,
  get: function get() {
    return _connection.forwardConnectionArgs;
  }
});

var _arrayconnection = require('./connection/arrayconnection.js');

Object.defineProperty(exports, 'connectionFromArray', {
  enumerable: true,
  get: function get() {
    return _arrayconnection.connectionFromArray;
  }
});
Object.defineProperty(exports, 'connectionFromArraySlice', {
  enumerable: true,
  get: function get() {
    return _arrayconnection.connectionFromArraySlice;
  }
});
Object.defineProperty(exports, 'connectionFromPromisedArray', {
  enumerable: true,
  get: function get() {
    return _arrayconnection.connectionFromPromisedArray;
  }
});
Object.defineProperty(exports, 'connectionFromPromisedArraySlice', {
  enumerable: true,
  get: function get() {
    return _arrayconnection.connectionFromPromisedArraySlice;
  }
});
Object.defineProperty(exports, 'cursorForObjectInConnection', {
  enumerable: true,
  get: function get() {
    return _arrayconnection.cursorForObjectInConnection;
  }
});
Object.defineProperty(exports, 'cursorToOffset', {
  enumerable: true,
  get: function get() {
    return _arrayconnection.cursorToOffset;
  }
});
Object.defineProperty(exports, 'getOffsetWithDefault', {
  enumerable: true,
  get: function get() {
    return _arrayconnection.getOffsetWithDefault;
  }
});
Object.defineProperty(exports, 'offsetToCursor', {
  enumerable: true,
  get: function get() {
    return _arrayconnection.offsetToCursor;
  }
});

var _mutation = require('./mutation/mutation.js');

Object.defineProperty(exports, 'mutationWithClientMutationId', {
  enumerable: true,
  get: function get() {
    return _mutation.mutationWithClientMutationId;
  }
});

var _node = require('./node/node.js');

Object.defineProperty(exports, 'nodeDefinitions', {
  enumerable: true,
  get: function get() {
    return _node.nodeDefinitions;
  }
});

var _plural = require('./node/plural.js');

Object.defineProperty(exports, 'pluralIdentifyingRootField', {
  enumerable: true,
  get: function get() {
    return _plural.pluralIdentifyingRootField;
  }
});
Object.defineProperty(exports, 'fromGlobalId', {
  enumerable: true,
  get: function get() {
    return _node.fromGlobalId;
  }
});
Object.defineProperty(exports, 'globalIdField', {
  enumerable: true,
  get: function get() {
    return _node.globalIdField;
  }
});
Object.defineProperty(exports, 'toGlobalId', {
  enumerable: true,
  get: function get() {
    return _node.toGlobalId;
  }
});
},{"./connection/arrayconnection.js":85,"./connection/connection.js":86,"./mutation/mutation.js":88,"./node/node.js":89,"./node/plural.js":90}],88:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * 
                                                                                                                                                                                                                                                                   */

exports.mutationWithClientMutationId = mutationWithClientMutationId;

var _graphql = require('graphql');

function resolveMaybeThunk(thingOrThunk) {
  return typeof thingOrThunk === 'function' ? thingOrThunk() : thingOrThunk;
}

/**
 * A description of a mutation consumable by mutationWithClientMutationId
 * to create a GraphQLFieldConfig for that mutation.
 *
 * The inputFields and outputFields should not include `clientMutationId`,
 * as this will be provided automatically.
 *
 * An input object will be created containing the input fields, and an
 * object will be created containing the output fields.
 *
 * mutateAndGetPayload will receive an Object with a key for each
 * input field, and it should return an Object with a key for each
 * output field. It may return synchronously, or return a Promise.
 */


/**
 * Returns a GraphQLFieldConfig for the mutation described by the
 * provided MutationConfig.
 */
function mutationWithClientMutationId(config) {
  var name = config.name,
      description = config.description,
      deprecationReason = config.deprecationReason,
      inputFields = config.inputFields,
      outputFields = config.outputFields,
      mutateAndGetPayload = config.mutateAndGetPayload;

  var augmentedInputFields = function augmentedInputFields() {
    return _extends({}, resolveMaybeThunk(inputFields), {
      clientMutationId: {
        type: _graphql.GraphQLString
      }
    });
  };
  var augmentedOutputFields = function augmentedOutputFields() {
    return _extends({}, resolveMaybeThunk(outputFields), {
      clientMutationId: {
        type: _graphql.GraphQLString
      }
    });
  };

  var outputType = new _graphql.GraphQLObjectType({
    name: name + 'Payload',
    fields: augmentedOutputFields
  });

  var inputType = new _graphql.GraphQLInputObjectType({
    name: name + 'Input',
    fields: augmentedInputFields
  });

  return {
    type: outputType,
    description: description,
    deprecationReason: deprecationReason,
    args: {
      input: { type: new _graphql.GraphQLNonNull(inputType) }
    },
    resolve: function resolve(_, _ref, context, info) {
      var input = _ref.input;

      return Promise.resolve(mutateAndGetPayload(input, context, info)).then(function (payload) {
        payload.clientMutationId = input.clientMutationId;
        return payload;
      });
    }
  };
}
},{"graphql":102}],89:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nodeDefinitions = nodeDefinitions;
exports.toGlobalId = toGlobalId;
exports.fromGlobalId = fromGlobalId;
exports.globalIdField = globalIdField;

var _graphql = require('graphql');

var _base = require('../utils/base64.js');

/**
 * Given a function to map from an ID to an underlying object, and a function
 * to map from an underlying object to the concrete GraphQLObjectType it
 * corresponds to, constructs a `Node` interface that objects can implement,
 * and a field config for a `node` root field.
 *
 * If the typeResolver is omitted, object resolution on the interface will be
 * handled with the `isTypeOf` method on object types, as with any GraphQL
 * interface without a provided `resolveType` method.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function nodeDefinitions(idFetcher, typeResolver) {
  var nodeInterface = new _graphql.GraphQLInterfaceType({
    name: 'Node',
    description: 'An object with an ID',
    fields: function fields() {
      return {
        id: {
          type: new _graphql.GraphQLNonNull(_graphql.GraphQLID),
          description: 'The id of the object.'
        }
      };
    },
    resolveType: typeResolver
  });

  var nodeField = {
    name: 'node',
    description: 'Fetches an object given its ID',
    type: nodeInterface,
    args: {
      id: {
        type: new _graphql.GraphQLNonNull(_graphql.GraphQLID),
        description: 'The ID of an object'
      }
    },
    resolve: function resolve(obj, _ref, context, info) {
      var id = _ref.id;
      return idFetcher(id, context, info);
    }
  };

  var nodesField = {
    name: 'nodes',
    description: 'Fetches objects given their IDs',
    type: new _graphql.GraphQLNonNull(new _graphql.GraphQLList(nodeInterface)),
    args: {
      ids: {
        type: new _graphql.GraphQLNonNull(new _graphql.GraphQLList(new _graphql.GraphQLNonNull(_graphql.GraphQLID))),
        description: 'The IDs of objects'
      }
    },
    resolve: function resolve(obj, _ref2, context, info) {
      var ids = _ref2.ids;
      return Promise.all(ids.map(function (id) {
        return Promise.resolve(idFetcher(id, context, info));
      }));
    }
  };

  return { nodeInterface: nodeInterface, nodeField: nodeField, nodesField: nodesField };
}

/**
 * Takes a type name and an ID specific to that type name, and returns a
 * "global ID" that is unique among all types.
 */
function toGlobalId(type, id) {
  return (0, _base.base64)([type, id].join(':'));
}

/**
 * Takes the "global ID" created by toGlobalID, and returns the type name and ID
 * used to create it.
 */
function fromGlobalId(globalId) {
  var unbasedGlobalId = (0, _base.unbase64)(globalId);
  var delimiterPos = unbasedGlobalId.indexOf(':');
  return {
    type: unbasedGlobalId.substring(0, delimiterPos),
    id: unbasedGlobalId.substring(delimiterPos + 1)
  };
}

/**
 * Creates the configuration for an id field on a node, using `toGlobalId` to
 * construct the ID from the provided typename. The type-specific ID is fetched
 * by calling idFetcher on the object, or if not provided, by accessing the `id`
 * property on the object.
 */
function globalIdField(typeName, idFetcher) {
  return {
    name: 'id',
    description: 'The ID of an object',
    type: new _graphql.GraphQLNonNull(_graphql.GraphQLID),
    resolve: function resolve(obj, args, context, info) {
      return toGlobalId(typeName || info.parentType.name, idFetcher ? idFetcher(obj, context, info) : obj.id);
    }
  };
}
},{"../utils/base64.js":91,"graphql":102}],90:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pluralIdentifyingRootField = pluralIdentifyingRootField;

var _graphql = require('graphql');

function pluralIdentifyingRootField(config) {
  var inputArgs = {};
  var inputType = config.inputType;
  if (inputType instanceof _graphql.GraphQLNonNull) {
    inputType = inputType.ofType;
  }
  inputArgs[config.argName] = {
    type: new _graphql.GraphQLNonNull(new _graphql.GraphQLList(new _graphql.GraphQLNonNull(inputType)))
  };
  return {
    description: config.description,
    type: new _graphql.GraphQLList(config.outputType),
    args: inputArgs,
    resolve: function resolve(obj, args, context, info) {
      var inputs = args[config.argName];
      return Promise.all(inputs.map(function (input) {
        return Promise.resolve(config.resolveSingleInput(input, context, info));
      }));
    }
  };
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
},{"graphql":102}],91:[function(require,module,exports){
(function (Buffer){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.base64 = base64;
exports.unbase64 = unbase64;
function base64(i) {
  return Buffer.from(i, 'utf8').toString('base64');
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */

function unbase64(i) {
  return Buffer.from(i, 'base64').toString('utf8');
}
}).call(this,require("buffer").Buffer)
},{"buffer":12}],92:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLError = GraphQLError;

var _printError = require('./printError');

var _location = require('../language/location');

/**
 * A GraphQLError describes an Error found during the parse, validate, or
 * execute phases of performing a GraphQL operation. In addition to a message
 * and stack trace, it also includes information about the locations in a
 * GraphQL document and/or execution result that correspond to the Error.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function GraphQLError( // eslint-disable-line no-redeclare
message, nodes, source, positions, path, originalError, extensions) {
  // Compute list of blame nodes.
  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined;

  // Compute locations in the source for the given nodes/positions.
  var _source = source;
  if (!_source && _nodes) {
    var node = _nodes[0];
    _source = node && node.loc && node.loc.source;
  }

  var _positions = positions;
  if (!_positions && _nodes) {
    _positions = _nodes.reduce(function (list, node) {
      if (node.loc) {
        list.push(node.loc.start);
      }
      return list;
    }, []);
  }
  if (_positions && _positions.length === 0) {
    _positions = undefined;
  }

  var _locations = void 0;
  if (positions && source) {
    _locations = positions.map(function (pos) {
      return (0, _location.getLocation)(source, pos);
    });
  } else if (_nodes) {
    _locations = _nodes.reduce(function (list, node) {
      if (node.loc) {
        list.push((0, _location.getLocation)(node.loc.source, node.loc.start));
      }
      return list;
    }, []);
  }

  Object.defineProperties(this, {
    message: {
      value: message,
      // By being enumerable, JSON.stringify will include `message` in the
      // resulting output. This ensures that the simplest possible GraphQL
      // service adheres to the spec.
      enumerable: true,
      writable: true
    },
    locations: {
      // Coercing falsey values to undefined ensures they will not be included
      // in JSON.stringify() when not provided.
      value: _locations || undefined,
      // By being enumerable, JSON.stringify will include `locations` in the
      // resulting output. This ensures that the simplest possible GraphQL
      // service adheres to the spec.
      enumerable: true
    },
    path: {
      // Coercing falsey values to undefined ensures they will not be included
      // in JSON.stringify() when not provided.
      value: path || undefined,
      // By being enumerable, JSON.stringify will include `path` in the
      // resulting output. This ensures that the simplest possible GraphQL
      // service adheres to the spec.
      enumerable: true
    },
    nodes: {
      value: _nodes || undefined
    },
    source: {
      value: _source || undefined
    },
    positions: {
      value: _positions || undefined
    },
    originalError: {
      value: originalError
    },
    extensions: {
      value: extensions || originalError && originalError.extensions
    }
  });

  // Include (non-enumerable) stack trace.
  if (originalError && originalError.stack) {
    Object.defineProperty(this, 'stack', {
      value: originalError.stack,
      writable: true,
      configurable: true
    });
  } else if (Error.captureStackTrace) {
    Error.captureStackTrace(this, GraphQLError);
  } else {
    Object.defineProperty(this, 'stack', {
      value: Error().stack,
      writable: true,
      configurable: true
    });
  }
}

GraphQLError.prototype = Object.create(Error.prototype, {
  constructor: { value: GraphQLError },
  name: { value: 'GraphQLError' },
  toString: {
    value: function toString() {
      return (0, _printError.printError)(this);
    }
  }
});
},{"../language/location":123,"./printError":96}],93:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   *  strict
                                                                                                                                                                                                                                                                   */

exports.formatError = formatError;

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given a GraphQLError, format it according to the rules described by the
 * Response Format, Errors section of the GraphQL Specification.
 */
function formatError(error) {
  !error ? (0, _invariant2.default)(0, 'Received null or undefined error.') : void 0;
  return _extends({}, error.extensions, {
    message: error.message || 'An unknown error occurred.',
    locations: error.locations,
    path: error.path
  });
}
},{"../jsutils/invariant":105}],94:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _GraphQLError = require('./GraphQLError');

Object.defineProperty(exports, 'GraphQLError', {
  enumerable: true,
  get: function get() {
    return _GraphQLError.GraphQLError;
  }
});

var _syntaxError = require('./syntaxError');

Object.defineProperty(exports, 'syntaxError', {
  enumerable: true,
  get: function get() {
    return _syntaxError.syntaxError;
  }
});

var _locatedError = require('./locatedError');

Object.defineProperty(exports, 'locatedError', {
  enumerable: true,
  get: function get() {
    return _locatedError.locatedError;
  }
});

var _printError = require('./printError');

Object.defineProperty(exports, 'printError', {
  enumerable: true,
  get: function get() {
    return _printError.printError;
  }
});

var _formatError = require('./formatError');

Object.defineProperty(exports, 'formatError', {
  enumerable: true,
  get: function get() {
    return _formatError.formatError;
  }
});
},{"./GraphQLError":92,"./formatError":93,"./locatedError":95,"./printError":96,"./syntaxError":97}],95:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.locatedError = locatedError;

var _GraphQLError = require('./GraphQLError');

/**
 * Given an arbitrary Error, presumably thrown while attempting to execute a
 * GraphQL operation, produce a new GraphQLError aware of the location in the
 * document responsible for the original Error.
 */
function locatedError(originalError, nodes, path) {
  // Note: this uses a brand-check to support GraphQL errors originating from
  // other contexts.
  // $FlowFixMe(>=0.68.0)
  if (originalError && Array.isArray(originalError.path)) {
    return originalError;
  }

  return new _GraphQLError.GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{"./GraphQLError":92}],96:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printError = printError;

var _location = require('../language/location');

/**
 * Prints a GraphQLError to a string, representing useful location information
 * about the error's position in the source.
 */
function printError(error) {
  var printedLocations = [];
  if (error.nodes) {
    error.nodes.forEach(function (node) {
      if (node.loc) {
        printedLocations.push(highlightSourceAtLocation(node.loc.source, (0, _location.getLocation)(node.loc.source, node.loc.start)));
      }
    });
  } else if (error.source && error.locations) {
    var source = error.source;
    error.locations.forEach(function (location) {
      printedLocations.push(highlightSourceAtLocation(source, location));
    });
  }
  return printedLocations.length === 0 ? error.message : [error.message].concat(printedLocations).join('\n\n') + '\n';
}

/**
 * Render a helpful description of the location of the error in the GraphQL
 * Source document.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function highlightSourceAtLocation(source, location) {
  var line = location.line;
  var lineOffset = source.locationOffset.line - 1;
  var columnOffset = getColumnOffset(source, location);
  var contextLine = line + lineOffset;
  var contextColumn = location.column + columnOffset;
  var prevLineNum = (contextLine - 1).toString();
  var lineNum = contextLine.toString();
  var nextLineNum = (contextLine + 1).toString();
  var padLen = nextLineNum.length;
  var lines = source.body.split(/\r\n|[\n\r]/g);
  lines[0] = whitespace(source.locationOffset.column - 1) + lines[0];
  var outputLines = [source.name + ' (' + contextLine + ':' + contextColumn + ')', line >= 2 && lpad(padLen, prevLineNum) + ': ' + lines[line - 2], lpad(padLen, lineNum) + ': ' + lines[line - 1], whitespace(2 + padLen + contextColumn - 1) + '^', line < lines.length && lpad(padLen, nextLineNum) + ': ' + lines[line]];
  return outputLines.filter(Boolean).join('\n');
}

function getColumnOffset(source, location) {
  return location.line === 1 ? source.locationOffset.column - 1 : 0;
}

function whitespace(len) {
  return Array(len + 1).join(' ');
}

function lpad(len, str) {
  return whitespace(len - str.length) + str;
}
},{"../language/location":123}],97:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.syntaxError = syntaxError;

var _GraphQLError = require('./GraphQLError');

/**
 * Produces a GraphQLError representing a syntax error, containing useful
 * descriptive information about the syntax error's position in the source.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function syntaxError(source, position, description) {
  return new _GraphQLError.GraphQLError('Syntax Error: ' + description, undefined, source, [position]);
}
},{"./GraphQLError":92}],98:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultFieldResolver = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               *  strict
                                                                                                                                                                                                                                                                               */

exports.execute = execute;
exports.responsePathAsArray = responsePathAsArray;
exports.addPath = addPath;
exports.assertValidExecutionArguments = assertValidExecutionArguments;
exports.buildExecutionContext = buildExecutionContext;
exports.getOperationRootType = getOperationRootType;
exports.collectFields = collectFields;
exports.buildResolveInfo = buildResolveInfo;
exports.resolveFieldValueOrError = resolveFieldValueOrError;
exports.getFieldDef = getFieldDef;

var _iterall = require('iterall');

var _error = require('../error');

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _isInvalid = require('../jsutils/isInvalid');

var _isInvalid2 = _interopRequireDefault(_isInvalid);

var _isNullish = require('../jsutils/isNullish');

var _isNullish2 = _interopRequireDefault(_isNullish);

var _isPromise = require('../jsutils/isPromise');

var _isPromise2 = _interopRequireDefault(_isPromise);

var _memoize = require('../jsutils/memoize3');

var _memoize2 = _interopRequireDefault(_memoize);

var _promiseForObject = require('../jsutils/promiseForObject');

var _promiseForObject2 = _interopRequireDefault(_promiseForObject);

var _promiseReduce = require('../jsutils/promiseReduce');

var _promiseReduce2 = _interopRequireDefault(_promiseReduce);

var _typeFromAST = require('../utilities/typeFromAST');

var _kinds = require('../language/kinds');

var _values = require('./values');

var _definition = require('../type/definition');

var _schema = require('../type/schema');

var _introspection = require('../type/introspection');

var _directives = require('../type/directives');

var _validate = require('../type/validate');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Terminology
 *
 * "Definitions" are the generic name for top-level statements in the document.
 * Examples of this include:
 * 1) Operations (such as a query)
 * 2) Fragments
 *
 * "Operations" are a generic name for requests in the document.
 * Examples of this include:
 * 1) query,
 * 2) mutation
 *
 * "Selections" are the definitions that can appear legally and at
 * single level of the query. These include:
 * 1) field references e.g "a"
 * 2) fragment "spreads" e.g. "...c"
 * 3) inline fragment "spreads" e.g. "...on Type { a }"
 */

/**
 * Data that must be available at all points during query execution.
 *
 * Namely, schema of the type system that is currently executing,
 * and the fragments defined in the query document
 */


/**
 * The result of GraphQL execution.
 *
 *   - `errors` is included when any errors occurred as a non-empty array.
 *   - `data` is the result of a successful execution of the query.
 */


/**
 * Implements the "Evaluating requests" section of the GraphQL specification.
 *
 * Returns either a synchronous ExecutionResult (if all encountered resolvers
 * are synchronous), or a Promise of an ExecutionResult that will eventually be
 * resolved and never rejected.
 *
 * If the arguments to this function do not result in a legal execution context,
 * a GraphQLError will be thrown immediately explaining the invalid input.
 *
 * Accepts either an object with named arguments, or individual arguments.
 */

/* eslint-disable no-redeclare */
function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {
  /* eslint-enable no-redeclare */
  // Extract arguments from object args if provided.
  return arguments.length === 1 ? executeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : executeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);
}

function executeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {
  // If arguments are missing or incorrect, throw an error.
  assertValidExecutionArguments(schema, document, variableValues);

  // If a valid context cannot be created due to incorrect arguments,
  // a "Response" with only errors is returned.
  var context = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);

  // Return early errors if execution context failed.
  if (Array.isArray(context)) {
    return { errors: context };
  }

  // Return a Promise that will eventually resolve to the data described by
  // The "Response" section of the GraphQL specification.
  //
  // If errors are encountered while executing a GraphQL field, only that
  // field and its descendants will be omitted, and sibling fields will still
  // be executed. An execution which encounters errors will still result in a
  // resolved Promise.
  var data = executeOperation(context, context.operation, rootValue);
  return buildResponse(context, data);
}

/**
 * Given a completed execution context and data, build the { errors, data }
 * response defined by the "Response" section of the GraphQL specification.
 */
function buildResponse(context, data) {
  if ((0, _isPromise2.default)(data)) {
    return data.then(function (resolved) {
      return buildResponse(context, resolved);
    });
  }
  return context.errors.length === 0 ? { data: data } : { errors: context.errors, data: data };
}

/**
 * Given a ResponsePath (found in the `path` entry in the information provided
 * as the last argument to a field resolver), return an Array of the path keys.
 */
function responsePathAsArray(path) {
  var flattened = [];
  var curr = path;
  while (curr) {
    flattened.push(curr.key);
    curr = curr.prev;
  }
  return flattened.reverse();
}

/**
 * Given a ResponsePath and a key, return a new ResponsePath containing the
 * new key.
 */
function addPath(prev, key) {
  return { prev: prev, key: key };
}

/**
 * Essential assertions before executing to provide developer feedback for
 * improper use of the GraphQL library.
 */
function assertValidExecutionArguments(schema, document, rawVariableValues) {
  !document ? (0, _invariant2.default)(0, 'Must provide document') : void 0;

  // If the schema used for execution is invalid, throw an error.
  (0, _validate.assertValidSchema)(schema);

  // Variables, if provided, must be an object.
  !(!rawVariableValues || (typeof rawVariableValues === 'undefined' ? 'undefined' : _typeof(rawVariableValues)) === 'object') ? (0, _invariant2.default)(0, 'Variables must be provided as an Object where each property is a ' + 'variable value. Perhaps look to see if an unparsed JSON string ' + 'was provided.') : void 0;
}

/**
 * Constructs a ExecutionContext object from the arguments passed to
 * execute, which we will pass throughout the other execution methods.
 *
 * Throws a GraphQLError if a valid execution context cannot be created.
 */
function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver) {
  var errors = [];
  var operation = void 0;
  var hasMultipleAssumedOperations = false;
  var fragments = Object.create(null);
  for (var i = 0; i < document.definitions.length; i++) {
    var definition = document.definitions[i];
    switch (definition.kind) {
      case _kinds.Kind.OPERATION_DEFINITION:
        if (!operationName && operation) {
          hasMultipleAssumedOperations = true;
        } else if (!operationName || definition.name && definition.name.value === operationName) {
          operation = definition;
        }
        break;
      case _kinds.Kind.FRAGMENT_DEFINITION:
        fragments[definition.name.value] = definition;
        break;
    }
  }

  if (!operation) {
    if (operationName) {
      errors.push(new _error.GraphQLError('Unknown operation named "' + operationName + '".'));
    } else {
      errors.push(new _error.GraphQLError('Must provide an operation.'));
    }
  } else if (hasMultipleAssumedOperations) {
    errors.push(new _error.GraphQLError('Must provide operation name if query contains ' + 'multiple operations.'));
  }

  var variableValues = void 0;
  if (operation) {
    var coercedVariableValues = (0, _values.getVariableValues)(schema, operation.variableDefinitions || [], rawVariableValues || {});

    if (coercedVariableValues.errors) {
      errors.push.apply(errors, coercedVariableValues.errors);
    } else {
      variableValues = coercedVariableValues.coerced;
    }
  }

  if (errors.length !== 0) {
    return errors;
  }

  !operation ? (0, _invariant2.default)(0, 'Has operation if no errors.') : void 0;
  !variableValues ? (0, _invariant2.default)(0, 'Has variables if no errors.') : void 0;

  return {
    schema: schema,
    fragments: fragments,
    rootValue: rootValue,
    contextValue: contextValue,
    operation: operation,
    variableValues: variableValues,
    fieldResolver: fieldResolver || defaultFieldResolver,
    errors: errors
  };
}

/**
 * Implements the "Evaluating operations" section of the spec.
 */
function executeOperation(exeContext, operation, rootValue) {
  var type = getOperationRootType(exeContext.schema, operation);
  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));

  var path = undefined;

  // Errors from sub-fields of a NonNull type may propagate to the top level,
  // at which point we still log the error and null the parent field, which
  // in this case is the entire response.
  //
  // Similar to completeValueCatchingError.
  try {
    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);
    if ((0, _isPromise2.default)(result)) {
      return result.then(undefined, function (error) {
        exeContext.errors.push(error);
        return Promise.resolve(null);
      });
    }
    return result;
  } catch (error) {
    exeContext.errors.push(error);
    return null;
  }
}

/**
 * Extracts the root type of the operation from the schema.
 */
function getOperationRootType(schema, operation) {
  switch (operation.operation) {
    case 'query':
      var queryType = schema.getQueryType();
      if (!queryType) {
        throw new _error.GraphQLError('Schema does not define the required query root type.', [operation]);
      }
      return queryType;
    case 'mutation':
      var mutationType = schema.getMutationType();
      if (!mutationType) {
        throw new _error.GraphQLError('Schema is not configured for mutations.', [operation]);
      }
      return mutationType;
    case 'subscription':
      var subscriptionType = schema.getSubscriptionType();
      if (!subscriptionType) {
        throw new _error.GraphQLError('Schema is not configured for subscriptions.', [operation]);
      }
      return subscriptionType;
    default:
      throw new _error.GraphQLError('Can only execute queries, mutations and subscriptions.', [operation]);
  }
}

/**
 * Implements the "Evaluating selection sets" section of the spec
 * for "write" mode.
 */
function executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {
  return (0, _promiseReduce2.default)(Object.keys(fields), function (results, responseName) {
    var fieldNodes = fields[responseName];
    var fieldPath = addPath(path, responseName);
    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
    if (result === undefined) {
      return results;
    }
    if ((0, _isPromise2.default)(result)) {
      return result.then(function (resolvedResult) {
        results[responseName] = resolvedResult;
        return results;
      });
    }
    results[responseName] = result;
    return results;
  }, Object.create(null));
}

/**
 * Implements the "Evaluating selection sets" section of the spec
 * for "read" mode.
 */
function executeFields(exeContext, parentType, sourceValue, path, fields) {
  var containsPromise = false;

  var finalResults = Object.keys(fields).reduce(function (results, responseName) {
    var fieldNodes = fields[responseName];
    var fieldPath = addPath(path, responseName);
    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
    if (result === undefined) {
      return results;
    }
    results[responseName] = result;
    if (!containsPromise && (0, _isPromise2.default)(result)) {
      containsPromise = true;
    }
    return results;
  }, Object.create(null));

  // If there are no promises, we can just return the object
  if (!containsPromise) {
    return finalResults;
  }

  // Otherwise, results is a map from field name to the result
  // of resolving that field, which is possibly a promise. Return
  // a promise that will return this same map, but with any
  // promises replaced with the values they resolved to.
  return (0, _promiseForObject2.default)(finalResults);
}

/**
 * Given a selectionSet, adds all of the fields in that selection to
 * the passed in map of fields, and returns it at the end.
 *
 * CollectFields requires the "runtime type" of an object. For a field which
 * returns an Interface or Union type, the "runtime type" will be the actual
 * Object type returned by that field.
 */
function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {
  for (var i = 0; i < selectionSet.selections.length; i++) {
    var selection = selectionSet.selections[i];
    switch (selection.kind) {
      case _kinds.Kind.FIELD:
        if (!shouldIncludeNode(exeContext, selection)) {
          continue;
        }
        var name = getFieldEntryKey(selection);
        if (!fields[name]) {
          fields[name] = [];
        }
        fields[name].push(selection);
        break;
      case _kinds.Kind.INLINE_FRAGMENT:
        if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {
          continue;
        }
        collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
        break;
      case _kinds.Kind.FRAGMENT_SPREAD:
        var fragName = selection.name.value;
        if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {
          continue;
        }
        visitedFragmentNames[fragName] = true;
        var fragment = exeContext.fragments[fragName];
        if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {
          continue;
        }
        collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
        break;
    }
  }
  return fields;
}

/**
 * Determines if a field should be included based on the @include and @skip
 * directives, where @skip has higher precidence than @include.
 */
function shouldIncludeNode(exeContext, node) {
  var skip = (0, _values.getDirectiveValues)(_directives.GraphQLSkipDirective, node, exeContext.variableValues);
  if (skip && skip.if === true) {
    return false;
  }

  var include = (0, _values.getDirectiveValues)(_directives.GraphQLIncludeDirective, node, exeContext.variableValues);
  if (include && include.if === false) {
    return false;
  }
  return true;
}

/**
 * Determines if a fragment is applicable to the given type.
 */
function doesFragmentConditionMatch(exeContext, fragment, type) {
  var typeConditionNode = fragment.typeCondition;
  if (!typeConditionNode) {
    return true;
  }
  var conditionalType = (0, _typeFromAST.typeFromAST)(exeContext.schema, typeConditionNode);
  if (conditionalType === type) {
    return true;
  }
  if ((0, _definition.isAbstractType)(conditionalType)) {
    return exeContext.schema.isPossibleType(conditionalType, type);
  }
  return false;
}

/**
 * Implements the logic to compute the key of a given field's entry
 */
function getFieldEntryKey(node) {
  return node.alias ? node.alias.value : node.name.value;
}

/**
 * Resolves the field on the given source object. In particular, this
 * figures out the value that the field returns by calling its resolve function,
 * then calls completeValue to complete promises, serialize scalars, or execute
 * the sub-selection-set for objects.
 */
function resolveField(exeContext, parentType, source, fieldNodes, path) {
  var fieldNode = fieldNodes[0];
  var fieldName = fieldNode.name.value;

  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);
  if (!fieldDef) {
    return;
  }

  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;

  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);

  // Get the resolve function, regardless of if its result is normal
  // or abrupt (error).
  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);

  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);
}

function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {
  // The resolve function's optional fourth argument is a collection of
  // information about the current execution state.
  return {
    fieldName: fieldNodes[0].name.value,
    fieldNodes: fieldNodes,
    returnType: fieldDef.type,
    parentType: parentType,
    path: path,
    schema: exeContext.schema,
    fragments: exeContext.fragments,
    rootValue: exeContext.rootValue,
    operation: exeContext.operation,
    variableValues: exeContext.variableValues
  };
}

// Isolates the "ReturnOrAbrupt" behavior to not de-opt the `resolveField`
// function. Returns the result of resolveFn or the abrupt-return Error object.
function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {
  try {
    // Build a JS object of arguments from the field.arguments AST, using the
    // variables scope to fulfill any variable references.
    // TODO: find a way to memoize, in case this field is within a List type.
    var args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues);

    // The resolve function's optional third argument is a context value that
    // is provided to every resolve function within an execution. It is commonly
    // used to represent an authenticated user, or request-specific caches.
    var context = exeContext.contextValue;

    var result = resolveFn(source, args, context, info);
    return (0, _isPromise2.default)(result) ? result.then(undefined, asErrorInstance) : result;
  } catch (error) {
    return asErrorInstance(error);
  }
}

// Sometimes a non-error is thrown, wrap it as an Error instance to ensure a
// consistent Error interface.
function asErrorInstance(error) {
  return error instanceof Error ? error : new Error(error || undefined);
}

// This is a small wrapper around completeValue which detects and logs errors
// in the execution context.
function completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {
  // If the field type is non-nullable, then it is resolved without any
  // protection from errors, however it still properly locates the error.
  if ((0, _definition.isNonNullType)(returnType)) {
    return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);
  }

  // Otherwise, error protection is applied, logging the error and resolving
  // a null value for this field if one is encountered.
  try {
    var completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);
    if ((0, _isPromise2.default)(completed)) {
      // If `completeValueWithLocatedError` returned a rejected promise, log
      // the rejection error and resolve to null.
      // Note: we don't rely on a `catch` method, but we do expect "thenable"
      // to take a second callback for the error case.
      return completed.then(undefined, function (error) {
        exeContext.errors.push(error);
        return Promise.resolve(null);
      });
    }
    return completed;
  } catch (error) {
    // If `completeValueWithLocatedError` returned abruptly (threw an error),
    // log the error and return null.
    exeContext.errors.push(error);
    return null;
  }
}

// This is a small wrapper around completeValue which annotates errors with
// location information.
function completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {
  try {
    var completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);
    if ((0, _isPromise2.default)(completed)) {
      return completed.then(undefined, function (error) {
        return Promise.reject((0, _error.locatedError)(asErrorInstance(error), fieldNodes, responsePathAsArray(path)));
      });
    }
    return completed;
  } catch (error) {
    throw (0, _error.locatedError)(asErrorInstance(error), fieldNodes, responsePathAsArray(path));
  }
}

/**
 * Implements the instructions for completeValue as defined in the
 * "Field entries" section of the spec.
 *
 * If the field type is Non-Null, then this recursively completes the value
 * for the inner type. It throws a field error if that completion returns null,
 * as per the "Nullability" section of the spec.
 *
 * If the field type is a List, then this recursively completes the value
 * for the inner type on each item in the list.
 *
 * If the field type is a Scalar or Enum, ensures the completed value is a legal
 * value of the type by calling the `serialize` method of GraphQL type
 * definition.
 *
 * If the field is an abstract type, determine the runtime type of the value
 * and then complete based on that type
 *
 * Otherwise, the field type expects a sub-selection set, and will complete the
 * value by evaluating all sub-selections.
 */
function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
  // If result is a Promise, apply-lift over completeValue.
  if ((0, _isPromise2.default)(result)) {
    return result.then(function (resolved) {
      return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);
    });
  }

  // If result is an Error, throw a located error.
  if (result instanceof Error) {
    throw result;
  }

  // If field type is NonNull, complete for inner type, and throw field error
  // if result is null.
  if ((0, _definition.isNonNullType)(returnType)) {
    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);
    if (completed === null) {
      throw new Error('Cannot return null for non-nullable field ' + info.parentType.name + '.' + info.fieldName + '.');
    }
    return completed;
  }

  // If result value is null-ish (null, undefined, or NaN) then return null.
  if ((0, _isNullish2.default)(result)) {
    return null;
  }

  // If field type is List, complete each item in the list with the inner type
  if ((0, _definition.isListType)(returnType)) {
    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);
  }

  // If field type is a leaf type, Scalar or Enum, serialize to a valid value,
  // returning null if serialization is not possible.
  if ((0, _definition.isLeafType)(returnType)) {
    return completeLeafValue(returnType, result);
  }

  // If field type is an abstract type, Interface or Union, determine the
  // runtime Object type and complete for that type.
  if ((0, _definition.isAbstractType)(returnType)) {
    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);
  }

  // If field type is Object, execute and complete all sub-selections.
  if ((0, _definition.isObjectType)(returnType)) {
    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);
  }

  // Not reachable. All possible output types have been considered.
  /* istanbul ignore next */
  throw new Error('Cannot complete value of unexpected type "' + String(returnType) + '".');
}

/**
 * Complete a list value by completing each item in the list with the
 * inner type
 */
function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {
  !(0, _iterall.isCollection)(result) ? (0, _invariant2.default)(0, 'Expected Iterable, but did not find one for field ' + info.parentType.name + '.' + info.fieldName + '.') : void 0;

  // This is specified as a simple map, however we're optimizing the path
  // where the list contains no Promises by avoiding creating another Promise.
  var itemType = returnType.ofType;
  var containsPromise = false;
  var completedResults = [];
  (0, _iterall.forEach)(result, function (item, index) {
    // No need to modify the info object containing the path,
    // since from here on it is not ever accessed by resolver functions.
    var fieldPath = addPath(path, index);
    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);

    if (!containsPromise && (0, _isPromise2.default)(completedItem)) {
      containsPromise = true;
    }
    completedResults.push(completedItem);
  });

  return containsPromise ? Promise.all(completedResults) : completedResults;
}

/**
 * Complete a Scalar or Enum by serializing to a valid value, returning
 * null if serialization is not possible.
 */
function completeLeafValue(returnType, result) {
  !returnType.serialize ? (0, _invariant2.default)(0, 'Missing serialize method on type') : void 0;
  var serializedResult = returnType.serialize(result);
  if ((0, _isInvalid2.default)(serializedResult)) {
    throw new Error('Expected a value of type "' + String(returnType) + '" but ' + ('received: ' + String(result)));
  }
  return serializedResult;
}

/**
 * Complete a value of an abstract type by determining the runtime object type
 * of that value, then complete the value for that type.
 */
function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {
  var runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);

  if ((0, _isPromise2.default)(runtimeType)) {
    return runtimeType.then(function (resolvedRuntimeType) {
      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
    });
  }

  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
}

function ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {
  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;

  if (!(0, _definition.isObjectType)(runtimeType)) {
    throw new _error.GraphQLError('Abstract type ' + returnType.name + ' must resolve to an Object type at ' + ('runtime for field ' + info.parentType.name + '.' + info.fieldName + ' with ') + ('value "' + String(result) + '", received "' + String(runtimeType) + '". ') + ('Either the ' + returnType.name + ' type should provide a "resolveType" ') + 'function or each possible types should provide an ' + '"isTypeOf" function.', fieldNodes);
  }

  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {
    throw new _error.GraphQLError('Runtime Object type "' + runtimeType.name + '" is not a possible type ' + ('for "' + returnType.name + '".'), fieldNodes);
  }

  return runtimeType;
}

/**
 * Complete an Object value by executing all sub-selections.
 */
function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {
  // If there is an isTypeOf predicate function, call it with the
  // current result. If isTypeOf returns false, then raise an error rather
  // than continuing execution.
  if (returnType.isTypeOf) {
    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);

    if ((0, _isPromise2.default)(isTypeOf)) {
      return isTypeOf.then(function (resolvedIsTypeOf) {
        if (!resolvedIsTypeOf) {
          throw invalidReturnTypeError(returnType, result, fieldNodes);
        }
        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);
      });
    }

    if (!isTypeOf) {
      throw invalidReturnTypeError(returnType, result, fieldNodes);
    }
  }

  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);
}

function invalidReturnTypeError(returnType, result, fieldNodes) {
  return new _error.GraphQLError('Expected value of type "' + returnType.name + '" but got: ' + String(result) + '.', fieldNodes);
}

function collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {
  // Collect sub-fields to execute to complete this value.
  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);
  return executeFields(exeContext, returnType, result, path, subFieldNodes);
}

/**
 * A memoized collection of relevant subfields in the context of the return
 * type. Memoizing ensures the subfields are not repeatedly calculated, which
 * saves overhead when resolving lists of values.
 */
var collectSubfields = (0, _memoize2.default)(_collectSubfields);
function _collectSubfields(exeContext, returnType, fieldNodes) {
  var subFieldNodes = Object.create(null);
  var visitedFragmentNames = Object.create(null);
  for (var i = 0; i < fieldNodes.length; i++) {
    var selectionSet = fieldNodes[i].selectionSet;
    if (selectionSet) {
      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);
    }
  }
  return subFieldNodes;
}

/**
 * If a resolveType function is not given, then a default resolve behavior is
 * used which attempts two strategies:
 *
 * First, See if the provided value has a `__typename` field defined, if so, use
 * that value as name of the resolved type.
 *
 * Otherwise, test each possible type for the abstract type by calling
 * isTypeOf for the object being coerced, returning the first type that matches.
 */
function defaultResolveTypeFn(value, context, info, abstractType) {
  // First, look for `__typename`.
  if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.__typename === 'string') {
    return value.__typename;
  }

  // Otherwise, test each possible type.
  var possibleTypes = info.schema.getPossibleTypes(abstractType);
  var promisedIsTypeOfResults = [];

  for (var i = 0; i < possibleTypes.length; i++) {
    var type = possibleTypes[i];

    if (type.isTypeOf) {
      var isTypeOfResult = type.isTypeOf(value, context, info);

      if ((0, _isPromise2.default)(isTypeOfResult)) {
        promisedIsTypeOfResults[i] = isTypeOfResult;
      } else if (isTypeOfResult) {
        return type;
      }
    }
  }

  if (promisedIsTypeOfResults.length) {
    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {
      for (var _i = 0; _i < isTypeOfResults.length; _i++) {
        if (isTypeOfResults[_i]) {
          return possibleTypes[_i];
        }
      }
    });
  }
}

/**
 * If a resolve function is not given, then a default resolve behavior is used
 * which takes the property of the source object of the same name as the field
 * and returns it as the result, or if it's a function, returns the result
 * of calling that function while passing along args and context.
 */
var defaultFieldResolver = exports.defaultFieldResolver = function defaultFieldResolver(source, args, context, info) {
  // ensure source is a value for which property access is acceptable.
  if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || typeof source === 'function') {
    var property = source[info.fieldName];
    if (typeof property === 'function') {
      return source[info.fieldName](args, context, info);
    }
    return property;
  }
};

/**
 * This method looks up the field on the given type defintion.
 * It has special casing for the two introspection fields, __schema
 * and __typename. __typename is special because it can always be
 * queried as a field, even in situations where no other fields
 * are allowed, like on a Union. __schema could get automatically
 * added to the query type, but that would require mutating type
 * definitions, which would cause issues.
 */
function getFieldDef(schema, parentType, fieldName) {
  if (fieldName === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.SchemaMetaFieldDef;
  } else if (fieldName === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.TypeMetaFieldDef;
  } else if (fieldName === _introspection.TypeNameMetaFieldDef.name) {
    return _introspection.TypeNameMetaFieldDef;
  }
  return parentType.getFields()[fieldName];
}
},{"../error":94,"../jsutils/invariant":105,"../jsutils/isInvalid":106,"../jsutils/isNullish":107,"../jsutils/isPromise":108,"../jsutils/memoize3":111,"../jsutils/promiseForObject":114,"../jsutils/promiseReduce":115,"../language/kinds":121,"../type/definition":131,"../type/directives":132,"../type/introspection":134,"../type/schema":136,"../type/validate":137,"../utilities/typeFromAST":158,"./values":100,"iterall":193}],99:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _execute = require('./execute');

Object.defineProperty(exports, 'execute', {
  enumerable: true,
  get: function get() {
    return _execute.execute;
  }
});
Object.defineProperty(exports, 'defaultFieldResolver', {
  enumerable: true,
  get: function get() {
    return _execute.defaultFieldResolver;
  }
});
Object.defineProperty(exports, 'responsePathAsArray', {
  enumerable: true,
  get: function get() {
    return _execute.responsePathAsArray;
  }
});

var _values = require('./values');

Object.defineProperty(exports, 'getDirectiveValues', {
  enumerable: true,
  get: function get() {
    return _values.getDirectiveValues;
  }
});
},{"./execute":98,"./values":100}],100:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVariableValues = getVariableValues;
exports.getArgumentValues = getArgumentValues;
exports.getDirectiveValues = getDirectiveValues;

var _error = require('../error');

var _find = require('../jsutils/find');

var _find2 = _interopRequireDefault(_find);

var _isInvalid = require('../jsutils/isInvalid');

var _isInvalid2 = _interopRequireDefault(_isInvalid);

var _keyMap = require('../jsutils/keyMap');

var _keyMap2 = _interopRequireDefault(_keyMap);

var _coerceValue = require('../utilities/coerceValue');

var _typeFromAST = require('../utilities/typeFromAST');

var _valueFromAST = require('../utilities/valueFromAST');

var _kinds = require('../language/kinds');

var _printer = require('../language/printer');

var _definition = require('../type/definition');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Prepares an object map of variableValues of the correct type based on the
 * provided variable definitions and arbitrary input. If the input cannot be
 * parsed to match the variable definitions, a GraphQLError will be thrown.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function getVariableValues(schema, varDefNodes, inputs) {
  var errors = [];
  var coercedValues = {};
  for (var i = 0; i < varDefNodes.length; i++) {
    var varDefNode = varDefNodes[i];
    var varName = varDefNode.variable.name.value;
    var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);
    if (!(0, _definition.isInputType)(varType)) {
      errors.push(new _error.GraphQLError('Variable "$' + varName + '" expected value of type ' + ('"' + (0, _printer.print)(varDefNode.type) + '" which cannot be used as an input type.'), [varDefNode.type]));
    } else {
      var value = inputs[varName];
      if ((0, _isInvalid2.default)(value)) {
        if ((0, _definition.isNonNullType)(varType)) {
          errors.push(new _error.GraphQLError('Variable "$' + varName + '" of required type ' + ('"' + String(varType) + '" was not provided.'), [varDefNode]));
        } else if (varDefNode.defaultValue) {
          coercedValues[varName] = (0, _valueFromAST.valueFromAST)(varDefNode.defaultValue, varType);
        }
      } else {
        var _coerced = (0, _coerceValue.coerceValue)(value, varType, varDefNode);
        var coercionErrors = _coerced.errors;
        if (coercionErrors) {
          (function () {
            var messagePrelude = 'Variable "$' + varName + '" got invalid value ' + JSON.stringify(value) + '; ';
            coercionErrors.forEach(function (error) {
              error.message = messagePrelude + error.message;
            });
            errors.push.apply(errors, coercionErrors);
          })();
        } else {
          coercedValues[varName] = _coerced.value;
        }
      }
    }
  }
  return errors.length === 0 ? { errors: undefined, coerced: coercedValues } : { errors: errors, coerced: undefined };
}

/**
 * Prepares an object map of argument values given a list of argument
 * definitions and list of argument AST nodes.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 */
function getArgumentValues(def, node, variableValues) {
  var coercedValues = {};
  var argDefs = def.args;
  var argNodes = node.arguments;
  if (!argDefs || !argNodes) {
    return coercedValues;
  }
  var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {
    return arg.name.value;
  });
  for (var i = 0; i < argDefs.length; i++) {
    var argDef = argDefs[i];
    var name = argDef.name;
    var argType = argDef.type;
    var argumentNode = argNodeMap[name];
    var defaultValue = argDef.defaultValue;
    if (!argumentNode) {
      if (!(0, _isInvalid2.default)(defaultValue)) {
        coercedValues[name] = defaultValue;
      } else if ((0, _definition.isNonNullType)(argType)) {
        throw new _error.GraphQLError('Argument "' + name + '" of required type ' + ('"' + String(argType) + '" was not provided.'), [node]);
      }
    } else if (argumentNode.value.kind === _kinds.Kind.VARIABLE) {
      var variableName = argumentNode.value.name.value;
      if (variableValues && Object.prototype.hasOwnProperty.call(variableValues, variableName) && !(0, _isInvalid2.default)(variableValues[variableName])) {
        // Note: this does not check that this variable value is correct.
        // This assumes that this query has been validated and the variable
        // usage here is of the correct type.
        coercedValues[name] = variableValues[variableName];
      } else if (!(0, _isInvalid2.default)(defaultValue)) {
        coercedValues[name] = defaultValue;
      } else if ((0, _definition.isNonNullType)(argType)) {
        throw new _error.GraphQLError('Argument "' + name + '" of required type "' + String(argType) + '" was ' + ('provided the variable "$' + variableName + '" which was not provided ') + 'a runtime value.', [argumentNode.value]);
      }
    } else {
      var valueNode = argumentNode.value;
      var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);
      if ((0, _isInvalid2.default)(coercedValue)) {
        // Note: ValuesOfCorrectType validation should catch this before
        // execution. This is a runtime check to ensure execution does not
        // continue with an invalid argument value.
        throw new _error.GraphQLError('Argument "' + name + '" has invalid value ' + (0, _printer.print)(valueNode) + '.', [argumentNode.value]);
      }
      coercedValues[name] = coercedValue;
    }
  }
  return coercedValues;
}

/**
 * Prepares an object map of argument values given a directive definition
 * and a AST node which may contain directives. Optionally also accepts a map
 * of variable values.
 *
 * If the directive does not exist on the node, returns undefined.
 *
 * Note: The returned value is a plain Object with a prototype, since it is
 * exposed to user code. Care should be taken to not pull values from the
 * Object prototype.
 */
function getDirectiveValues(directiveDef, node, variableValues) {
  var directiveNode = node.directives && (0, _find2.default)(node.directives, function (directive) {
    return directive.name.value === directiveDef.name;
  });

  if (directiveNode) {
    return getArgumentValues(directiveDef, directiveNode, variableValues);
  }
}
},{"../error":94,"../jsutils/find":103,"../jsutils/isInvalid":106,"../jsutils/keyMap":109,"../language/kinds":121,"../language/printer":125,"../type/definition":131,"../utilities/coerceValue":143,"../utilities/typeFromAST":158,"../utilities/valueFromAST":159}],101:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.graphql = graphql;
exports.graphqlSync = graphqlSync;

var _validate = require('./type/validate');

var _parser = require('./language/parser');

var _validate2 = require('./validation/validate');

var _execute = require('./execution/execute');

/**
 * This is the primary entry point function for fulfilling GraphQL operations
 * by parsing, validating, and executing a GraphQL document along side a
 * GraphQL schema.
 *
 * More sophisticated GraphQL servers, such as those which persist queries,
 * may wish to separate the validation and execution phases to a static time
 * tooling step, and a server runtime step.
 *
 * Accepts either an object with named arguments, or individual arguments:
 *
 * schema:
 *    The GraphQL type system to use when validating and executing a query.
 * source:
 *    A GraphQL language formatted string representing the requested operation.
 * rootValue:
 *    The value provided as the first argument to resolver functions on the top
 *    level type (e.g. the query object type).
 * variableValues:
 *    A mapping of variable name to runtime value to use for all variables
 *    defined in the requestString.
 * operationName:
 *    The name of the operation to use if requestString contains multiple
 *    possible operations. Can be omitted if requestString contains only
 *    one operation.
 * fieldResolver:
 *    A resolver function to use when one is not provided by the schema.
 *    If not provided, the default field resolver is used (which looks for a
 *    value or method on the source value with the field's name).
 */

/* eslint-disable no-redeclare */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
  var _arguments = arguments;

  /* eslint-enable no-redeclare */
  // Always return a Promise for a consistent API.
  return new Promise(function (resolve) {
    return resolve(
    // Extract arguments from object args if provided.
    _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));
  });
}

/**
 * The graphqlSync function also fulfills GraphQL operations by parsing,
 * validating, and executing a GraphQL document along side a GraphQL schema.
 * However, it guarantees to complete synchronously (or throw an error) assuming
 * that all field resolvers are also synchronous.
 */

/* eslint-disable no-redeclare */
function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
  // Extract arguments from object args if provided.
  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver);

  // Assert that the execution was synchronous.
  if (result.then) {
    throw new Error('GraphQL execution failed to complete synchronously.');
  }

  return result;
}

function graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {
  // Validate Schema
  var schemaValidationErrors = (0, _validate.validateSchema)(schema);
  if (schemaValidationErrors.length > 0) {
    return { errors: schemaValidationErrors };
  }

  // Parse
  var document = void 0;
  try {
    document = (0, _parser.parse)(source);
  } catch (syntaxError) {
    return { errors: [syntaxError] };
  }

  // Validate
  var validationErrors = (0, _validate2.validate)(schema, document);
  if (validationErrors.length > 0) {
    return { errors: validationErrors };
  }

  // Execute
  return (0, _execute.execute)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);
}
},{"./execution/execute":98,"./language/parser":124,"./type/validate":137,"./validation/validate":191}],102:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _graphql = require('./graphql');

Object.defineProperty(exports, 'graphql', {
  enumerable: true,
  get: function get() {
    return _graphql.graphql;
  }
});
Object.defineProperty(exports, 'graphqlSync', {
  enumerable: true,
  get: function get() {
    return _graphql.graphqlSync;
  }
});

var _type = require('./type');

Object.defineProperty(exports, 'GraphQLSchema', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLSchema;
  }
});
Object.defineProperty(exports, 'GraphQLScalarType', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLScalarType;
  }
});
Object.defineProperty(exports, 'GraphQLObjectType', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLObjectType;
  }
});
Object.defineProperty(exports, 'GraphQLInterfaceType', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLInterfaceType;
  }
});
Object.defineProperty(exports, 'GraphQLUnionType', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLUnionType;
  }
});
Object.defineProperty(exports, 'GraphQLEnumType', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLEnumType;
  }
});
Object.defineProperty(exports, 'GraphQLInputObjectType', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLInputObjectType;
  }
});
Object.defineProperty(exports, 'GraphQLList', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLList;
  }
});
Object.defineProperty(exports, 'GraphQLNonNull', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLNonNull;
  }
});
Object.defineProperty(exports, 'GraphQLDirective', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLDirective;
  }
});
Object.defineProperty(exports, 'TypeKind', {
  enumerable: true,
  get: function get() {
    return _type.TypeKind;
  }
});
Object.defineProperty(exports, 'specifiedScalarTypes', {
  enumerable: true,
  get: function get() {
    return _type.specifiedScalarTypes;
  }
});
Object.defineProperty(exports, 'GraphQLInt', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLInt;
  }
});
Object.defineProperty(exports, 'GraphQLFloat', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLFloat;
  }
});
Object.defineProperty(exports, 'GraphQLString', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLString;
  }
});
Object.defineProperty(exports, 'GraphQLBoolean', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLBoolean;
  }
});
Object.defineProperty(exports, 'GraphQLID', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLID;
  }
});
Object.defineProperty(exports, 'specifiedDirectives', {
  enumerable: true,
  get: function get() {
    return _type.specifiedDirectives;
  }
});
Object.defineProperty(exports, 'GraphQLIncludeDirective', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLIncludeDirective;
  }
});
Object.defineProperty(exports, 'GraphQLSkipDirective', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLSkipDirective;
  }
});
Object.defineProperty(exports, 'GraphQLDeprecatedDirective', {
  enumerable: true,
  get: function get() {
    return _type.GraphQLDeprecatedDirective;
  }
});
Object.defineProperty(exports, 'DEFAULT_DEPRECATION_REASON', {
  enumerable: true,
  get: function get() {
    return _type.DEFAULT_DEPRECATION_REASON;
  }
});
Object.defineProperty(exports, 'SchemaMetaFieldDef', {
  enumerable: true,
  get: function get() {
    return _type.SchemaMetaFieldDef;
  }
});
Object.defineProperty(exports, 'TypeMetaFieldDef', {
  enumerable: true,
  get: function get() {
    return _type.TypeMetaFieldDef;
  }
});
Object.defineProperty(exports, 'TypeNameMetaFieldDef', {
  enumerable: true,
  get: function get() {
    return _type.TypeNameMetaFieldDef;
  }
});
Object.defineProperty(exports, 'introspectionTypes', {
  enumerable: true,
  get: function get() {
    return _type.introspectionTypes;
  }
});
Object.defineProperty(exports, '__Schema', {
  enumerable: true,
  get: function get() {
    return _type.__Schema;
  }
});
Object.defineProperty(exports, '__Directive', {
  enumerable: true,
  get: function get() {
    return _type.__Directive;
  }
});
Object.defineProperty(exports, '__DirectiveLocation', {
  enumerable: true,
  get: function get() {
    return _type.__DirectiveLocation;
  }
});
Object.defineProperty(exports, '__Type', {
  enumerable: true,
  get: function get() {
    return _type.__Type;
  }
});
Object.defineProperty(exports, '__Field', {
  enumerable: true,
  get: function get() {
    return _type.__Field;
  }
});
Object.defineProperty(exports, '__InputValue', {
  enumerable: true,
  get: function get() {
    return _type.__InputValue;
  }
});
Object.defineProperty(exports, '__EnumValue', {
  enumerable: true,
  get: function get() {
    return _type.__EnumValue;
  }
});
Object.defineProperty(exports, '__TypeKind', {
  enumerable: true,
  get: function get() {
    return _type.__TypeKind;
  }
});
Object.defineProperty(exports, 'isSchema', {
  enumerable: true,
  get: function get() {
    return _type.isSchema;
  }
});
Object.defineProperty(exports, 'isDirective', {
  enumerable: true,
  get: function get() {
    return _type.isDirective;
  }
});
Object.defineProperty(exports, 'isType', {
  enumerable: true,
  get: function get() {
    return _type.isType;
  }
});
Object.defineProperty(exports, 'isScalarType', {
  enumerable: true,
  get: function get() {
    return _type.isScalarType;
  }
});
Object.defineProperty(exports, 'isObjectType', {
  enumerable: true,
  get: function get() {
    return _type.isObjectType;
  }
});
Object.defineProperty(exports, 'isInterfaceType', {
  enumerable: true,
  get: function get() {
    return _type.isInterfaceType;
  }
});
Object.defineProperty(exports, 'isUnionType', {
  enumerable: true,
  get: function get() {
    return _type.isUnionType;
  }
});
Object.defineProperty(exports, 'isEnumType', {
  enumerable: true,
  get: function get() {
    return _type.isEnumType;
  }
});
Object.defineProperty(exports, 'isInputObjectType', {
  enumerable: true,
  get: function get() {
    return _type.isInputObjectType;
  }
});
Object.defineProperty(exports, 'isListType', {
  enumerable: true,
  get: function get() {
    return _type.isListType;
  }
});
Object.defineProperty(exports, 'isNonNullType', {
  enumerable: true,
  get: function get() {
    return _type.isNonNullType;
  }
});
Object.defineProperty(exports, 'isInputType', {
  enumerable: true,
  get: function get() {
    return _type.isInputType;
  }
});
Object.defineProperty(exports, 'isOutputType', {
  enumerable: true,
  get: function get() {
    return _type.isOutputType;
  }
});
Object.defineProperty(exports, 'isLeafType', {
  enumerable: true,
  get: function get() {
    return _type.isLeafType;
  }
});
Object.defineProperty(exports, 'isCompositeType', {
  enumerable: true,
  get: function get() {
    return _type.isCompositeType;
  }
});
Object.defineProperty(exports, 'isAbstractType', {
  enumerable: true,
  get: function get() {
    return _type.isAbstractType;
  }
});
Object.defineProperty(exports, 'isWrappingType', {
  enumerable: true,
  get: function get() {
    return _type.isWrappingType;
  }
});
Object.defineProperty(exports, 'isNullableType', {
  enumerable: true,
  get: function get() {
    return _type.isNullableType;
  }
});
Object.defineProperty(exports, 'isNamedType', {
  enumerable: true,
  get: function get() {
    return _type.isNamedType;
  }
});
Object.defineProperty(exports, 'isSpecifiedScalarType', {
  enumerable: true,
  get: function get() {
    return _type.isSpecifiedScalarType;
  }
});
Object.defineProperty(exports, 'isIntrospectionType', {
  enumerable: true,
  get: function get() {
    return _type.isIntrospectionType;
  }
});
Object.defineProperty(exports, 'isSpecifiedDirective', {
  enumerable: true,
  get: function get() {
    return _type.isSpecifiedDirective;
  }
});
Object.defineProperty(exports, 'assertType', {
  enumerable: true,
  get: function get() {
    return _type.assertType;
  }
});
Object.defineProperty(exports, 'assertScalarType', {
  enumerable: true,
  get: function get() {
    return _type.assertScalarType;
  }
});
Object.defineProperty(exports, 'assertObjectType', {
  enumerable: true,
  get: function get() {
    return _type.assertObjectType;
  }
});
Object.defineProperty(exports, 'assertInterfaceType', {
  enumerable: true,
  get: function get() {
    return _type.assertInterfaceType;
  }
});
Object.defineProperty(exports, 'assertUnionType', {
  enumerable: true,
  get: function get() {
    return _type.assertUnionType;
  }
});
Object.defineProperty(exports, 'assertEnumType', {
  enumerable: true,
  get: function get() {
    return _type.assertEnumType;
  }
});
Object.defineProperty(exports, 'assertInputObjectType', {
  enumerable: true,
  get: function get() {
    return _type.assertInputObjectType;
  }
});
Object.defineProperty(exports, 'assertListType', {
  enumerable: true,
  get: function get() {
    return _type.assertListType;
  }
});
Object.defineProperty(exports, 'assertNonNullType', {
  enumerable: true,
  get: function get() {
    return _type.assertNonNullType;
  }
});
Object.defineProperty(exports, 'assertInputType', {
  enumerable: true,
  get: function get() {
    return _type.assertInputType;
  }
});
Object.defineProperty(exports, 'assertOutputType', {
  enumerable: true,
  get: function get() {
    return _type.assertOutputType;
  }
});
Object.defineProperty(exports, 'assertLeafType', {
  enumerable: true,
  get: function get() {
    return _type.assertLeafType;
  }
});
Object.defineProperty(exports, 'assertCompositeType', {
  enumerable: true,
  get: function get() {
    return _type.assertCompositeType;
  }
});
Object.defineProperty(exports, 'assertAbstractType', {
  enumerable: true,
  get: function get() {
    return _type.assertAbstractType;
  }
});
Object.defineProperty(exports, 'assertWrappingType', {
  enumerable: true,
  get: function get() {
    return _type.assertWrappingType;
  }
});
Object.defineProperty(exports, 'assertNullableType', {
  enumerable: true,
  get: function get() {
    return _type.assertNullableType;
  }
});
Object.defineProperty(exports, 'assertNamedType', {
  enumerable: true,
  get: function get() {
    return _type.assertNamedType;
  }
});
Object.defineProperty(exports, 'getNullableType', {
  enumerable: true,
  get: function get() {
    return _type.getNullableType;
  }
});
Object.defineProperty(exports, 'getNamedType', {
  enumerable: true,
  get: function get() {
    return _type.getNamedType;
  }
});
Object.defineProperty(exports, 'validateSchema', {
  enumerable: true,
  get: function get() {
    return _type.validateSchema;
  }
});
Object.defineProperty(exports, 'assertValidSchema', {
  enumerable: true,
  get: function get() {
    return _type.assertValidSchema;
  }
});

var _language = require('./language');

Object.defineProperty(exports, 'Source', {
  enumerable: true,
  get: function get() {
    return _language.Source;
  }
});
Object.defineProperty(exports, 'getLocation', {
  enumerable: true,
  get: function get() {
    return _language.getLocation;
  }
});
Object.defineProperty(exports, 'parse', {
  enumerable: true,
  get: function get() {
    return _language.parse;
  }
});
Object.defineProperty(exports, 'parseValue', {
  enumerable: true,
  get: function get() {
    return _language.parseValue;
  }
});
Object.defineProperty(exports, 'parseType', {
  enumerable: true,
  get: function get() {
    return _language.parseType;
  }
});
Object.defineProperty(exports, 'print', {
  enumerable: true,
  get: function get() {
    return _language.print;
  }
});
Object.defineProperty(exports, 'visit', {
  enumerable: true,
  get: function get() {
    return _language.visit;
  }
});
Object.defineProperty(exports, 'visitInParallel', {
  enumerable: true,
  get: function get() {
    return _language.visitInParallel;
  }
});
Object.defineProperty(exports, 'visitWithTypeInfo', {
  enumerable: true,
  get: function get() {
    return _language.visitWithTypeInfo;
  }
});
Object.defineProperty(exports, 'getVisitFn', {
  enumerable: true,
  get: function get() {
    return _language.getVisitFn;
  }
});
Object.defineProperty(exports, 'Kind', {
  enumerable: true,
  get: function get() {
    return _language.Kind;
  }
});
Object.defineProperty(exports, 'TokenKind', {
  enumerable: true,
  get: function get() {
    return _language.TokenKind;
  }
});
Object.defineProperty(exports, 'DirectiveLocation', {
  enumerable: true,
  get: function get() {
    return _language.DirectiveLocation;
  }
});
Object.defineProperty(exports, 'BREAK', {
  enumerable: true,
  get: function get() {
    return _language.BREAK;
  }
});

var _execution = require('./execution');

Object.defineProperty(exports, 'execute', {
  enumerable: true,
  get: function get() {
    return _execution.execute;
  }
});
Object.defineProperty(exports, 'defaultFieldResolver', {
  enumerable: true,
  get: function get() {
    return _execution.defaultFieldResolver;
  }
});
Object.defineProperty(exports, 'responsePathAsArray', {
  enumerable: true,
  get: function get() {
    return _execution.responsePathAsArray;
  }
});
Object.defineProperty(exports, 'getDirectiveValues', {
  enumerable: true,
  get: function get() {
    return _execution.getDirectiveValues;
  }
});

var _subscription = require('./subscription');

Object.defineProperty(exports, 'subscribe', {
  enumerable: true,
  get: function get() {
    return _subscription.subscribe;
  }
});
Object.defineProperty(exports, 'createSourceEventStream', {
  enumerable: true,
  get: function get() {
    return _subscription.createSourceEventStream;
  }
});

var _validation = require('./validation');

Object.defineProperty(exports, 'validate', {
  enumerable: true,
  get: function get() {
    return _validation.validate;
  }
});
Object.defineProperty(exports, 'ValidationContext', {
  enumerable: true,
  get: function get() {
    return _validation.ValidationContext;
  }
});
Object.defineProperty(exports, 'specifiedRules', {
  enumerable: true,
  get: function get() {
    return _validation.specifiedRules;
  }
});
Object.defineProperty(exports, 'FieldsOnCorrectTypeRule', {
  enumerable: true,
  get: function get() {
    return _validation.FieldsOnCorrectTypeRule;
  }
});
Object.defineProperty(exports, 'FragmentsOnCompositeTypesRule', {
  enumerable: true,
  get: function get() {
    return _validation.FragmentsOnCompositeTypesRule;
  }
});
Object.defineProperty(exports, 'KnownArgumentNamesRule', {
  enumerable: true,
  get: function get() {
    return _validation.KnownArgumentNamesRule;
  }
});
Object.defineProperty(exports, 'KnownDirectivesRule', {
  enumerable: true,
  get: function get() {
    return _validation.KnownDirectivesRule;
  }
});
Object.defineProperty(exports, 'KnownFragmentNamesRule', {
  enumerable: true,
  get: function get() {
    return _validation.KnownFragmentNamesRule;
  }
});
Object.defineProperty(exports, 'KnownTypeNamesRule', {
  enumerable: true,
  get: function get() {
    return _validation.KnownTypeNamesRule;
  }
});
Object.defineProperty(exports, 'LoneAnonymousOperationRule', {
  enumerable: true,
  get: function get() {
    return _validation.LoneAnonymousOperationRule;
  }
});
Object.defineProperty(exports, 'NoFragmentCyclesRule', {
  enumerable: true,
  get: function get() {
    return _validation.NoFragmentCyclesRule;
  }
});
Object.defineProperty(exports, 'NoUndefinedVariablesRule', {
  enumerable: true,
  get: function get() {
    return _validation.NoUndefinedVariablesRule;
  }
});
Object.defineProperty(exports, 'NoUnusedFragmentsRule', {
  enumerable: true,
  get: function get() {
    return _validation.NoUnusedFragmentsRule;
  }
});
Object.defineProperty(exports, 'NoUnusedVariablesRule', {
  enumerable: true,
  get: function get() {
    return _validation.NoUnusedVariablesRule;
  }
});
Object.defineProperty(exports, 'OverlappingFieldsCanBeMergedRule', {
  enumerable: true,
  get: function get() {
    return _validation.OverlappingFieldsCanBeMergedRule;
  }
});
Object.defineProperty(exports, 'PossibleFragmentSpreadsRule', {
  enumerable: true,
  get: function get() {
    return _validation.PossibleFragmentSpreadsRule;
  }
});
Object.defineProperty(exports, 'ProvidedNonNullArgumentsRule', {
  enumerable: true,
  get: function get() {
    return _validation.ProvidedNonNullArgumentsRule;
  }
});
Object.defineProperty(exports, 'ScalarLeafsRule', {
  enumerable: true,
  get: function get() {
    return _validation.ScalarLeafsRule;
  }
});
Object.defineProperty(exports, 'SingleFieldSubscriptionsRule', {
  enumerable: true,
  get: function get() {
    return _validation.SingleFieldSubscriptionsRule;
  }
});
Object.defineProperty(exports, 'UniqueArgumentNamesRule', {
  enumerable: true,
  get: function get() {
    return _validation.UniqueArgumentNamesRule;
  }
});
Object.defineProperty(exports, 'UniqueDirectivesPerLocationRule', {
  enumerable: true,
  get: function get() {
    return _validation.UniqueDirectivesPerLocationRule;
  }
});
Object.defineProperty(exports, 'UniqueFragmentNamesRule', {
  enumerable: true,
  get: function get() {
    return _validation.UniqueFragmentNamesRule;
  }
});
Object.defineProperty(exports, 'UniqueInputFieldNamesRule', {
  enumerable: true,
  get: function get() {
    return _validation.UniqueInputFieldNamesRule;
  }
});
Object.defineProperty(exports, 'UniqueOperationNamesRule', {
  enumerable: true,
  get: function get() {
    return _validation.UniqueOperationNamesRule;
  }
});
Object.defineProperty(exports, 'UniqueVariableNamesRule', {
  enumerable: true,
  get: function get() {
    return _validation.UniqueVariableNamesRule;
  }
});
Object.defineProperty(exports, 'ValuesOfCorrectTypeRule', {
  enumerable: true,
  get: function get() {
    return _validation.ValuesOfCorrectTypeRule;
  }
});
Object.defineProperty(exports, 'VariablesAreInputTypesRule', {
  enumerable: true,
  get: function get() {
    return _validation.VariablesAreInputTypesRule;
  }
});
Object.defineProperty(exports, 'VariablesDefaultValueAllowedRule', {
  enumerable: true,
  get: function get() {
    return _validation.VariablesDefaultValueAllowedRule;
  }
});
Object.defineProperty(exports, 'VariablesInAllowedPositionRule', {
  enumerable: true,
  get: function get() {
    return _validation.VariablesInAllowedPositionRule;
  }
});

var _error = require('./error');

Object.defineProperty(exports, 'GraphQLError', {
  enumerable: true,
  get: function get() {
    return _error.GraphQLError;
  }
});
Object.defineProperty(exports, 'formatError', {
  enumerable: true,
  get: function get() {
    return _error.formatError;
  }
});
Object.defineProperty(exports, 'printError', {
  enumerable: true,
  get: function get() {
    return _error.printError;
  }
});

var _utilities = require('./utilities');

Object.defineProperty(exports, 'getIntrospectionQuery', {
  enumerable: true,
  get: function get() {
    return _utilities.getIntrospectionQuery;
  }
});
Object.defineProperty(exports, 'introspectionQuery', {
  enumerable: true,
  get: function get() {
    return _utilities.introspectionQuery;
  }
});
Object.defineProperty(exports, 'getOperationAST', {
  enumerable: true,
  get: function get() {
    return _utilities.getOperationAST;
  }
});
Object.defineProperty(exports, 'introspectionFromSchema', {
  enumerable: true,
  get: function get() {
    return _utilities.introspectionFromSchema;
  }
});
Object.defineProperty(exports, 'buildClientSchema', {
  enumerable: true,
  get: function get() {
    return _utilities.buildClientSchema;
  }
});
Object.defineProperty(exports, 'buildASTSchema', {
  enumerable: true,
  get: function get() {
    return _utilities.buildASTSchema;
  }
});
Object.defineProperty(exports, 'buildSchema', {
  enumerable: true,
  get: function get() {
    return _utilities.buildSchema;
  }
});
Object.defineProperty(exports, 'getDescription', {
  enumerable: true,
  get: function get() {
    return _utilities.getDescription;
  }
});
Object.defineProperty(exports, 'extendSchema', {
  enumerable: true,
  get: function get() {
    return _utilities.extendSchema;
  }
});
Object.defineProperty(exports, 'lexicographicSortSchema', {
  enumerable: true,
  get: function get() {
    return _utilities.lexicographicSortSchema;
  }
});
Object.defineProperty(exports, 'printSchema', {
  enumerable: true,
  get: function get() {
    return _utilities.printSchema;
  }
});
Object.defineProperty(exports, 'printIntrospectionSchema', {
  enumerable: true,
  get: function get() {
    return _utilities.printIntrospectionSchema;
  }
});
Object.defineProperty(exports, 'printType', {
  enumerable: true,
  get: function get() {
    return _utilities.printType;
  }
});
Object.defineProperty(exports, 'typeFromAST', {
  enumerable: true,
  get: function get() {
    return _utilities.typeFromAST;
  }
});
Object.defineProperty(exports, 'valueFromAST', {
  enumerable: true,
  get: function get() {
    return _utilities.valueFromAST;
  }
});
Object.defineProperty(exports, 'valueFromASTUntyped', {
  enumerable: true,
  get: function get() {
    return _utilities.valueFromASTUntyped;
  }
});
Object.defineProperty(exports, 'astFromValue', {
  enumerable: true,
  get: function get() {
    return _utilities.astFromValue;
  }
});
Object.defineProperty(exports, 'TypeInfo', {
  enumerable: true,
  get: function get() {
    return _utilities.TypeInfo;
  }
});
Object.defineProperty(exports, 'coerceValue', {
  enumerable: true,
  get: function get() {
    return _utilities.coerceValue;
  }
});
Object.defineProperty(exports, 'isValidJSValue', {
  enumerable: true,
  get: function get() {
    return _utilities.isValidJSValue;
  }
});
Object.defineProperty(exports, 'isValidLiteralValue', {
  enumerable: true,
  get: function get() {
    return _utilities.isValidLiteralValue;
  }
});
Object.defineProperty(exports, 'concatAST', {
  enumerable: true,
  get: function get() {
    return _utilities.concatAST;
  }
});
Object.defineProperty(exports, 'separateOperations', {
  enumerable: true,
  get: function get() {
    return _utilities.separateOperations;
  }
});
Object.defineProperty(exports, 'isEqualType', {
  enumerable: true,
  get: function get() {
    return _utilities.isEqualType;
  }
});
Object.defineProperty(exports, 'isTypeSubTypeOf', {
  enumerable: true,
  get: function get() {
    return _utilities.isTypeSubTypeOf;
  }
});
Object.defineProperty(exports, 'doTypesOverlap', {
  enumerable: true,
  get: function get() {
    return _utilities.doTypesOverlap;
  }
});
Object.defineProperty(exports, 'assertValidName', {
  enumerable: true,
  get: function get() {
    return _utilities.assertValidName;
  }
});
Object.defineProperty(exports, 'isValidNameError', {
  enumerable: true,
  get: function get() {
    return _utilities.isValidNameError;
  }
});
Object.defineProperty(exports, 'findBreakingChanges', {
  enumerable: true,
  get: function get() {
    return _utilities.findBreakingChanges;
  }
});
Object.defineProperty(exports, 'findDangerousChanges', {
  enumerable: true,
  get: function get() {
    return _utilities.findDangerousChanges;
  }
});
Object.defineProperty(exports, 'BreakingChangeType', {
  enumerable: true,
  get: function get() {
    return _utilities.BreakingChangeType;
  }
});
Object.defineProperty(exports, 'DangerousChangeType', {
  enumerable: true,
  get: function get() {
    return _utilities.DangerousChangeType;
  }
});
Object.defineProperty(exports, 'findDeprecatedUsages', {
  enumerable: true,
  get: function get() {
    return _utilities.findDeprecatedUsages;
  }
});
},{"./error":94,"./execution":99,"./graphql":101,"./language":120,"./subscription":128,"./type":133,"./utilities":149,"./validation":162}],103:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = find;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function find(list, predicate) {
  for (var i = 0; i < list.length; i++) {
    if (predicate(list[i])) {
      return list[i];
    }
  }
}
},{}],104:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = process && process.env.NODE_ENV !== 'production' ? // eslint-disable-next-line no-shadow
function instanceOf(value, constructor) {
  if (value instanceof constructor) {
    return true;
  }
  if (value) {
    var valueClass = value.constructor;
    var className = constructor.name;
    if (valueClass && valueClass.name === className) {
      throw new Error('Cannot use ' + className + ' "' + value + '" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.');
    }
  }
  return false;
} : // eslint-disable-next-line no-shadow
function instanceOf(value, constructor) {
  return value instanceof constructor;
}; /**
    * Copyright (c) 2015-present, Facebook, Inc.
    *
    * This source code is licensed under the MIT license found in the
    * LICENSE file in the root directory of this source tree.
    *
    *  strict
    */

/**
 * A replacement for instanceof which includes an error warning when multi-realm
 * constructors are detected.
 */
}).call(this,require('_process'))
},{"_process":194}],105:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = invariant;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function invariant(condition, message) {
  /* istanbul ignore else */
  if (!condition) {
    throw new Error(message);
  }
}
},{}],106:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isInvalid;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

/**
 * Returns true if a value is undefined, or NaN.
 */
function isInvalid(value) {
  return value === undefined || value !== value;
}
},{}],107:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isNullish;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

/**
 * Returns true if a value is null, undefined, or NaN.
 */
function isNullish(value) {
  return value === null || value === undefined || value !== value;
}
},{}],108:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isPromise;


// eslint-disable-next-line no-redeclare
function isPromise(value) {
  return Boolean(value && typeof value.then === 'function');
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */

/**
 * Returns true if the value acts like a Promise, i.e. has a "then" function,
 * otherwise returns false.
 */
},{}],109:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = keyMap;


/**
 * Creates a keyed JS object from an array, given a function to produce the keys
 * for each value in the array.
 *
 * This provides a convenient lookup for the array items if the key function
 * produces unique results.
 *
 *     const phoneBook = [
 *       { name: 'Jon', num: '555-1234' },
 *       { name: 'Jenny', num: '867-5309' }
 *     ]
 *
 *     // { Jon: { name: 'Jon', num: '555-1234' },
 *     //   Jenny: { name: 'Jenny', num: '867-5309' } }
 *     const entriesByName = keyMap(
 *       phoneBook,
 *       entry => entry.name
 *     )
 *
 *     // { name: 'Jenny', num: '857-6309' }
 *     const jennyEntry = entriesByName['Jenny']
 *
 */
function keyMap(list, keyFn) {
  return list.reduce(function (map, item) {
    return map[keyFn(item)] = item, map;
  }, Object.create(null));
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{}],110:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = keyValMap;


/**
 * Creates a keyed JS object from an array, given a function to produce the keys
 * and a function to produce the values from each item in the array.
 *
 *     const phoneBook = [
 *       { name: 'Jon', num: '555-1234' },
 *       { name: 'Jenny', num: '867-5309' }
 *     ]
 *
 *     // { Jon: '555-1234', Jenny: '867-5309' }
 *     const phonesByName = keyValMap(
 *       phoneBook,
 *       entry => entry.name,
 *       entry => entry.num
 *     )
 *
 */
function keyValMap(list, keyFn, valFn) {
  return list.reduce(function (map, item) {
    return map[keyFn(item)] = valFn(item), map;
  }, Object.create(null));
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{}],111:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = memoize3;
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

/**
 * Memoizes the provided three-argument function.
 */
function memoize3(fn) {
  var cache0 = void 0;
  function memoized(a1, a2, a3) {
    if (!cache0) {
      cache0 = new WeakMap();
    }
    var cache1 = cache0.get(a1);
    var cache2 = void 0;
    if (cache1) {
      cache2 = cache1.get(a2);
      if (cache2) {
        var cachedValue = cache2.get(a3);
        if (cachedValue !== undefined) {
          return cachedValue;
        }
      }
    } else {
      cache1 = new WeakMap();
      cache0.set(a1, cache1);
    }
    if (!cache2) {
      cache2 = new WeakMap();
      cache1.set(a2, cache2);
    }
    var newValue = fn.apply(this, arguments);
    cache2.set(a3, newValue);
    return newValue;
  }
  return memoized;
}
},{}],112:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


/* eslint-disable no-redeclare */
// $FlowFixMe workaround for: https://github.com/facebook/flow/issues/2221
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

var objectValues = Object.values || function (obj) {
  return Object.keys(obj).map(function (key) {
    return obj[key];
  });
};
exports.default = objectValues;
},{}],113:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = orList;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

var MAX_LENGTH = 5;

/**
 * Given [ A, B, C ] return 'A, B, or C'.
 */
function orList(items) {
  var selected = items.slice(0, MAX_LENGTH);
  return selected.reduce(function (list, quoted, index) {
    return list + (selected.length > 2 ? ', ' : ' ') + (index === selected.length - 1 ? 'or ' : '') + quoted;
  });
}
},{}],114:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = promiseForObject;


/**
 * This function transforms a JS object `ObjMap<Promise<T>>` into
 * a `Promise<ObjMap<T>>`
 *
 * This is akin to bluebird's `Promise.props`, but implemented only using
 * `Promise.all` so it will work with any implementation of ES6 promises.
 */
function promiseForObject(object) {
  var keys = Object.keys(object);
  var valuesAndPromises = keys.map(function (name) {
    return object[name];
  });
  return Promise.all(valuesAndPromises).then(function (values) {
    return values.reduce(function (resolvedObject, value, i) {
      resolvedObject[keys[i]] = value;
      return resolvedObject;
    }, Object.create(null));
  });
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{}],115:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = promiseReduce;

var _isPromise = require('./isPromise');

var _isPromise2 = _interopRequireDefault(_isPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Similar to Array.prototype.reduce(), however the reducing callback may return
 * a Promise, in which case reduction will continue after each promise resolves.
 *
 * If the callback does not return a Promise, then this function will also not
 * return a Promise.
 */
function promiseReduce(values, callback, initialValue) {
  return values.reduce(function (previous, value) {
    return (0, _isPromise2.default)(previous) ? previous.then(function (resolved) {
      return callback(resolved, value);
    }) : callback(previous, value);
  }, initialValue);
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{"./isPromise":108}],116:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quotedOrList;

var _orList = require('./orList');

var _orList2 = _interopRequireDefault(_orList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given [ A, B, C ] return '"A", "B", or "C"'.
 */
function quotedOrList(items) {
  return (0, _orList2.default)(items.map(function (item) {
    return '"' + item + '"';
  }));
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{"./orList":113}],117:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = suggestionList;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

/**
 * Given an invalid input string and a list of valid options, returns a filtered
 * list of valid options sorted based on their similarity with the input.
 */
function suggestionList(input, options) {
  var optionsByDistance = Object.create(null);
  var oLength = options.length;
  var inputThreshold = input.length / 2;
  for (var i = 0; i < oLength; i++) {
    var distance = lexicalDistance(input, options[i]);
    var threshold = Math.max(inputThreshold, options[i].length / 2, 1);
    if (distance <= threshold) {
      optionsByDistance[options[i]] = distance;
    }
  }
  return Object.keys(optionsByDistance).sort(function (a, b) {
    return optionsByDistance[a] - optionsByDistance[b];
  });
}

/**
 * Computes the lexical distance between strings A and B.
 *
 * The "distance" between two strings is given by counting the minimum number
 * of edits needed to transform string A into string B. An edit can be an
 * insertion, deletion, or substitution of a single character, or a swap of two
 * adjacent characters.
 *
 * Includes a custom alteration from Damerau-Levenshtein to treat case changes
 * as a single edit which helps identify mis-cased values with an edit distance
 * of 1.
 *
 * This distance can be useful for detecting typos in input or sorting
 *
 * @param {string} a
 * @param {string} b
 * @return {int} distance in number of edits
 */
function lexicalDistance(aStr, bStr) {
  if (aStr === bStr) {
    return 0;
  }

  var i = void 0;
  var j = void 0;
  var d = [];
  var a = aStr.toLowerCase();
  var b = bStr.toLowerCase();
  var aLength = a.length;
  var bLength = b.length;

  // Any case change counts as a single edit
  if (a === b) {
    return 1;
  }

  for (i = 0; i <= aLength; i++) {
    d[i] = [i];
  }

  for (j = 1; j <= bLength; j++) {
    d[0][j] = j;
  }

  for (i = 1; i <= aLength; i++) {
    for (j = 1; j <= bLength; j++) {
      var cost = a[i - 1] === b[j - 1] ? 0 : 1;

      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
      }
    }
  }

  return d[aLength][bLength];
}
},{}],118:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = blockStringValue;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

/**
 * Produces the value of a block string from its parsed raw value, similar to
 * Coffeescript's block string, Python's docstring trim or Ruby's strip_heredoc.
 *
 * This implements the GraphQL spec's BlockStringValue() static algorithm.
 */
function blockStringValue(rawString) {
  // Expand a block string's raw value into independent lines.
  var lines = rawString.split(/\r\n|[\n\r]/g);

  // Remove common indentation from all lines but first.
  var commonIndent = null;
  for (var i = 1; i < lines.length; i++) {
    var line = lines[i];
    var indent = leadingWhitespace(line);
    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {
      commonIndent = indent;
      if (commonIndent === 0) {
        break;
      }
    }
  }

  if (commonIndent) {
    for (var _i = 1; _i < lines.length; _i++) {
      lines[_i] = lines[_i].slice(commonIndent);
    }
  }

  // Remove leading and trailing blank lines.
  while (lines.length > 0 && isBlank(lines[0])) {
    lines.shift();
  }
  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {
    lines.pop();
  }

  // Return a string of the lines joined with U+000A.
  return lines.join('\n');
}

function leadingWhitespace(str) {
  var i = 0;
  while (i < str.length && (str[i] === ' ' || str[i] === '\t')) {
    i++;
  }
  return i;
}

function isBlank(str) {
  return leadingWhitespace(str) === str.length;
}
},{}],119:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

/**
 * The set of allowed directive location values.
 */
var DirectiveLocation = exports.DirectiveLocation = Object.freeze({
  // Request Definitions
  QUERY: 'QUERY',
  MUTATION: 'MUTATION',
  SUBSCRIPTION: 'SUBSCRIPTION',
  FIELD: 'FIELD',
  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',
  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',
  INLINE_FRAGMENT: 'INLINE_FRAGMENT',
  // Type System Definitions
  SCHEMA: 'SCHEMA',
  SCALAR: 'SCALAR',
  OBJECT: 'OBJECT',
  FIELD_DEFINITION: 'FIELD_DEFINITION',
  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',
  INTERFACE: 'INTERFACE',
  UNION: 'UNION',
  ENUM: 'ENUM',
  ENUM_VALUE: 'ENUM_VALUE',
  INPUT_OBJECT: 'INPUT_OBJECT',
  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'
});

/**
 * The enum type representing the directive location values.
 */
},{}],120:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _location = require('./location');

Object.defineProperty(exports, 'getLocation', {
  enumerable: true,
  get: function get() {
    return _location.getLocation;
  }
});

var _kinds = require('./kinds');

Object.defineProperty(exports, 'Kind', {
  enumerable: true,
  get: function get() {
    return _kinds.Kind;
  }
});

var _lexer = require('./lexer');

Object.defineProperty(exports, 'createLexer', {
  enumerable: true,
  get: function get() {
    return _lexer.createLexer;
  }
});
Object.defineProperty(exports, 'TokenKind', {
  enumerable: true,
  get: function get() {
    return _lexer.TokenKind;
  }
});

var _parser = require('./parser');

Object.defineProperty(exports, 'parse', {
  enumerable: true,
  get: function get() {
    return _parser.parse;
  }
});
Object.defineProperty(exports, 'parseValue', {
  enumerable: true,
  get: function get() {
    return _parser.parseValue;
  }
});
Object.defineProperty(exports, 'parseType', {
  enumerable: true,
  get: function get() {
    return _parser.parseType;
  }
});

var _printer = require('./printer');

Object.defineProperty(exports, 'print', {
  enumerable: true,
  get: function get() {
    return _printer.print;
  }
});

var _source = require('./source');

Object.defineProperty(exports, 'Source', {
  enumerable: true,
  get: function get() {
    return _source.Source;
  }
});

var _visitor = require('./visitor');

Object.defineProperty(exports, 'visit', {
  enumerable: true,
  get: function get() {
    return _visitor.visit;
  }
});
Object.defineProperty(exports, 'visitInParallel', {
  enumerable: true,
  get: function get() {
    return _visitor.visitInParallel;
  }
});
Object.defineProperty(exports, 'visitWithTypeInfo', {
  enumerable: true,
  get: function get() {
    return _visitor.visitWithTypeInfo;
  }
});
Object.defineProperty(exports, 'getVisitFn', {
  enumerable: true,
  get: function get() {
    return _visitor.getVisitFn;
  }
});
Object.defineProperty(exports, 'BREAK', {
  enumerable: true,
  get: function get() {
    return _visitor.BREAK;
  }
});

var _directiveLocation = require('./directiveLocation');

Object.defineProperty(exports, 'DirectiveLocation', {
  enumerable: true,
  get: function get() {
    return _directiveLocation.DirectiveLocation;
  }
});
},{"./directiveLocation":119,"./kinds":121,"./lexer":122,"./location":123,"./parser":124,"./printer":125,"./source":126,"./visitor":127}],121:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

/**
 * The set of allowed kind values for AST nodes.
 */
var Kind = exports.Kind = Object.freeze({
  // Name
  NAME: 'Name',

  // Document
  DOCUMENT: 'Document',
  OPERATION_DEFINITION: 'OperationDefinition',
  VARIABLE_DEFINITION: 'VariableDefinition',
  VARIABLE: 'Variable',
  SELECTION_SET: 'SelectionSet',
  FIELD: 'Field',
  ARGUMENT: 'Argument',

  // Fragments
  FRAGMENT_SPREAD: 'FragmentSpread',
  INLINE_FRAGMENT: 'InlineFragment',
  FRAGMENT_DEFINITION: 'FragmentDefinition',

  // Values
  INT: 'IntValue',
  FLOAT: 'FloatValue',
  STRING: 'StringValue',
  BOOLEAN: 'BooleanValue',
  NULL: 'NullValue',
  ENUM: 'EnumValue',
  LIST: 'ListValue',
  OBJECT: 'ObjectValue',
  OBJECT_FIELD: 'ObjectField',

  // Directives
  DIRECTIVE: 'Directive',

  // Types
  NAMED_TYPE: 'NamedType',
  LIST_TYPE: 'ListType',
  NON_NULL_TYPE: 'NonNullType',

  // Type System Definitions
  SCHEMA_DEFINITION: 'SchemaDefinition',
  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',

  // Type Definitions
  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',
  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',
  FIELD_DEFINITION: 'FieldDefinition',
  INPUT_VALUE_DEFINITION: 'InputValueDefinition',
  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',
  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',
  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',
  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',
  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',

  // Type Extensions
  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',
  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',
  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',
  UNION_TYPE_EXTENSION: 'UnionTypeExtension',
  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',
  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension',

  // Directive Definitions
  DIRECTIVE_DEFINITION: 'DirectiveDefinition'
});

/**
 * The enum type representing the possible kind values of AST nodes.
 */
},{}],122:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TokenKind = undefined;
exports.createLexer = createLexer;
exports.getTokenDesc = getTokenDesc;

var _error = require('../error');

var _blockStringValue = require('./blockStringValue');

var _blockStringValue2 = _interopRequireDefault(_blockStringValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given a Source object, this returns a Lexer for that source.
 * A Lexer is a stateful stream generator in that every time
 * it is advanced, it returns the next token in the Source. Assuming the
 * source lexes, the final Token emitted by the lexer will be of kind
 * EOF, after which the lexer will repeatedly return the same EOF token
 * whenever called.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function createLexer(source, options) {
  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);
  var lexer = {
    source: source,
    options: options,
    lastToken: startOfFileToken,
    token: startOfFileToken,
    line: 1,
    lineStart: 0,
    advance: advanceLexer,
    lookahead: lookahead
  };
  return lexer;
}

function advanceLexer() {
  this.lastToken = this.token;
  var token = this.token = this.lookahead();
  return token;
}

function lookahead() {
  var token = this.token;
  if (token.kind !== TokenKind.EOF) {
    do {
      // Note: next is only mutable during parsing, so we cast to allow this.
      token = token.next || (token.next = readToken(this, token));
    } while (token.kind === TokenKind.COMMENT);
  }
  return token;
}

/**
 * The return type of createLexer.
 */


/**
 * An exported enum describing the different kinds of tokens that the
 * lexer emits.
 */
var TokenKind = exports.TokenKind = Object.freeze({
  SOF: '<SOF>',
  EOF: '<EOF>',
  BANG: '!',
  DOLLAR: '$',
  AMP: '&',
  PAREN_L: '(',
  PAREN_R: ')',
  SPREAD: '...',
  COLON: ':',
  EQUALS: '=',
  AT: '@',
  BRACKET_L: '[',
  BRACKET_R: ']',
  BRACE_L: '{',
  PIPE: '|',
  BRACE_R: '}',
  NAME: 'Name',
  INT: 'Int',
  FLOAT: 'Float',
  STRING: 'String',
  BLOCK_STRING: 'BlockString',
  COMMENT: 'Comment'
});

/**
 * The enum type representing the token kinds values.
 */


/**
 * A helper function to describe a token as a string for debugging
 */
function getTokenDesc(token) {
  var value = token.value;
  return value ? token.kind + ' "' + value + '"' : token.kind;
}

var charCodeAt = String.prototype.charCodeAt;
var slice = String.prototype.slice;

/**
 * Helper function for constructing the Token object.
 */
function Tok(kind, start, end, line, column, prev, value) {
  this.kind = kind;
  this.start = start;
  this.end = end;
  this.line = line;
  this.column = column;
  this.value = value;
  this.prev = prev;
  this.next = null;
}

// Print a simplified form when appearing in JSON/util.inspect.
Tok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {
  return {
    kind: this.kind,
    value: this.value,
    line: this.line,
    column: this.column
  };
};

function printCharCode(code) {
  return (
    // NaN/undefined represents access beyond the end of the file.
    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.
    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.
    '"\\u' + ('00' + code.toString(16).toUpperCase()).slice(-4) + '"'
  );
}

/**
 * Gets the next token from the source starting at the given position.
 *
 * This skips over whitespace and comments until it finds the next lexable
 * token, then lexes punctuators immediately or calls the appropriate helper
 * function for more complicated tokens.
 */
function readToken(lexer, prev) {
  var source = lexer.source;
  var body = source.body;
  var bodyLength = body.length;

  var pos = positionAfterWhitespace(body, prev.end, lexer);
  var line = lexer.line;
  var col = 1 + pos - lexer.lineStart;

  if (pos >= bodyLength) {
    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
  }

  var code = charCodeAt.call(body, pos);

  // SourceCharacter
  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
    throw (0, _error.syntaxError)(source, pos, 'Cannot contain the invalid character ' + printCharCode(code) + '.');
  }

  switch (code) {
    // !
    case 33:
      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);
    // #
    case 35:
      return readComment(source, pos, line, col, prev);
    // $
    case 36:
      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);
    // &
    case 38:
      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);
    // (
    case 40:
      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);
    // )
    case 41:
      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);
    // .
    case 46:
      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {
        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);
      }
      break;
    // :
    case 58:
      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);
    // =
    case 61:
      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);
    // @
    case 64:
      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);
    // [
    case 91:
      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);
    // ]
    case 93:
      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);
    // {
    case 123:
      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);
    // |
    case 124:
      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);
    // }
    case 125:
      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);
    // A-Z _ a-z
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 95:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
      return readName(source, pos, line, col, prev);
    // - 0-9
    case 45:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      return readNumber(source, pos, code, line, col, prev);
    // "
    case 34:
      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {
        return readBlockString(source, pos, line, col, prev);
      }
      return readString(source, pos, line, col, prev);
  }

  throw (0, _error.syntaxError)(source, pos, unexpectedCharacterMessage(code));
}

/**
 * Report a message that an unexpected character was encountered.
 */
function unexpectedCharacterMessage(code) {
  if (code === 39) {
    // '
    return "Unexpected single quote character ('), did you mean to use " + 'a double quote (")?';
  }

  return 'Cannot parse the unexpected character ' + printCharCode(code) + '.';
}

/**
 * Reads from body starting at startPosition until it finds a non-whitespace
 * or commented character, then returns the position of that character for
 * lexing.
 */
function positionAfterWhitespace(body, startPosition, lexer) {
  var bodyLength = body.length;
  var position = startPosition;
  while (position < bodyLength) {
    var code = charCodeAt.call(body, position);
    // tab | space | comma | BOM
    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {
      ++position;
    } else if (code === 10) {
      // new line
      ++position;
      ++lexer.line;
      lexer.lineStart = position;
    } else if (code === 13) {
      // carriage return
      if (charCodeAt.call(body, position + 1) === 10) {
        position += 2;
      } else {
        ++position;
      }
      ++lexer.line;
      lexer.lineStart = position;
    } else {
      break;
    }
  }
  return position;
}

/**
 * Reads a comment token from the source file.
 *
 * #[\u0009\u0020-\uFFFF]*
 */
function readComment(source, start, line, col, prev) {
  var body = source.body;
  var code = void 0;
  var position = start;

  do {
    code = charCodeAt.call(body, ++position);
  } while (code !== null && (
  // SourceCharacter but not LineTerminator
  code > 0x001f || code === 0x0009));

  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));
}

/**
 * Reads a number token from the source file, either a float
 * or an int depending on whether a decimal point appears.
 *
 * Int:   -?(0|[1-9][0-9]*)
 * Float: -?(0|[1-9][0-9]*)(\.[0-9]+)?((E|e)(+|-)?[0-9]+)?
 */
function readNumber(source, start, firstCode, line, col, prev) {
  var body = source.body;
  var code = firstCode;
  var position = start;
  var isFloat = false;

  if (code === 45) {
    // -
    code = charCodeAt.call(body, ++position);
  }

  if (code === 48) {
    // 0
    code = charCodeAt.call(body, ++position);
    if (code >= 48 && code <= 57) {
      throw (0, _error.syntaxError)(source, position, 'Invalid number, unexpected digit after 0: ' + printCharCode(code) + '.');
    }
  } else {
    position = readDigits(source, position, code);
    code = charCodeAt.call(body, position);
  }

  if (code === 46) {
    // .
    isFloat = true;

    code = charCodeAt.call(body, ++position);
    position = readDigits(source, position, code);
    code = charCodeAt.call(body, position);
  }

  if (code === 69 || code === 101) {
    // E e
    isFloat = true;

    code = charCodeAt.call(body, ++position);
    if (code === 43 || code === 45) {
      // + -
      code = charCodeAt.call(body, ++position);
    }
    position = readDigits(source, position, code);
  }

  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));
}

/**
 * Returns the new position in the source after reading digits.
 */
function readDigits(source, start, firstCode) {
  var body = source.body;
  var position = start;
  var code = firstCode;
  if (code >= 48 && code <= 57) {
    // 0 - 9
    do {
      code = charCodeAt.call(body, ++position);
    } while (code >= 48 && code <= 57); // 0 - 9
    return position;
  }
  throw (0, _error.syntaxError)(source, position, 'Invalid number, expected digit but got: ' + printCharCode(code) + '.');
}

/**
 * Reads a string token from the source file.
 *
 * "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
 */
function readString(source, start, line, col, prev) {
  var body = source.body;
  var position = start + 1;
  var chunkStart = position;
  var code = 0;
  var value = '';

  while (position < body.length && (code = charCodeAt.call(body, position)) !== null &&
  // not LineTerminator
  code !== 0x000a && code !== 0x000d) {
    // Closing Quote (")
    if (code === 34) {
      value += slice.call(body, chunkStart, position);
      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);
    }

    // SourceCharacter
    if (code < 0x0020 && code !== 0x0009) {
      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');
    }

    ++position;
    if (code === 92) {
      // \
      value += slice.call(body, chunkStart, position - 1);
      code = charCodeAt.call(body, position);
      switch (code) {
        case 34:
          value += '"';
          break;
        case 47:
          value += '/';
          break;
        case 92:
          value += '\\';
          break;
        case 98:
          value += '\b';
          break;
        case 102:
          value += '\f';
          break;
        case 110:
          value += '\n';
          break;
        case 114:
          value += '\r';
          break;
        case 116:
          value += '\t';
          break;
        case 117:
          // u
          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));
          if (charCode < 0) {
            throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: ' + ('\\u' + body.slice(position + 1, position + 5) + '.'));
          }
          value += String.fromCharCode(charCode);
          position += 4;
          break;
        default:
          throw (0, _error.syntaxError)(source, position, 'Invalid character escape sequence: \\' + String.fromCharCode(code) + '.');
      }
      ++position;
      chunkStart = position;
    }
  }

  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');
}

/**
 * Reads a block string token from the source file.
 *
 * """("?"?(\\"""|\\(?!=""")|[^"\\]))*"""
 */
function readBlockString(source, start, line, col, prev) {
  var body = source.body;
  var position = start + 3;
  var chunkStart = position;
  var code = 0;
  var rawValue = '';

  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {
    // Closing Triple-Quote (""")
    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {
      rawValue += slice.call(body, chunkStart, position);
      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, (0, _blockStringValue2.default)(rawValue));
    }

    // SourceCharacter
    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {
      throw (0, _error.syntaxError)(source, position, 'Invalid character within String: ' + printCharCode(code) + '.');
    }

    // Escape Triple-Quote (\""")
    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {
      rawValue += slice.call(body, chunkStart, position) + '"""';
      position += 4;
      chunkStart = position;
    } else {
      ++position;
    }
  }

  throw (0, _error.syntaxError)(source, position, 'Unterminated string.');
}

/**
 * Converts four hexidecimal chars to the integer that the
 * string represents. For example, uniCharCode('0','0','0','f')
 * will return 15, and uniCharCode('0','0','f','f') returns 255.
 *
 * Returns a negative number on error, if a char was invalid.
 *
 * This is implemented by noting that char2hex() returns -1 on error,
 * which means the result of ORing the char2hex() will also be negative.
 */
function uniCharCode(a, b, c, d) {
  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);
}

/**
 * Converts a hex character to its integer value.
 * '0' becomes 0, '9' becomes 9
 * 'A' becomes 10, 'F' becomes 15
 * 'a' becomes 10, 'f' becomes 15
 *
 * Returns -1 on error.
 */
function char2hex(a) {
  return a >= 48 && a <= 57 ? a - 48 // 0-9
  : a >= 65 && a <= 70 ? a - 55 // A-F
  : a >= 97 && a <= 102 ? a - 87 // a-f
  : -1;
}

/**
 * Reads an alphanumeric + underscore name from the source.
 *
 * [_A-Za-z][_0-9A-Za-z]*
 */
function readName(source, start, line, col, prev) {
  var body = source.body;
  var bodyLength = body.length;
  var position = start + 1;
  var code = 0;
  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _
  code >= 48 && code <= 57 || // 0-9
  code >= 65 && code <= 90 || // A-Z
  code >= 97 && code <= 122) // a-z
  ) {
    ++position;
  }
  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));
}
},{"../error":94,"./blockStringValue":118}],123:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLocation = getLocation;


/**
 * Takes a Source and a UTF-8 character offset, and returns the corresponding
 * line and column as a SourceLocation.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function getLocation(source, position) {
  var lineRegexp = /\r\n|[\n\r]/g;
  var line = 1;
  var column = position + 1;
  var match = void 0;
  while ((match = lineRegexp.exec(source.body)) && match.index < position) {
    line += 1;
    column = position + 1 - (match.index + match[0].length);
  }
  return { line: line, column: column };
}

/**
 * Represents a location in a Source.
 */
},{}],124:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = parse;
exports.parseValue = parseValue;
exports.parseType = parseType;
exports.parseConstValue = parseConstValue;
exports.parseTypeReference = parseTypeReference;
exports.parseNamedType = parseNamedType;

var _source = require('./source');

var _error = require('../error');

var _lexer = require('./lexer');

var _kinds = require('./kinds');

var _directiveLocation = require('./directiveLocation');

/**
 * Given a GraphQL source, parses it into a Document.
 * Throws GraphQLError if a syntax error is encountered.
 */


/**
 * Configuration options to control parser behavior
 */
function parse(source, options) {
  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;
  if (!(sourceObj instanceof _source.Source)) {
    throw new TypeError('Must provide Source. Received: ' + String(sourceObj));
  }
  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});
  return parseDocument(lexer);
}

/**
 * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
 * that value.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Values directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: valueFromAST().
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function parseValue(source, options) {
  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;
  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});
  expect(lexer, _lexer.TokenKind.SOF);
  var value = parseValueLiteral(lexer, false);
  expect(lexer, _lexer.TokenKind.EOF);
  return value;
}

/**
 * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
 * that type.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Types directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: typeFromAST().
 */
function parseType(source, options) {
  var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;
  var lexer = (0, _lexer.createLexer)(sourceObj, options || {});
  expect(lexer, _lexer.TokenKind.SOF);
  var type = parseTypeReference(lexer);
  expect(lexer, _lexer.TokenKind.EOF);
  return type;
}

/**
 * Converts a name lex token into a name parse node.
 */
function parseName(lexer) {
  var token = expect(lexer, _lexer.TokenKind.NAME);
  return {
    kind: _kinds.Kind.NAME,
    value: token.value,
    loc: loc(lexer, token)
  };
}

// Implements the parsing rules in the Document section.

/**
 * Document : Definition+
 */
function parseDocument(lexer) {
  var start = lexer.token;
  expect(lexer, _lexer.TokenKind.SOF);
  var definitions = [];
  do {
    definitions.push(parseDefinition(lexer));
  } while (!skip(lexer, _lexer.TokenKind.EOF));

  return {
    kind: _kinds.Kind.DOCUMENT,
    definitions: definitions,
    loc: loc(lexer, start)
  };
}

/**
 * Definition :
 *   - ExecutableDefinition
 *   - TypeSystemDefinition
 */
function parseDefinition(lexer) {
  if (peek(lexer, _lexer.TokenKind.NAME)) {
    switch (lexer.token.value) {
      case 'query':
      case 'mutation':
      case 'subscription':
      case 'fragment':
        return parseExecutableDefinition(lexer);
      case 'schema':
      case 'scalar':
      case 'type':
      case 'interface':
      case 'union':
      case 'enum':
      case 'input':
      case 'extend':
      case 'directive':
        // Note: The schema definition language is an experimental addition.
        return parseTypeSystemDefinition(lexer);
    }
  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {
    return parseExecutableDefinition(lexer);
  } else if (peekDescription(lexer)) {
    // Note: The schema definition language is an experimental addition.
    return parseTypeSystemDefinition(lexer);
  }

  throw unexpected(lexer);
}

/**
 * ExecutableDefinition :
 *   - OperationDefinition
 *   - FragmentDefinition
 */
function parseExecutableDefinition(lexer) {
  if (peek(lexer, _lexer.TokenKind.NAME)) {
    switch (lexer.token.value) {
      case 'query':
      case 'mutation':
      case 'subscription':
        return parseOperationDefinition(lexer);

      case 'fragment':
        return parseFragmentDefinition(lexer);
    }
  } else if (peek(lexer, _lexer.TokenKind.BRACE_L)) {
    return parseOperationDefinition(lexer);
  }

  throw unexpected(lexer);
}

// Implements the parsing rules in the Operations section.

/**
 * OperationDefinition :
 *  - SelectionSet
 *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
 */
function parseOperationDefinition(lexer) {
  var start = lexer.token;
  if (peek(lexer, _lexer.TokenKind.BRACE_L)) {
    return {
      kind: _kinds.Kind.OPERATION_DEFINITION,
      operation: 'query',
      name: undefined,
      variableDefinitions: [],
      directives: [],
      selectionSet: parseSelectionSet(lexer),
      loc: loc(lexer, start)
    };
  }
  var operation = parseOperationType(lexer);
  var name = void 0;
  if (peek(lexer, _lexer.TokenKind.NAME)) {
    name = parseName(lexer);
  }
  return {
    kind: _kinds.Kind.OPERATION_DEFINITION,
    operation: operation,
    name: name,
    variableDefinitions: parseVariableDefinitions(lexer),
    directives: parseDirectives(lexer, false),
    selectionSet: parseSelectionSet(lexer),
    loc: loc(lexer, start)
  };
}

/**
 * OperationType : one of query mutation subscription
 */
function parseOperationType(lexer) {
  var operationToken = expect(lexer, _lexer.TokenKind.NAME);
  switch (operationToken.value) {
    case 'query':
      return 'query';
    case 'mutation':
      return 'mutation';
    case 'subscription':
      return 'subscription';
  }

  throw unexpected(lexer, operationToken);
}

/**
 * VariableDefinitions : ( VariableDefinition+ )
 */
function parseVariableDefinitions(lexer) {
  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, parseVariableDefinition, _lexer.TokenKind.PAREN_R) : [];
}

/**
 * VariableDefinition : Variable : Type DefaultValue?
 */
function parseVariableDefinition(lexer) {
  var start = lexer.token;
  return {
    kind: _kinds.Kind.VARIABLE_DEFINITION,
    variable: parseVariable(lexer),
    type: (expect(lexer, _lexer.TokenKind.COLON), parseTypeReference(lexer)),
    defaultValue: skip(lexer, _lexer.TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,
    loc: loc(lexer, start)
  };
}

/**
 * Variable : $ Name
 */
function parseVariable(lexer) {
  var start = lexer.token;
  expect(lexer, _lexer.TokenKind.DOLLAR);
  return {
    kind: _kinds.Kind.VARIABLE,
    name: parseName(lexer),
    loc: loc(lexer, start)
  };
}

/**
 * SelectionSet : { Selection+ }
 */
function parseSelectionSet(lexer) {
  var start = lexer.token;
  return {
    kind: _kinds.Kind.SELECTION_SET,
    selections: many(lexer, _lexer.TokenKind.BRACE_L, parseSelection, _lexer.TokenKind.BRACE_R),
    loc: loc(lexer, start)
  };
}

/**
 * Selection :
 *   - Field
 *   - FragmentSpread
 *   - InlineFragment
 */
function parseSelection(lexer) {
  return peek(lexer, _lexer.TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);
}

/**
 * Field : Alias? Name Arguments? Directives? SelectionSet?
 *
 * Alias : Name :
 */
function parseField(lexer) {
  var start = lexer.token;

  var nameOrAlias = parseName(lexer);
  var alias = void 0;
  var name = void 0;
  if (skip(lexer, _lexer.TokenKind.COLON)) {
    alias = nameOrAlias;
    name = parseName(lexer);
  } else {
    name = nameOrAlias;
  }

  return {
    kind: _kinds.Kind.FIELD,
    alias: alias,
    name: name,
    arguments: parseArguments(lexer, false),
    directives: parseDirectives(lexer, false),
    selectionSet: peek(lexer, _lexer.TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,
    loc: loc(lexer, start)
  };
}

/**
 * Arguments[Const] : ( Argument[?Const]+ )
 */
function parseArguments(lexer, isConst) {
  var item = isConst ? parseConstArgument : parseArgument;
  return peek(lexer, _lexer.TokenKind.PAREN_L) ? many(lexer, _lexer.TokenKind.PAREN_L, item, _lexer.TokenKind.PAREN_R) : [];
}

/**
 * Argument[Const] : Name : Value[?Const]
 */
function parseArgument(lexer) {
  var start = lexer.token;
  return {
    kind: _kinds.Kind.ARGUMENT,
    name: parseName(lexer),
    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, false)),
    loc: loc(lexer, start)
  };
}

function parseConstArgument(lexer) {
  var start = lexer.token;
  return {
    kind: _kinds.Kind.ARGUMENT,
    name: parseName(lexer),
    value: (expect(lexer, _lexer.TokenKind.COLON), parseConstValue(lexer)),
    loc: loc(lexer, start)
  };
}

// Implements the parsing rules in the Fragments section.

/**
 * Corresponds to both FragmentSpread and InlineFragment in the spec.
 *
 * FragmentSpread : ... FragmentName Directives?
 *
 * InlineFragment : ... TypeCondition? Directives? SelectionSet
 */
function parseFragment(lexer) {
  var start = lexer.token;
  expect(lexer, _lexer.TokenKind.SPREAD);
  if (peek(lexer, _lexer.TokenKind.NAME) && lexer.token.value !== 'on') {
    return {
      kind: _kinds.Kind.FRAGMENT_SPREAD,
      name: parseFragmentName(lexer),
      directives: parseDirectives(lexer, false),
      loc: loc(lexer, start)
    };
  }
  var typeCondition = void 0;
  if (lexer.token.value === 'on') {
    lexer.advance();
    typeCondition = parseNamedType(lexer);
  }
  return {
    kind: _kinds.Kind.INLINE_FRAGMENT,
    typeCondition: typeCondition,
    directives: parseDirectives(lexer, false),
    selectionSet: parseSelectionSet(lexer),
    loc: loc(lexer, start)
  };
}

/**
 * FragmentDefinition :
 *   - fragment FragmentName on TypeCondition Directives? SelectionSet
 *
 * TypeCondition : NamedType
 */
function parseFragmentDefinition(lexer) {
  var start = lexer.token;
  expectKeyword(lexer, 'fragment');
  // Experimental support for defining variables within fragments changes
  // the grammar of FragmentDefinition:
  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet
  if (lexer.options.experimentalFragmentVariables) {
    return {
      kind: _kinds.Kind.FRAGMENT_DEFINITION,
      name: parseFragmentName(lexer),
      variableDefinitions: parseVariableDefinitions(lexer),
      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),
      directives: parseDirectives(lexer, false),
      selectionSet: parseSelectionSet(lexer),
      loc: loc(lexer, start)
    };
  }
  return {
    kind: _kinds.Kind.FRAGMENT_DEFINITION,
    name: parseFragmentName(lexer),
    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),
    directives: parseDirectives(lexer, false),
    selectionSet: parseSelectionSet(lexer),
    loc: loc(lexer, start)
  };
}

/**
 * FragmentName : Name but not `on`
 */
function parseFragmentName(lexer) {
  if (lexer.token.value === 'on') {
    throw unexpected(lexer);
  }
  return parseName(lexer);
}

// Implements the parsing rules in the Values section.

/**
 * Value[Const] :
 *   - [~Const] Variable
 *   - IntValue
 *   - FloatValue
 *   - StringValue
 *   - BooleanValue
 *   - NullValue
 *   - EnumValue
 *   - ListValue[?Const]
 *   - ObjectValue[?Const]
 *
 * BooleanValue : one of `true` `false`
 *
 * NullValue : `null`
 *
 * EnumValue : Name but not `true`, `false` or `null`
 */
function parseValueLiteral(lexer, isConst) {
  var token = lexer.token;
  switch (token.kind) {
    case _lexer.TokenKind.BRACKET_L:
      return parseList(lexer, isConst);
    case _lexer.TokenKind.BRACE_L:
      return parseObject(lexer, isConst);
    case _lexer.TokenKind.INT:
      lexer.advance();
      return {
        kind: _kinds.Kind.INT,
        value: token.value,
        loc: loc(lexer, token)
      };
    case _lexer.TokenKind.FLOAT:
      lexer.advance();
      return {
        kind: _kinds.Kind.FLOAT,
        value: token.value,
        loc: loc(lexer, token)
      };
    case _lexer.TokenKind.STRING:
    case _lexer.TokenKind.BLOCK_STRING:
      return parseStringLiteral(lexer);
    case _lexer.TokenKind.NAME:
      if (token.value === 'true' || token.value === 'false') {
        lexer.advance();
        return {
          kind: _kinds.Kind.BOOLEAN,
          value: token.value === 'true',
          loc: loc(lexer, token)
        };
      } else if (token.value === 'null') {
        lexer.advance();
        return {
          kind: _kinds.Kind.NULL,
          loc: loc(lexer, token)
        };
      }
      lexer.advance();
      return {
        kind: _kinds.Kind.ENUM,
        value: token.value,
        loc: loc(lexer, token)
      };
    case _lexer.TokenKind.DOLLAR:
      if (!isConst) {
        return parseVariable(lexer);
      }
      break;
  }
  throw unexpected(lexer);
}

function parseStringLiteral(lexer) {
  var token = lexer.token;
  lexer.advance();
  return {
    kind: _kinds.Kind.STRING,
    value: token.value,
    block: token.kind === _lexer.TokenKind.BLOCK_STRING,
    loc: loc(lexer, token)
  };
}

function parseConstValue(lexer) {
  return parseValueLiteral(lexer, true);
}

function parseValueValue(lexer) {
  return parseValueLiteral(lexer, false);
}

/**
 * ListValue[Const] :
 *   - [ ]
 *   - [ Value[?Const]+ ]
 */
function parseList(lexer, isConst) {
  var start = lexer.token;
  var item = isConst ? parseConstValue : parseValueValue;
  return {
    kind: _kinds.Kind.LIST,
    values: any(lexer, _lexer.TokenKind.BRACKET_L, item, _lexer.TokenKind.BRACKET_R),
    loc: loc(lexer, start)
  };
}

/**
 * ObjectValue[Const] :
 *   - { }
 *   - { ObjectField[?Const]+ }
 */
function parseObject(lexer, isConst) {
  var start = lexer.token;
  expect(lexer, _lexer.TokenKind.BRACE_L);
  var fields = [];
  while (!skip(lexer, _lexer.TokenKind.BRACE_R)) {
    fields.push(parseObjectField(lexer, isConst));
  }
  return {
    kind: _kinds.Kind.OBJECT,
    fields: fields,
    loc: loc(lexer, start)
  };
}

/**
 * ObjectField[Const] : Name : Value[?Const]
 */
function parseObjectField(lexer, isConst) {
  var start = lexer.token;
  return {
    kind: _kinds.Kind.OBJECT_FIELD,
    name: parseName(lexer),
    value: (expect(lexer, _lexer.TokenKind.COLON), parseValueLiteral(lexer, isConst)),
    loc: loc(lexer, start)
  };
}

// Implements the parsing rules in the Directives section.

/**
 * Directives[Const] : Directive[?Const]+
 */
function parseDirectives(lexer, isConst) {
  var directives = [];
  while (peek(lexer, _lexer.TokenKind.AT)) {
    directives.push(parseDirective(lexer, isConst));
  }
  return directives;
}

/**
 * Directive[Const] : @ Name Arguments[?Const]?
 */
function parseDirective(lexer, isConst) {
  var start = lexer.token;
  expect(lexer, _lexer.TokenKind.AT);
  return {
    kind: _kinds.Kind.DIRECTIVE,
    name: parseName(lexer),
    arguments: parseArguments(lexer, isConst),
    loc: loc(lexer, start)
  };
}

// Implements the parsing rules in the Types section.

/**
 * Type :
 *   - NamedType
 *   - ListType
 *   - NonNullType
 */
function parseTypeReference(lexer) {
  var start = lexer.token;
  var type = void 0;
  if (skip(lexer, _lexer.TokenKind.BRACKET_L)) {
    type = parseTypeReference(lexer);
    expect(lexer, _lexer.TokenKind.BRACKET_R);
    type = {
      kind: _kinds.Kind.LIST_TYPE,
      type: type,
      loc: loc(lexer, start)
    };
  } else {
    type = parseNamedType(lexer);
  }
  if (skip(lexer, _lexer.TokenKind.BANG)) {
    return {
      kind: _kinds.Kind.NON_NULL_TYPE,
      type: type,
      loc: loc(lexer, start)
    };
  }
  return type;
}

/**
 * NamedType : Name
 */
function parseNamedType(lexer) {
  var start = lexer.token;
  return {
    kind: _kinds.Kind.NAMED_TYPE,
    name: parseName(lexer),
    loc: loc(lexer, start)
  };
}

// Implements the parsing rules in the Type Definition section.

/**
 * TypeSystemDefinition :
 *   - SchemaDefinition
 *   - TypeDefinition
 *   - TypeExtension
 *   - DirectiveDefinition
 *
 * TypeDefinition :
 *   - ScalarTypeDefinition
 *   - ObjectTypeDefinition
 *   - InterfaceTypeDefinition
 *   - UnionTypeDefinition
 *   - EnumTypeDefinition
 *   - InputObjectTypeDefinition
 */
function parseTypeSystemDefinition(lexer) {
  // Many definitions begin with a description and require a lookahead.
  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;

  if (keywordToken.kind === _lexer.TokenKind.NAME) {
    switch (keywordToken.value) {
      case 'schema':
        return parseSchemaDefinition(lexer);
      case 'scalar':
        return parseScalarTypeDefinition(lexer);
      case 'type':
        return parseObjectTypeDefinition(lexer);
      case 'interface':
        return parseInterfaceTypeDefinition(lexer);
      case 'union':
        return parseUnionTypeDefinition(lexer);
      case 'enum':
        return parseEnumTypeDefinition(lexer);
      case 'input':
        return parseInputObjectTypeDefinition(lexer);
      case 'extend':
        return parseTypeExtension(lexer);
      case 'directive':
        return parseDirectiveDefinition(lexer);
    }
  }

  throw unexpected(lexer, keywordToken);
}

function peekDescription(lexer) {
  return peek(lexer, _lexer.TokenKind.STRING) || peek(lexer, _lexer.TokenKind.BLOCK_STRING);
}

/**
 * Description : StringValue
 */
function parseDescription(lexer) {
  if (peekDescription(lexer)) {
    return parseStringLiteral(lexer);
  }
}

/**
 * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }
 */
function parseSchemaDefinition(lexer) {
  var start = lexer.token;
  expectKeyword(lexer, 'schema');
  var directives = parseDirectives(lexer, true);
  var operationTypes = many(lexer, _lexer.TokenKind.BRACE_L, parseOperationTypeDefinition, _lexer.TokenKind.BRACE_R);
  return {
    kind: _kinds.Kind.SCHEMA_DEFINITION,
    directives: directives,
    operationTypes: operationTypes,
    loc: loc(lexer, start)
  };
}

/**
 * OperationTypeDefinition : OperationType : NamedType
 */
function parseOperationTypeDefinition(lexer) {
  var start = lexer.token;
  var operation = parseOperationType(lexer);
  expect(lexer, _lexer.TokenKind.COLON);
  var type = parseNamedType(lexer);
  return {
    kind: _kinds.Kind.OPERATION_TYPE_DEFINITION,
    operation: operation,
    type: type,
    loc: loc(lexer, start)
  };
}

/**
 * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
 */
function parseScalarTypeDefinition(lexer) {
  var start = lexer.token;
  var description = parseDescription(lexer);
  expectKeyword(lexer, 'scalar');
  var name = parseName(lexer);
  var directives = parseDirectives(lexer, true);
  return {
    kind: _kinds.Kind.SCALAR_TYPE_DEFINITION,
    description: description,
    name: name,
    directives: directives,
    loc: loc(lexer, start)
  };
}

/**
 * ObjectTypeDefinition :
 *   Description?
 *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
 */
function parseObjectTypeDefinition(lexer) {
  var start = lexer.token;
  var description = parseDescription(lexer);
  expectKeyword(lexer, 'type');
  var name = parseName(lexer);
  var interfaces = parseImplementsInterfaces(lexer);
  var directives = parseDirectives(lexer, true);
  var fields = parseFieldsDefinition(lexer);
  return {
    kind: _kinds.Kind.OBJECT_TYPE_DEFINITION,
    description: description,
    name: name,
    interfaces: interfaces,
    directives: directives,
    fields: fields,
    loc: loc(lexer, start)
  };
}

/**
 * ImplementsInterfaces :
 *   - implements `&`? NamedType
 *   - ImplementsInterfaces & NamedType
 */
function parseImplementsInterfaces(lexer) {
  var types = [];
  if (lexer.token.value === 'implements') {
    lexer.advance();
    // Optional leading ampersand
    skip(lexer, _lexer.TokenKind.AMP);
    do {
      types.push(parseNamedType(lexer));
    } while (skip(lexer, _lexer.TokenKind.AMP) ||
    // Legacy support for the SDL?
    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, _lexer.TokenKind.NAME));
  }
  return types;
}

/**
 * FieldsDefinition : { FieldDefinition+ }
 */
function parseFieldsDefinition(lexer) {
  // Legacy support for the SDL?
  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, _lexer.TokenKind.BRACE_L) && lexer.lookahead().kind === _lexer.TokenKind.BRACE_R) {
    lexer.advance();
    lexer.advance();
    return [];
  }
  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseFieldDefinition, _lexer.TokenKind.BRACE_R) : [];
}

/**
 * FieldDefinition :
 *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
 */
function parseFieldDefinition(lexer) {
  var start = lexer.token;
  var description = parseDescription(lexer);
  var name = parseName(lexer);
  var args = parseArgumentDefs(lexer);
  expect(lexer, _lexer.TokenKind.COLON);
  var type = parseTypeReference(lexer);
  var directives = parseDirectives(lexer, true);
  return {
    kind: _kinds.Kind.FIELD_DEFINITION,
    description: description,
    name: name,
    arguments: args,
    type: type,
    directives: directives,
    loc: loc(lexer, start)
  };
}

/**
 * ArgumentsDefinition : ( InputValueDefinition+ )
 */
function parseArgumentDefs(lexer) {
  if (!peek(lexer, _lexer.TokenKind.PAREN_L)) {
    return [];
  }
  return many(lexer, _lexer.TokenKind.PAREN_L, parseInputValueDef, _lexer.TokenKind.PAREN_R);
}

/**
 * InputValueDefinition :
 *   - Description? Name : Type DefaultValue? Directives[Const]?
 */
function parseInputValueDef(lexer) {
  var start = lexer.token;
  var description = parseDescription(lexer);
  var name = parseName(lexer);
  expect(lexer, _lexer.TokenKind.COLON);
  var type = parseTypeReference(lexer);
  var defaultValue = void 0;
  if (skip(lexer, _lexer.TokenKind.EQUALS)) {
    defaultValue = parseConstValue(lexer);
  }
  var directives = parseDirectives(lexer, true);
  return {
    kind: _kinds.Kind.INPUT_VALUE_DEFINITION,
    description: description,
    name: name,
    type: type,
    defaultValue: defaultValue,
    directives: directives,
    loc: loc(lexer, start)
  };
}

/**
 * InterfaceTypeDefinition :
 *   - Description? interface Name Directives[Const]? FieldsDefinition?
 */
function parseInterfaceTypeDefinition(lexer) {
  var start = lexer.token;
  var description = parseDescription(lexer);
  expectKeyword(lexer, 'interface');
  var name = parseName(lexer);
  var directives = parseDirectives(lexer, true);
  var fields = parseFieldsDefinition(lexer);
  return {
    kind: _kinds.Kind.INTERFACE_TYPE_DEFINITION,
    description: description,
    name: name,
    directives: directives,
    fields: fields,
    loc: loc(lexer, start)
  };
}

/**
 * UnionTypeDefinition :
 *   - Description? union Name Directives[Const]? UnionMemberTypes?
 */
function parseUnionTypeDefinition(lexer) {
  var start = lexer.token;
  var description = parseDescription(lexer);
  expectKeyword(lexer, 'union');
  var name = parseName(lexer);
  var directives = parseDirectives(lexer, true);
  var types = parseUnionMemberTypes(lexer);
  return {
    kind: _kinds.Kind.UNION_TYPE_DEFINITION,
    description: description,
    name: name,
    directives: directives,
    types: types,
    loc: loc(lexer, start)
  };
}

/**
 * UnionMemberTypes :
 *   - = `|`? NamedType
 *   - UnionMemberTypes | NamedType
 */
function parseUnionMemberTypes(lexer) {
  var types = [];
  if (skip(lexer, _lexer.TokenKind.EQUALS)) {
    // Optional leading pipe
    skip(lexer, _lexer.TokenKind.PIPE);
    do {
      types.push(parseNamedType(lexer));
    } while (skip(lexer, _lexer.TokenKind.PIPE));
  }
  return types;
}

/**
 * EnumTypeDefinition :
 *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
 */
function parseEnumTypeDefinition(lexer) {
  var start = lexer.token;
  var description = parseDescription(lexer);
  expectKeyword(lexer, 'enum');
  var name = parseName(lexer);
  var directives = parseDirectives(lexer, true);
  var values = parseEnumValuesDefinition(lexer);
  return {
    kind: _kinds.Kind.ENUM_TYPE_DEFINITION,
    description: description,
    name: name,
    directives: directives,
    values: values,
    loc: loc(lexer, start)
  };
}

/**
 * EnumValuesDefinition : { EnumValueDefinition+ }
 */
function parseEnumValuesDefinition(lexer) {
  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseEnumValueDefinition, _lexer.TokenKind.BRACE_R) : [];
}

/**
 * EnumValueDefinition : Description? EnumValue Directives[Const]?
 *
 * EnumValue : Name
 */
function parseEnumValueDefinition(lexer) {
  var start = lexer.token;
  var description = parseDescription(lexer);
  var name = parseName(lexer);
  var directives = parseDirectives(lexer, true);
  return {
    kind: _kinds.Kind.ENUM_VALUE_DEFINITION,
    description: description,
    name: name,
    directives: directives,
    loc: loc(lexer, start)
  };
}

/**
 * InputObjectTypeDefinition :
 *   - Description? input Name Directives[Const]? InputFieldsDefinition?
 */
function parseInputObjectTypeDefinition(lexer) {
  var start = lexer.token;
  var description = parseDescription(lexer);
  expectKeyword(lexer, 'input');
  var name = parseName(lexer);
  var directives = parseDirectives(lexer, true);
  var fields = parseInputFieldsDefinition(lexer);
  return {
    kind: _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION,
    description: description,
    name: name,
    directives: directives,
    fields: fields,
    loc: loc(lexer, start)
  };
}

/**
 * InputFieldsDefinition : { InputValueDefinition+ }
 */
function parseInputFieldsDefinition(lexer) {
  return peek(lexer, _lexer.TokenKind.BRACE_L) ? many(lexer, _lexer.TokenKind.BRACE_L, parseInputValueDef, _lexer.TokenKind.BRACE_R) : [];
}

/**
 * TypeExtension :
 *   - ScalarTypeExtension
 *   - ObjectTypeExtension
 *   - InterfaceTypeExtension
 *   - UnionTypeExtension
 *   - EnumTypeExtension
 *   - InputObjectTypeDefinition
 */
function parseTypeExtension(lexer) {
  var keywordToken = lexer.lookahead();

  if (keywordToken.kind === _lexer.TokenKind.NAME) {
    switch (keywordToken.value) {
      case 'scalar':
        return parseScalarTypeExtension(lexer);
      case 'type':
        return parseObjectTypeExtension(lexer);
      case 'interface':
        return parseInterfaceTypeExtension(lexer);
      case 'union':
        return parseUnionTypeExtension(lexer);
      case 'enum':
        return parseEnumTypeExtension(lexer);
      case 'input':
        return parseInputObjectTypeExtension(lexer);
    }
  }

  throw unexpected(lexer, keywordToken);
}

/**
 * ScalarTypeExtension :
 *   - extend scalar Name Directives[Const]
 */
function parseScalarTypeExtension(lexer) {
  var start = lexer.token;
  expectKeyword(lexer, 'extend');
  expectKeyword(lexer, 'scalar');
  var name = parseName(lexer);
  var directives = parseDirectives(lexer, true);
  if (directives.length === 0) {
    throw unexpected(lexer);
  }
  return {
    kind: _kinds.Kind.SCALAR_TYPE_EXTENSION,
    name: name,
    directives: directives,
    loc: loc(lexer, start)
  };
}

/**
 * ObjectTypeExtension :
 *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
 *  - extend type Name ImplementsInterfaces? Directives[Const]
 *  - extend type Name ImplementsInterfaces
 */
function parseObjectTypeExtension(lexer) {
  var start = lexer.token;
  expectKeyword(lexer, 'extend');
  expectKeyword(lexer, 'type');
  var name = parseName(lexer);
  var interfaces = parseImplementsInterfaces(lexer);
  var directives = parseDirectives(lexer, true);
  var fields = parseFieldsDefinition(lexer);
  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
    throw unexpected(lexer);
  }
  return {
    kind: _kinds.Kind.OBJECT_TYPE_EXTENSION,
    name: name,
    interfaces: interfaces,
    directives: directives,
    fields: fields,
    loc: loc(lexer, start)
  };
}

/**
 * InterfaceTypeExtension :
 *   - extend interface Name Directives[Const]? FieldsDefinition
 *   - extend interface Name Directives[Const]
 */
function parseInterfaceTypeExtension(lexer) {
  var start = lexer.token;
  expectKeyword(lexer, 'extend');
  expectKeyword(lexer, 'interface');
  var name = parseName(lexer);
  var directives = parseDirectives(lexer, true);
  var fields = parseFieldsDefinition(lexer);
  if (directives.length === 0 && fields.length === 0) {
    throw unexpected(lexer);
  }
  return {
    kind: _kinds.Kind.INTERFACE_TYPE_EXTENSION,
    name: name,
    directives: directives,
    fields: fields,
    loc: loc(lexer, start)
  };
}

/**
 * UnionTypeExtension :
 *   - extend union Name Directives[Const]? UnionMemberTypes
 *   - extend union Name Directives[Const]
 */
function parseUnionTypeExtension(lexer) {
  var start = lexer.token;
  expectKeyword(lexer, 'extend');
  expectKeyword(lexer, 'union');
  var name = parseName(lexer);
  var directives = parseDirectives(lexer, true);
  var types = parseUnionMemberTypes(lexer);
  if (directives.length === 0 && types.length === 0) {
    throw unexpected(lexer);
  }
  return {
    kind: _kinds.Kind.UNION_TYPE_EXTENSION,
    name: name,
    directives: directives,
    types: types,
    loc: loc(lexer, start)
  };
}

/**
 * EnumTypeExtension :
 *   - extend enum Name Directives[Const]? EnumValuesDefinition
 *   - extend enum Name Directives[Const]
 */
function parseEnumTypeExtension(lexer) {
  var start = lexer.token;
  expectKeyword(lexer, 'extend');
  expectKeyword(lexer, 'enum');
  var name = parseName(lexer);
  var directives = parseDirectives(lexer, true);
  var values = parseEnumValuesDefinition(lexer);
  if (directives.length === 0 && values.length === 0) {
    throw unexpected(lexer);
  }
  return {
    kind: _kinds.Kind.ENUM_TYPE_EXTENSION,
    name: name,
    directives: directives,
    values: values,
    loc: loc(lexer, start)
  };
}

/**
 * InputObjectTypeExtension :
 *   - extend input Name Directives[Const]? InputFieldsDefinition
 *   - extend input Name Directives[Const]
 */
function parseInputObjectTypeExtension(lexer) {
  var start = lexer.token;
  expectKeyword(lexer, 'extend');
  expectKeyword(lexer, 'input');
  var name = parseName(lexer);
  var directives = parseDirectives(lexer, true);
  var fields = parseInputFieldsDefinition(lexer);
  if (directives.length === 0 && fields.length === 0) {
    throw unexpected(lexer);
  }
  return {
    kind: _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION,
    name: name,
    directives: directives,
    fields: fields,
    loc: loc(lexer, start)
  };
}

/**
 * DirectiveDefinition :
 *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations
 */
function parseDirectiveDefinition(lexer) {
  var start = lexer.token;
  var description = parseDescription(lexer);
  expectKeyword(lexer, 'directive');
  expect(lexer, _lexer.TokenKind.AT);
  var name = parseName(lexer);
  var args = parseArgumentDefs(lexer);
  expectKeyword(lexer, 'on');
  var locations = parseDirectiveLocations(lexer);
  return {
    kind: _kinds.Kind.DIRECTIVE_DEFINITION,
    description: description,
    name: name,
    arguments: args,
    locations: locations,
    loc: loc(lexer, start)
  };
}

/**
 * DirectiveLocations :
 *   - `|`? DirectiveLocation
 *   - DirectiveLocations | DirectiveLocation
 */
function parseDirectiveLocations(lexer) {
  // Optional leading pipe
  skip(lexer, _lexer.TokenKind.PIPE);
  var locations = [];
  do {
    locations.push(parseDirectiveLocation(lexer));
  } while (skip(lexer, _lexer.TokenKind.PIPE));
  return locations;
}

/*
 * DirectiveLocation :
 *   - ExecutableDirectiveLocation
 *   - TypeSystemDirectiveLocation
 *
 * ExecutableDirectiveLocation : one of
 *   `QUERY`
 *   `MUTATION`
 *   `SUBSCRIPTION`
 *   `FIELD`
 *   `FRAGMENT_DEFINITION`
 *   `FRAGMENT_SPREAD`
 *   `INLINE_FRAGMENT`
 *
 * TypeSystemDirectiveLocation : one of
 *   `SCHEMA`
 *   `SCALAR`
 *   `OBJECT`
 *   `FIELD_DEFINITION`
 *   `ARGUMENT_DEFINITION`
 *   `INTERFACE`
 *   `UNION`
 *   `ENUM`
 *   `ENUM_VALUE`
 *   `INPUT_OBJECT`
 *   `INPUT_FIELD_DEFINITION`
 */
function parseDirectiveLocation(lexer) {
  var start = lexer.token;
  var name = parseName(lexer);
  if (_directiveLocation.DirectiveLocation.hasOwnProperty(name.value)) {
    return name;
  }
  throw unexpected(lexer, start);
}

// Core parsing utility functions

/**
 * Returns a location object, used to identify the place in
 * the source that created a given parsed object.
 */
function loc(lexer, startToken) {
  if (!lexer.options.noLocation) {
    return new Loc(startToken, lexer.lastToken, lexer.source);
  }
}

function Loc(startToken, endToken, source) {
  this.start = startToken.start;
  this.end = endToken.end;
  this.startToken = startToken;
  this.endToken = endToken;
  this.source = source;
}

// Print a simplified form when appearing in JSON/util.inspect.
Loc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {
  return { start: this.start, end: this.end };
};

/**
 * Determines if the next token is of a given kind
 */
function peek(lexer, kind) {
  return lexer.token.kind === kind;
}

/**
 * If the next token is of the given kind, return true after advancing
 * the lexer. Otherwise, do not change the parser state and return false.
 */
function skip(lexer, kind) {
  var match = lexer.token.kind === kind;
  if (match) {
    lexer.advance();
  }
  return match;
}

/**
 * If the next token is of the given kind, return that token after advancing
 * the lexer. Otherwise, do not change the parser state and throw an error.
 */
function expect(lexer, kind) {
  var token = lexer.token;
  if (token.kind === kind) {
    lexer.advance();
    return token;
  }
  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected ' + kind + ', found ' + (0, _lexer.getTokenDesc)(token));
}

/**
 * If the next token is a keyword with the given value, return that token after
 * advancing the lexer. Otherwise, do not change the parser state and return
 * false.
 */
function expectKeyword(lexer, value) {
  var token = lexer.token;
  if (token.kind === _lexer.TokenKind.NAME && token.value === value) {
    lexer.advance();
    return token;
  }
  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected "' + value + '", found ' + (0, _lexer.getTokenDesc)(token));
}

/**
 * Helper function for creating an error when an unexpected lexed token
 * is encountered.
 */
function unexpected(lexer, atToken) {
  var token = atToken || lexer.token;
  return (0, _error.syntaxError)(lexer.source, token.start, 'Unexpected ' + (0, _lexer.getTokenDesc)(token));
}

/**
 * Returns a possibly empty list of parse nodes, determined by
 * the parseFn. This list begins with a lex token of openKind
 * and ends with a lex token of closeKind. Advances the parser
 * to the next lex token after the closing token.
 */
function any(lexer, openKind, parseFn, closeKind) {
  expect(lexer, openKind);
  var nodes = [];
  while (!skip(lexer, closeKind)) {
    nodes.push(parseFn(lexer));
  }
  return nodes;
}

/**
 * Returns a non-empty list of parse nodes, determined by
 * the parseFn. This list begins with a lex token of openKind
 * and ends with a lex token of closeKind. Advances the parser
 * to the next lex token after the closing token.
 */
function many(lexer, openKind, parseFn, closeKind) {
  expect(lexer, openKind);
  var nodes = [parseFn(lexer)];
  while (!skip(lexer, closeKind)) {
    nodes.push(parseFn(lexer));
  }
  return nodes;
}
},{"../error":94,"./directiveLocation":119,"./kinds":121,"./lexer":122,"./source":126}],125:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.print = print;

var _visitor = require('./visitor');

/**
 * Converts an AST into a string, using one set of reasonable
 * formatting rules.
 */
function print(ast) {
  return (0, _visitor.visit)(ast, { leave: printDocASTReducer });
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

var printDocASTReducer = {
  Name: function Name(node) {
    return node.value;
  },
  Variable: function Variable(node) {
    return '$' + node.name;
  },

  // Document

  Document: function Document(node) {
    return join(node.definitions, '\n\n') + '\n';
  },

  OperationDefinition: function OperationDefinition(node) {
    var op = node.operation;
    var name = node.name;
    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
    var directives = join(node.directives, ' ');
    var selectionSet = node.selectionSet;
    // Anonymous queries with no directives or variable definitions can use
    // the query short form.
    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');
  },


  VariableDefinition: function VariableDefinition(_ref) {
    var variable = _ref.variable,
        type = _ref.type,
        defaultValue = _ref.defaultValue;
    return variable + ': ' + type + wrap(' = ', defaultValue);
  },

  SelectionSet: function SelectionSet(_ref2) {
    var selections = _ref2.selections;
    return block(selections);
  },

  Field: function Field(_ref3) {
    var alias = _ref3.alias,
        name = _ref3.name,
        args = _ref3.arguments,
        directives = _ref3.directives,
        selectionSet = _ref3.selectionSet;
    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');
  },

  Argument: function Argument(_ref4) {
    var name = _ref4.name,
        value = _ref4.value;
    return name + ': ' + value;
  },

  // Fragments

  FragmentSpread: function FragmentSpread(_ref5) {
    var name = _ref5.name,
        directives = _ref5.directives;
    return '...' + name + wrap(' ', join(directives, ' '));
  },

  InlineFragment: function InlineFragment(_ref6) {
    var typeCondition = _ref6.typeCondition,
        directives = _ref6.directives,
        selectionSet = _ref6.selectionSet;
    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
  },

  FragmentDefinition: function FragmentDefinition(_ref7) {
    var name = _ref7.name,
        typeCondition = _ref7.typeCondition,
        variableDefinitions = _ref7.variableDefinitions,
        directives = _ref7.directives,
        selectionSet = _ref7.selectionSet;
    return (
      // Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      'fragment ' + name + wrap('(', join(variableDefinitions, ', '), ')') + ' ' + ('on ' + typeCondition + ' ' + wrap('', join(directives, ' '), ' ')) + selectionSet
    );
  },

  // Value

  IntValue: function IntValue(_ref8) {
    var value = _ref8.value;
    return value;
  },
  FloatValue: function FloatValue(_ref9) {
    var value = _ref9.value;
    return value;
  },
  StringValue: function StringValue(_ref10, key) {
    var value = _ref10.value,
        isBlockString = _ref10.block;
    return isBlockString ? printBlockString(value, key === 'description') : JSON.stringify(value);
  },
  BooleanValue: function BooleanValue(_ref11) {
    var value = _ref11.value;
    return value ? 'true' : 'false';
  },
  NullValue: function NullValue() {
    return 'null';
  },
  EnumValue: function EnumValue(_ref12) {
    var value = _ref12.value;
    return value;
  },
  ListValue: function ListValue(_ref13) {
    var values = _ref13.values;
    return '[' + join(values, ', ') + ']';
  },
  ObjectValue: function ObjectValue(_ref14) {
    var fields = _ref14.fields;
    return '{' + join(fields, ', ') + '}';
  },
  ObjectField: function ObjectField(_ref15) {
    var name = _ref15.name,
        value = _ref15.value;
    return name + ': ' + value;
  },

  // Directive

  Directive: function Directive(_ref16) {
    var name = _ref16.name,
        args = _ref16.arguments;
    return '@' + name + wrap('(', join(args, ', '), ')');
  },

  // Type

  NamedType: function NamedType(_ref17) {
    var name = _ref17.name;
    return name;
  },
  ListType: function ListType(_ref18) {
    var type = _ref18.type;
    return '[' + type + ']';
  },
  NonNullType: function NonNullType(_ref19) {
    var type = _ref19.type;
    return type + '!';
  },

  // Type System Definitions

  SchemaDefinition: function SchemaDefinition(_ref20) {
    var directives = _ref20.directives,
        operationTypes = _ref20.operationTypes;
    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');
  },

  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
    var operation = _ref21.operation,
        type = _ref21.type;
    return operation + ': ' + type;
  },

  ScalarTypeDefinition: addDescription(function (_ref22) {
    var name = _ref22.name,
        directives = _ref22.directives;
    return join(['scalar', name, join(directives, ' ')], ' ');
  }),

  ObjectTypeDefinition: addDescription(function (_ref23) {
    var name = _ref23.name,
        interfaces = _ref23.interfaces,
        directives = _ref23.directives,
        fields = _ref23.fields;
    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  }),

  FieldDefinition: addDescription(function (_ref24) {
    var name = _ref24.name,
        args = _ref24.arguments,
        type = _ref24.type,
        directives = _ref24.directives;
    return name + wrap('(', join(args, ', '), ')') + ': ' + type + wrap(' ', join(directives, ' '));
  }),

  InputValueDefinition: addDescription(function (_ref25) {
    var name = _ref25.name,
        type = _ref25.type,
        defaultValue = _ref25.defaultValue,
        directives = _ref25.directives;
    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');
  }),

  InterfaceTypeDefinition: addDescription(function (_ref26) {
    var name = _ref26.name,
        directives = _ref26.directives,
        fields = _ref26.fields;
    return join(['interface', name, join(directives, ' '), block(fields)], ' ');
  }),

  UnionTypeDefinition: addDescription(function (_ref27) {
    var name = _ref27.name,
        directives = _ref27.directives,
        types = _ref27.types;
    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
  }),

  EnumTypeDefinition: addDescription(function (_ref28) {
    var name = _ref28.name,
        directives = _ref28.directives,
        values = _ref28.values;
    return join(['enum', name, join(directives, ' '), block(values)], ' ');
  }),

  EnumValueDefinition: addDescription(function (_ref29) {
    var name = _ref29.name,
        directives = _ref29.directives;
    return join([name, join(directives, ' ')], ' ');
  }),

  InputObjectTypeDefinition: addDescription(function (_ref30) {
    var name = _ref30.name,
        directives = _ref30.directives,
        fields = _ref30.fields;
    return join(['input', name, join(directives, ' '), block(fields)], ' ');
  }),

  ScalarTypeExtension: function ScalarTypeExtension(_ref31) {
    var name = _ref31.name,
        directives = _ref31.directives;
    return join(['extend scalar', name, join(directives, ' ')], ' ');
  },

  ObjectTypeExtension: function ObjectTypeExtension(_ref32) {
    var name = _ref32.name,
        interfaces = _ref32.interfaces,
        directives = _ref32.directives,
        fields = _ref32.fields;
    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
  },

  InterfaceTypeExtension: function InterfaceTypeExtension(_ref33) {
    var name = _ref33.name,
        directives = _ref33.directives,
        fields = _ref33.fields;
    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');
  },

  UnionTypeExtension: function UnionTypeExtension(_ref34) {
    var name = _ref34.name,
        directives = _ref34.directives,
        types = _ref34.types;
    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
  },

  EnumTypeExtension: function EnumTypeExtension(_ref35) {
    var name = _ref35.name,
        directives = _ref35.directives,
        values = _ref35.values;
    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
  },

  InputObjectTypeExtension: function InputObjectTypeExtension(_ref36) {
    var name = _ref36.name,
        directives = _ref36.directives,
        fields = _ref36.fields;
    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
  },

  DirectiveDefinition: addDescription(function (_ref37) {
    var name = _ref37.name,
        args = _ref37.arguments,
        locations = _ref37.locations;
    return 'directive @' + name + wrap('(', join(args, ', '), ')') + ' on ' + join(locations, ' | ');
  })
};

function addDescription(cb) {
  return function (node) {
    return join([node.description, cb(node)], '\n');
  };
}

/**
 * Given maybeArray, print an empty string if it is null or empty, otherwise
 * print all items together separated by separator if provided
 */
function join(maybeArray, separator) {
  return maybeArray ? maybeArray.filter(function (x) {
    return x;
  }).join(separator || '') : '';
}

/**
 * Given array, print each item on its own line, wrapped in an
 * indented "{ }" block.
 */
function block(array) {
  return array && array.length !== 0 ? '{\n' + indent(join(array, '\n')) + '\n}' : '';
}

/**
 * If maybeString is not null or empty, then wrap with start and end, otherwise
 * print an empty string.
 */
function wrap(start, maybeString, end) {
  return maybeString ? start + maybeString + (end || '') : '';
}

function indent(maybeString) {
  return maybeString && '  ' + maybeString.replace(/\n/g, '\n  ');
}

/**
 * Print a block string in the indented block form by adding a leading and
 * trailing blank line. However, if a block string starts with whitespace and is
 * a single-line, adding a leading blank line would strip that whitespace.
 */
function printBlockString(value, isDescription) {
  var escaped = value.replace(/"""/g, '\\"""');
  return (value[0] === ' ' || value[0] === '\t') && value.indexOf('\n') === -1 ? '"""' + escaped.replace(/"$/, '"\n') + '"""' : '"""\n' + (isDescription ? escaped : indent(escaped)) + '\n"""';
}
},{"./visitor":127}],126:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Source = undefined;

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                           *
                                                                                                                                                           * This source code is licensed under the MIT license found in the
                                                                                                                                                           * LICENSE file in the root directory of this source tree.
                                                                                                                                                           *
                                                                                                                                                           *  strict
                                                                                                                                                           */

/**
 * A representation of source input to GraphQL.
 * `name` and `locationOffset` are optional. They are useful for clients who
 * store GraphQL documents in source files; for example, if the GraphQL input
 * starts at line 40 in a file named Foo.graphql, it might be useful for name to
 * be "Foo.graphql" and location to be `{ line: 40, column: 0 }`.
 * line and column in locationOffset are 1-indexed
 */
var Source = exports.Source = function Source(body, name, locationOffset) {
  _classCallCheck(this, Source);

  this.body = body;
  this.name = name || 'GraphQL request';
  this.locationOffset = locationOffset || { line: 1, column: 1 };
  !(this.locationOffset.line > 0) ? (0, _invariant2.default)(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;
  !(this.locationOffset.column > 0) ? (0, _invariant2.default)(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;
};
},{"../jsutils/invariant":105}],127:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.visit = visit;
exports.visitInParallel = visitInParallel;
exports.visitWithTypeInfo = visitWithTypeInfo;
exports.getVisitFn = getVisitFn;


/**
 * A visitor is comprised of visit functions, which are called on each node
 * during the visitor's traversal.
 */


/**
 * A visitor is provided to visit, it contains the collection of
 * relevant functions to be called during the visitor's traversal.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

var QueryDocumentKeys = exports.QueryDocumentKeys = {
  Name: [],

  Document: ['definitions'],
  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
  VariableDefinition: ['variable', 'type', 'defaultValue'],
  Variable: ['name'],
  SelectionSet: ['selections'],
  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
  Argument: ['name', 'value'],

  FragmentSpread: ['name', 'directives'],
  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
  FragmentDefinition: ['name',
  // Note: fragment variable definitions are experimental and may be changed
  // or removed in the future.
  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],

  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ['values'],
  ObjectValue: ['fields'],
  ObjectField: ['name', 'value'],

  Directive: ['name', 'arguments'],

  NamedType: ['name'],
  ListType: ['type'],
  NonNullType: ['type'],

  SchemaDefinition: ['directives', 'operationTypes'],
  OperationTypeDefinition: ['type'],

  ScalarTypeDefinition: ['description', 'name', 'directives'],
  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],
  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
  EnumValueDefinition: ['description', 'name', 'directives'],
  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],

  ScalarTypeExtension: ['name', 'directives'],
  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  InterfaceTypeExtension: ['name', 'directives', 'fields'],
  UnionTypeExtension: ['name', 'directives', 'types'],
  EnumTypeExtension: ['name', 'directives', 'values'],
  InputObjectTypeExtension: ['name', 'directives', 'fields'],

  DirectiveDefinition: ['description', 'name', 'arguments', 'locations']
};

/**
 * A KeyMap describes each the traversable properties of each kind of node.
 */
var BREAK = exports.BREAK = {};

/**
 * visit() will walk through an AST using a depth first traversal, calling
 * the visitor's enter function at each node in the traversal, and calling the
 * leave function after visiting that node and all of its child nodes.
 *
 * By returning different values from the enter and leave functions, the
 * behavior of the visitor can be altered, including skipping over a sub-tree of
 * the AST (by returning false), editing the AST by returning a value or null
 * to remove the value, or to stop the whole traversal by returning BREAK.
 *
 * When using visit() to edit an AST, the original AST will not be modified, and
 * a new version of the AST with the changes applied will be returned from the
 * visit function.
 *
 *     const editedAST = visit(ast, {
 *       enter(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: skip visiting this node
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       },
 *       leave(node, key, parent, path, ancestors) {
 *         // @return
 *         //   undefined: no action
 *         //   false: no action
 *         //   visitor.BREAK: stop visiting altogether
 *         //   null: delete this node
 *         //   any value: replace this node with the returned value
 *       }
 *     });
 *
 * Alternatively to providing enter() and leave() functions, a visitor can
 * instead provide functions named the same as the kinds of AST nodes, or
 * enter/leave visitors at a named key, leading to four permutations of
 * visitor API:
 *
 * 1) Named visitors triggered when entering a node a specific kind.
 *
 *     visit(ast, {
 *       Kind(node) {
 *         // enter the "Kind" node
 *       }
 *     })
 *
 * 2) Named visitors that trigger upon entering and leaving a node of
 *    a specific kind.
 *
 *     visit(ast, {
 *       Kind: {
 *         enter(node) {
 *           // enter the "Kind" node
 *         }
 *         leave(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 *
 * 3) Generic visitors that trigger upon entering and leaving any node.
 *
 *     visit(ast, {
 *       enter(node) {
 *         // enter any node
 *       },
 *       leave(node) {
 *         // leave any node
 *       }
 *     })
 *
 * 4) Parallel visitors for entering and leaving nodes of a specific kind.
 *
 *     visit(ast, {
 *       enter: {
 *         Kind(node) {
 *           // enter the "Kind" node
 *         }
 *       },
 *       leave: {
 *         Kind(node) {
 *           // leave the "Kind" node
 *         }
 *       }
 *     })
 */
function visit(root, visitor) {
  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;

  /* eslint-disable no-undef-init */
  var stack = undefined;
  var inArray = Array.isArray(root);
  var keys = [root];
  var index = -1;
  var edits = [];
  var node = undefined;
  var key = undefined;
  var parent = undefined;
  var path = [];
  var ancestors = [];
  var newRoot = root;
  /* eslint-enable no-undef-init */

  do {
    index++;
    var isLeaving = index === keys.length;
    var isEdited = isLeaving && edits.length !== 0;
    if (isLeaving) {
      key = ancestors.length === 0 ? undefined : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();
      if (isEdited) {
        if (inArray) {
          node = node.slice();
        } else {
          var clone = {};
          for (var k in node) {
            if (node.hasOwnProperty(k)) {
              clone[k] = node[k];
            }
          }
          node = clone;
        }
        var editOffset = 0;
        for (var ii = 0; ii < edits.length; ii++) {
          var editKey = edits[ii][0];
          var editValue = edits[ii][1];
          if (inArray) {
            editKey -= editOffset;
          }
          if (inArray && editValue === null) {
            node.splice(editKey, 1);
            editOffset++;
          } else {
            node[editKey] = editValue;
          }
        }
      }
      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else {
      key = parent ? inArray ? index : keys[index] : undefined;
      node = parent ? parent[key] : newRoot;
      if (node === null || node === undefined) {
        continue;
      }
      if (parent) {
        path.push(key);
      }
    }

    var result = void 0;
    if (!Array.isArray(node)) {
      if (!isNode(node)) {
        throw new Error('Invalid AST Node: ' + JSON.stringify(node));
      }
      var visitFn = getVisitFn(visitor, node.kind, isLeaving);
      if (visitFn) {
        result = visitFn.call(visitor, node, key, parent, path, ancestors);

        if (result === BREAK) {
          break;
        }

        if (result === false) {
          if (!isLeaving) {
            path.pop();
            continue;
          }
        } else if (result !== undefined) {
          edits.push([key, result]);
          if (!isLeaving) {
            if (isNode(result)) {
              node = result;
            } else {
              path.pop();
              continue;
            }
          }
        }
      }
    }

    if (result === undefined && isEdited) {
      edits.push([key, node]);
    }

    if (isLeaving) {
      path.pop();
    } else {
      stack = { inArray: inArray, index: index, keys: keys, edits: edits, prev: stack };
      inArray = Array.isArray(node);
      keys = inArray ? node : visitorKeys[node.kind] || [];
      index = -1;
      edits = [];
      if (parent) {
        ancestors.push(parent);
      }
      parent = node;
    }
  } while (stack !== undefined);

  if (edits.length !== 0) {
    newRoot = edits[edits.length - 1][1];
  }

  return newRoot;
}

function isNode(maybeNode) {
  return Boolean(maybeNode && typeof maybeNode.kind === 'string');
}

/**
 * Creates a new visitor instance which delegates to many visitors to run in
 * parallel. Each visitor will be visited for each node before moving on.
 *
 * If a prior visitor edits a node, no following visitors will see that node.
 */
function visitInParallel(visitors) {
  var skipping = new Array(visitors.length);

  return {
    enter: function enter(node) {
      for (var i = 0; i < visitors.length; i++) {
        if (!skipping[i]) {
          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */false);
          if (fn) {
            var result = fn.apply(visitors[i], arguments);
            if (result === false) {
              skipping[i] = node;
            } else if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== undefined) {
              return result;
            }
          }
        }
      }
    },
    leave: function leave(node) {
      for (var i = 0; i < visitors.length; i++) {
        if (!skipping[i]) {
          var fn = getVisitFn(visitors[i], node.kind, /* isLeaving */true);
          if (fn) {
            var result = fn.apply(visitors[i], arguments);
            if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== undefined && result !== false) {
              return result;
            }
          }
        } else if (skipping[i] === node) {
          skipping[i] = null;
        }
      }
    }
  };
}

/**
 * Creates a new visitor instance which maintains a provided TypeInfo instance
 * along with visiting visitor.
 */
function visitWithTypeInfo(typeInfo, visitor) {
  return {
    enter: function enter(node) {
      typeInfo.enter(node);
      var fn = getVisitFn(visitor, node.kind, /* isLeaving */false);
      if (fn) {
        var result = fn.apply(visitor, arguments);
        if (result !== undefined) {
          typeInfo.leave(node);
          if (isNode(result)) {
            typeInfo.enter(result);
          }
        }
        return result;
      }
    },
    leave: function leave(node) {
      var fn = getVisitFn(visitor, node.kind, /* isLeaving */true);
      var result = void 0;
      if (fn) {
        result = fn.apply(visitor, arguments);
      }
      typeInfo.leave(node);
      return result;
    }
  };
}

/**
 * Given a visitor instance, if it is leaving or not, and a node kind, return
 * the function the visitor runtime should call.
 */
function getVisitFn(visitor, kind, isLeaving) {
  var kindVisitor = visitor[kind];
  if (kindVisitor) {
    if (!isLeaving && typeof kindVisitor === 'function') {
      // { Kind() {} }
      return kindVisitor;
    }
    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;
    if (typeof kindSpecificVisitor === 'function') {
      // { Kind: { enter() {}, leave() {} } }
      return kindSpecificVisitor;
    }
  } else {
    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;
    if (specificVisitor) {
      if (typeof specificVisitor === 'function') {
        // { enter() {}, leave() {} }
        return specificVisitor;
      }
      var specificKindVisitor = specificVisitor[kind];
      if (typeof specificKindVisitor === 'function') {
        // { enter: { Kind() {} }, leave: { Kind() {} } }
        return specificKindVisitor;
      }
    }
  }
}
},{}],128:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _subscribe = require('./subscribe');

Object.defineProperty(exports, 'subscribe', {
  enumerable: true,
  get: function get() {
    return _subscribe.subscribe;
  }
});
Object.defineProperty(exports, 'createSourceEventStream', {
  enumerable: true,
  get: function get() {
    return _subscribe.createSourceEventStream;
  }
});
},{"./subscribe":130}],129:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mapAsyncIterator;

var _iterall = require('iterall');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
                                                                                                                                                                                                                   * Copyright (c) 2017-present, Facebook, Inc.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   *  strict
                                                                                                                                                                                                                   */

/**
 * Given an AsyncIterable and a callback function, return an AsyncIterator
 * which produces values mapped via calling the callback function.
 */
function mapAsyncIterator(iterable, callback, rejectCallback) {
  var iterator = (0, _iterall.getAsyncIterator)(iterable);
  var $return = void 0;
  var abruptClose = void 0;
  // $FlowFixMe(>=0.68.0)
  if (typeof iterator.return === 'function') {
    $return = iterator.return;
    abruptClose = function abruptClose(error) {
      var rethrow = function rethrow() {
        return Promise.reject(error);
      };
      return $return.call(iterator).then(rethrow, rethrow);
    };
  }

  function mapResult(result) {
    return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);
  }

  var mapReject = void 0;
  if (rejectCallback) {
    // Capture rejectCallback to ensure it cannot be null.
    var reject = rejectCallback;
    mapReject = function mapReject(error) {
      return asyncMapValue(error, reject).then(iteratorResult, abruptClose);
    };
  }

  /* TODO: Flow doesn't support symbols as keys:
     https://github.com/facebook/flow/issues/3258 */
  return _defineProperty({
    next: function next() {
      return iterator.next().then(mapResult, mapReject);
    },
    return: function _return() {
      return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({ value: undefined, done: true });
    },
    throw: function _throw(error) {
      // $FlowFixMe(>=0.68.0)
      if (typeof iterator.throw === 'function') {
        return iterator.throw(error).then(mapResult, mapReject);
      }
      return Promise.reject(error).catch(abruptClose);
    }
  }, _iterall.$$asyncIterator, function () {
    return this;
  });
}

function asyncMapValue(value, callback) {
  return new Promise(function (resolve) {
    return resolve(callback(value));
  });
}

function iteratorResult(value) {
  return { value: value, done: false };
}
},{"iterall":193}],130:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subscribe = subscribe;
exports.createSourceEventStream = createSourceEventStream;

var _iterall = require('iterall');

var _GraphQLError = require('../error/GraphQLError');

var _locatedError = require('../error/locatedError');

var _execute = require('../execution/execute');

var _schema = require('../type/schema');

var _mapAsyncIterator = require('./mapAsyncIterator');

var _mapAsyncIterator2 = _interopRequireDefault(_mapAsyncIterator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implements the "Subscribe" algorithm described in the GraphQL specification.
 *
 * Returns a Promise which resolves to either an AsyncIterator (if successful)
 * or an ExecutionResult (client error). The promise will be rejected if a
 * server error occurs.
 *
 * If the client-provided arguments to this function do not result in a
 * compliant subscription, a GraphQL Response (ExecutionResult) with
 * descriptive errors and no data will be returned.
 *
 * If the the source stream could not be created due to faulty subscription
 * resolver logic or underlying systems, the promise will resolve to a single
 * ExecutionResult containing `errors` and no `data`.
 *
 * If the operation succeeded, the promise resolves to an AsyncIterator, which
 * yields a stream of ExecutionResults representing the response stream.
 *
 * Accepts either an object with named arguments, or individual arguments.
 */

/* eslint-disable no-redeclare */
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
  /* eslint-enable no-redeclare */
  // Extract arguments from object args if provided.
  return arguments.length === 1 ? subscribeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver, argsOrSchema.subscribeFieldResolver) : subscribeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver);
}

/**
 * This function checks if the error is a GraphQLError. If it is, report it as
 * an ExecutionResult, containing only errors and no data. Otherwise treat the
 * error as a system-class error and re-throw it.
 */
function reportGraphQLError(error) {
  if (error instanceof _GraphQLError.GraphQLError) {
    return { errors: [error] };
  }
  throw error;
}

function subscribeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {
  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);

  // For each payload yielded from a subscription, map it over the normal
  // GraphQL `execute` function, with `payload` as the rootValue.
  // This implements the "MapSourceToResponseEvent" algorithm described in
  // the GraphQL specification. The `execute` function provides the
  // "ExecuteSubscriptionEvent" algorithm, as it is nearly identical to the
  // "ExecuteQuery" algorithm, for which `execute` is also used.
  var mapSourceToResponse = function mapSourceToResponse(payload) {
    return (0, _execute.execute)(schema, document, payload, contextValue, variableValues, operationName, fieldResolver);
  };

  // Resolve the Source Stream, then map every source value to a
  // ExecutionResult value as described above.
  return sourcePromise.then(function (resultOrStream) {
    return (
      // Note: Flow can't refine isAsyncIterable, so explicit casts are used.
      (0, _iterall.isAsyncIterable)(resultOrStream) ? (0, _mapAsyncIterator2.default)(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream
    );
  }, reportGraphQLError);
}

/**
 * Implements the "CreateSourceEventStream" algorithm described in the
 * GraphQL specification, resolving the subscription source event stream.
 *
 * Returns a Promise<AsyncIterable>.
 *
 * If the client-provided invalid arguments, the source stream could not be
 * created, or the resolver did not return an AsyncIterable, this function will
 * will throw an error, which should be caught and handled by the caller.
 *
 * A Source Event Stream represents a sequence of events, each of which triggers
 * a GraphQL execution for that event.
 *
 * This may be useful when hosting the stateful subscription service in a
 * different process or machine than the stateless GraphQL execution engine,
 * or otherwise separating these two steps. For more on this, see the
 * "Supporting Subscriptions at Scale" information in the GraphQL specification.
 */
function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {
  // If arguments are missing or incorrectly typed, this is an internal
  // developer mistake which should throw an early error.
  (0, _execute.assertValidExecutionArguments)(schema, document, variableValues);

  try {
    // If a valid context cannot be created due to incorrect arguments,
    // this will throw an error.
    var exeContext = (0, _execute.buildExecutionContext)(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);

    // Return early errors if execution context failed.
    if (Array.isArray(exeContext)) {
      return Promise.resolve({ errors: exeContext });
    }

    var type = (0, _execute.getOperationRootType)(schema, exeContext.operation);
    var fields = (0, _execute.collectFields)(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));
    var responseNames = Object.keys(fields);
    var responseName = responseNames[0];
    var fieldNodes = fields[responseName];
    var fieldNode = fieldNodes[0];
    var fieldName = fieldNode.name.value;
    var fieldDef = (0, _execute.getFieldDef)(schema, type, fieldName);

    if (!fieldDef) {
      throw new _GraphQLError.GraphQLError('The subscription field "' + fieldName + '" is not defined.', fieldNodes);
    }

    // Call the `subscribe()` resolver or the default resolver to produce an
    // AsyncIterable yielding raw payloads.
    var resolveFn = fieldDef.subscribe || exeContext.fieldResolver;

    var path = (0, _execute.addPath)(undefined, responseName);

    var info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, type, path);

    // resolveFieldValueOrError implements the "ResolveFieldEventStream"
    // algorithm from GraphQL specification. It differs from
    // "ResolveFieldValue" due to providing a different `resolveFn`.
    var result = (0, _execute.resolveFieldValueOrError)(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info);

    // Coerce to Promise for easier error handling and consistent return type.
    return Promise.resolve(result).then(function (eventStream) {
      // If eventStream is an Error, rethrow a located error.
      if (eventStream instanceof Error) {
        throw (0, _locatedError.locatedError)(eventStream, fieldNodes, (0, _execute.responsePathAsArray)(path));
      }

      // Assert field returned an event stream, otherwise yield an error.
      if ((0, _iterall.isAsyncIterable)(eventStream)) {
        // Note: isAsyncIterable above ensures this will be correct.
        return eventStream;
      }
      throw new Error('Subscription field must return Async Iterable. Received: ' + String(eventStream));
    });
  } catch (error) {
    return Promise.reject(error);
  }
}
},{"../error/GraphQLError":92,"../error/locatedError":95,"../execution/execute":98,"../type/schema":136,"./mapAsyncIterator":129,"iterall":193}],131:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLInputObjectType = exports.GraphQLEnumType = exports.GraphQLUnionType = exports.GraphQLInterfaceType = exports.GraphQLObjectType = exports.GraphQLScalarType = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.isType = isType;
exports.assertType = assertType;
exports.isScalarType = isScalarType;
exports.assertScalarType = assertScalarType;
exports.isObjectType = isObjectType;
exports.assertObjectType = assertObjectType;
exports.isInterfaceType = isInterfaceType;
exports.assertInterfaceType = assertInterfaceType;
exports.isUnionType = isUnionType;
exports.assertUnionType = assertUnionType;
exports.isEnumType = isEnumType;
exports.assertEnumType = assertEnumType;
exports.isInputObjectType = isInputObjectType;
exports.assertInputObjectType = assertInputObjectType;
exports.isListType = isListType;
exports.assertListType = assertListType;
exports.isNonNullType = isNonNullType;
exports.assertNonNullType = assertNonNullType;
exports.isInputType = isInputType;
exports.assertInputType = assertInputType;
exports.isOutputType = isOutputType;
exports.assertOutputType = assertOutputType;
exports.isLeafType = isLeafType;
exports.assertLeafType = assertLeafType;
exports.isCompositeType = isCompositeType;
exports.assertCompositeType = assertCompositeType;
exports.isAbstractType = isAbstractType;
exports.assertAbstractType = assertAbstractType;
exports.GraphQLList = GraphQLList;
exports.GraphQLNonNull = GraphQLNonNull;
exports.isWrappingType = isWrappingType;
exports.assertWrappingType = assertWrappingType;
exports.isNullableType = isNullableType;
exports.assertNullableType = assertNullableType;
exports.getNullableType = getNullableType;
exports.isNamedType = isNamedType;
exports.assertNamedType = assertNamedType;
exports.getNamedType = getNamedType;

var _instanceOf = require('../jsutils/instanceOf');

var _instanceOf2 = _interopRequireDefault(_instanceOf);

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _isInvalid = require('../jsutils/isInvalid');

var _isInvalid2 = _interopRequireDefault(_isInvalid);

var _kinds = require('../language/kinds');

var _valueFromASTUntyped = require('../utilities/valueFromASTUntyped');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                           *
                                                                                                                                                           * This source code is licensed under the MIT license found in the
                                                                                                                                                           * LICENSE file in the root directory of this source tree.
                                                                                                                                                           *
                                                                                                                                                           *  strict
                                                                                                                                                           */

// Predicates & Assertions

/**
 * These are all of the possible kinds of types.
 */
function isType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);
}

function assertType(type) {
  !isType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL type.') : void 0;
  return type;
}

/**
 * There are predicates for each kind of GraphQL type.
 */

// eslint-disable-next-line no-redeclare
function isScalarType(type) {
  return (0, _instanceOf2.default)(type, GraphQLScalarType);
}

function assertScalarType(type) {
  !isScalarType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Scalar type.') : void 0;
  return type;
}

// eslint-disable-next-line no-redeclare
function isObjectType(type) {
  return (0, _instanceOf2.default)(type, GraphQLObjectType);
}

function assertObjectType(type) {
  !isObjectType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Object type.') : void 0;
  return type;
}

// eslint-disable-next-line no-redeclare
function isInterfaceType(type) {
  return (0, _instanceOf2.default)(type, GraphQLInterfaceType);
}

function assertInterfaceType(type) {
  !isInterfaceType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Interface type.') : void 0;
  return type;
}

// eslint-disable-next-line no-redeclare
function isUnionType(type) {
  return (0, _instanceOf2.default)(type, GraphQLUnionType);
}

function assertUnionType(type) {
  !isUnionType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Union type.') : void 0;
  return type;
}

// eslint-disable-next-line no-redeclare
function isEnumType(type) {
  return (0, _instanceOf2.default)(type, GraphQLEnumType);
}

function assertEnumType(type) {
  !isEnumType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Enum type.') : void 0;
  return type;
}

// eslint-disable-next-line no-redeclare
function isInputObjectType(type) {
  return (0, _instanceOf2.default)(type, GraphQLInputObjectType);
}

function assertInputObjectType(type) {
  !isInputObjectType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Input Object type.') : void 0;
  return type;
}

// eslint-disable-next-line no-redeclare
function isListType(type) {
  return (0, _instanceOf2.default)(type, GraphQLList);
}

function assertListType(type) {
  !isListType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL List type.') : void 0;
  return type;
}

// eslint-disable-next-line no-redeclare
function isNonNullType(type) {
  return (0, _instanceOf2.default)(type, GraphQLNonNull);
}

function assertNonNullType(type) {
  !isNonNullType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL Non-Null type.') : void 0;
  return type;
}

/**
 * These types may be used as input types for arguments and directives.
 */
function isInputType(type) {
  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);
}

function assertInputType(type) {
  !isInputType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL input type.') : void 0;
  return type;
}

/**
 * These types may be used as output types as the result of fields.
 */
function isOutputType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);
}

function assertOutputType(type) {
  !isOutputType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL output type.') : void 0;
  return type;
}

/**
 * These types may describe types which may be leaf values.
 */
function isLeafType(type) {
  return isScalarType(type) || isEnumType(type);
}

function assertLeafType(type) {
  !isLeafType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL leaf type.') : void 0;
  return type;
}

/**
 * These types may describe the parent context of a selection set.
 */
function isCompositeType(type) {
  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);
}

function assertCompositeType(type) {
  !isCompositeType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL composite type.') : void 0;
  return type;
}

/**
 * These types may describe the parent context of a selection set.
 */
function isAbstractType(type) {
  return isInterfaceType(type) || isUnionType(type);
}

function assertAbstractType(type) {
  !isAbstractType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL abstract type.') : void 0;
  return type;
}

/**
 * List Type Wrapper
 *
 * A list is a wrapping type which points to another type.
 * Lists are often created within the context of defining the fields of
 * an object type.
 *
 * Example:
 *
 *     const PersonType = new GraphQLObjectType({
 *       name: 'Person',
 *       fields: () => ({
 *         parents: { type: GraphQLList(PersonType) },
 *         children: { type: GraphQLList(PersonType) },
 *       })
 *     })
 *
 */

// eslint-disable-next-line no-redeclare
function GraphQLList(ofType) {
  if (this instanceof GraphQLList) {
    this.ofType = assertType(ofType);
  } else {
    return new GraphQLList(ofType);
  }
}

// Also provide toJSON and inspect aliases for toString.
var listProto = GraphQLList.prototype;
listProto.toString = listProto.toJSON = listProto.inspect = function toString() {
  return '[' + String(this.ofType) + ']';
};

/**
 * Non-Null Type Wrapper
 *
 * A non-null is a wrapping type which points to another type.
 * Non-null types enforce that their values are never null and can ensure
 * an error is raised if this ever occurs during a request. It is useful for
 * fields which you can make a strong guarantee on non-nullability, for example
 * usually the id field of a database row will never be null.
 *
 * Example:
 *
 *     const RowType = new GraphQLObjectType({
 *       name: 'Row',
 *       fields: () => ({
 *         id: { type: GraphQLNonNull(GraphQLString) },
 *       })
 *     })
 *
 * Note: the enforcement of non-nullability occurs within the executor.
 */

// eslint-disable-next-line no-redeclare
function GraphQLNonNull(ofType) {
  if (this instanceof GraphQLNonNull) {
    this.ofType = assertNullableType(ofType);
  } else {
    return new GraphQLNonNull(ofType);
  }
}

// Also provide toJSON and inspect aliases for toString.
var nonNullProto = GraphQLNonNull.prototype;
nonNullProto.toString = nonNullProto.toJSON = nonNullProto.inspect = function toString() {
  return String(this.ofType) + '!';
};

/**
 * These types wrap and modify other types
 */

function isWrappingType(type) {
  return isListType(type) || isNonNullType(type);
}

function assertWrappingType(type) {
  !isWrappingType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL wrapping type.') : void 0;
  return type;
}

/**
 * These types can all accept null as a value.
 */
function isNullableType(type) {
  return isType(type) && !isNonNullType(type);
}

function assertNullableType(type) {
  !isNullableType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL nullable type.') : void 0;
  return type;
}

/* eslint-disable no-redeclare */
function getNullableType(type) {
  /* eslint-enable no-redeclare */
  if (type) {
    return isNonNullType(type) ? type.ofType : type;
  }
}

/**
 * These named types do not include modifiers like List or NonNull.
 */
function isNamedType(type) {
  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);
}

function assertNamedType(type) {
  !isNamedType(type) ? (0, _invariant2.default)(0, 'Expected ' + String(type) + ' to be a GraphQL named type.') : void 0;
  return type;
}

/* eslint-disable no-redeclare */
function getNamedType(type) {
  /* eslint-enable no-redeclare */
  if (type) {
    var unwrappedType = type;
    while (isWrappingType(unwrappedType)) {
      unwrappedType = unwrappedType.ofType;
    }
    return unwrappedType;
  }
}

/**
 * Used while defining GraphQL types to allow for circular references in
 * otherwise immutable type definitions.
 */


function resolveThunk(thunk) {
  return typeof thunk === 'function' ? thunk() : thunk;
}

/**
 * Scalar Type Definition
 *
 * The leaf values of any request and input values to arguments are
 * Scalars (or Enums) and are defined with a name and a series of functions
 * used to parse input from ast or variables and to ensure validity.
 *
 * If a type's serialize function does not return a value (i.e. it returns
 * `undefined`) then an error will be raised and a `null` value will be returned
 * in the response. If the serialize function returns `null`, then no error will
 * be included in the response.
 *
 * Example:
 *
 *     const OddType = new GraphQLScalarType({
 *       name: 'Odd',
 *       serialize(value) {
 *         if (value % 2 === 1) {
 *           return value;
 *         }
 *       }
 *     });
 *
 */

var GraphQLScalarType = exports.GraphQLScalarType = function () {
  function GraphQLScalarType(config) {
    _classCallCheck(this, GraphQLScalarType);

    this.name = config.name;
    this.description = config.description;
    this.astNode = config.astNode;
    this._scalarConfig = config;
    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;
    !(typeof config.serialize === 'function') ? (0, _invariant2.default)(0, this.name + ' must provide "serialize" function. If this custom Scalar ' + 'is also used as an input type, ensure "parseValue" and "parseLiteral" ' + 'functions are also provided.') : void 0;
    if (config.parseValue || config.parseLiteral) {
      !(typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function') ? (0, _invariant2.default)(0, this.name + ' must provide both "parseValue" and "parseLiteral" ' + 'functions.') : void 0;
    }
  }

  // Serializes an internal value to include in a response.


  GraphQLScalarType.prototype.serialize = function serialize(value) {
    var serializer = this._scalarConfig.serialize;
    return serializer(value);
  };

  // Parses an externally provided value to use as an input.


  GraphQLScalarType.prototype.parseValue = function parseValue(value) {
    var parser = this._scalarConfig.parseValue;
    if ((0, _isInvalid2.default)(value)) {
      return undefined;
    }
    return parser ? parser(value) : value;
  };

  // Parses an externally provided literal value to use as an input.


  GraphQLScalarType.prototype.parseLiteral = function parseLiteral(valueNode, variables) {
    var parser = this._scalarConfig.parseLiteral;
    return parser ? parser(valueNode, variables) : (0, _valueFromASTUntyped.valueFromASTUntyped)(valueNode, variables);
  };

  GraphQLScalarType.prototype.toString = function toString() {
    return this.name;
  };

  return GraphQLScalarType;
}();

// Also provide toJSON and inspect aliases for toString.


GraphQLScalarType.prototype.toJSON = GraphQLScalarType.prototype.inspect = GraphQLScalarType.prototype.toString;

/**
 * Object Type Definition
 *
 * Almost all of the GraphQL types you define will be object types. Object types
 * have a name, but most importantly describe their fields.
 *
 * Example:
 *
 *     const AddressType = new GraphQLObjectType({
 *       name: 'Address',
 *       fields: {
 *         street: { type: GraphQLString },
 *         number: { type: GraphQLInt },
 *         formatted: {
 *           type: GraphQLString,
 *           resolve(obj) {
 *             return obj.number + ' ' + obj.street
 *           }
 *         }
 *       }
 *     });
 *
 * When two types need to refer to each other, or a type needs to refer to
 * itself in a field, you can use a function expression (aka a closure or a
 * thunk) to supply the fields lazily.
 *
 * Example:
 *
 *     const PersonType = new GraphQLObjectType({
 *       name: 'Person',
 *       fields: () => ({
 *         name: { type: GraphQLString },
 *         bestFriend: { type: PersonType },
 *       })
 *     });
 *
 */
var GraphQLObjectType = exports.GraphQLObjectType = function () {
  function GraphQLObjectType(config) {
    _classCallCheck(this, GraphQLObjectType);

    this.name = config.name;
    this.description = config.description;
    this.astNode = config.astNode;
    this.extensionASTNodes = config.extensionASTNodes;
    this.isTypeOf = config.isTypeOf;
    this._typeConfig = config;
    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;
    if (config.isTypeOf) {
      !(typeof config.isTypeOf === 'function') ? (0, _invariant2.default)(0, this.name + ' must provide "isTypeOf" as a function.') : void 0;
    }
  }

  GraphQLObjectType.prototype.getFields = function getFields() {
    return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));
  };

  GraphQLObjectType.prototype.getInterfaces = function getInterfaces() {
    return this._interfaces || (this._interfaces = defineInterfaces(this, this._typeConfig.interfaces));
  };

  GraphQLObjectType.prototype.toString = function toString() {
    return this.name;
  };

  return GraphQLObjectType;
}();

// Also provide toJSON and inspect aliases for toString.


GraphQLObjectType.prototype.toJSON = GraphQLObjectType.prototype.inspect = GraphQLObjectType.prototype.toString;

function defineInterfaces(type, interfacesThunk) {
  var interfaces = resolveThunk(interfacesThunk) || [];
  !Array.isArray(interfaces) ? (0, _invariant2.default)(0, type.name + ' interfaces must be an Array or a function which returns ' + 'an Array.') : void 0;
  return interfaces;
}

function defineFieldMap(type, fieldsThunk) {
  var fieldMap = resolveThunk(fieldsThunk) || {};
  !isPlainObj(fieldMap) ? (0, _invariant2.default)(0, type.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.') : void 0;

  var resultFieldMap = Object.create(null);
  Object.keys(fieldMap).forEach(function (fieldName) {
    var fieldConfig = fieldMap[fieldName];
    !isPlainObj(fieldConfig) ? (0, _invariant2.default)(0, type.name + '.' + fieldName + ' field config must be an object') : void 0;
    !!fieldConfig.hasOwnProperty('isDeprecated') ? (0, _invariant2.default)(0, type.name + '.' + fieldName + ' should provide "deprecationReason" instead ' + 'of "isDeprecated".') : void 0;
    var field = _extends({}, fieldConfig, {
      isDeprecated: Boolean(fieldConfig.deprecationReason),
      name: fieldName
    });
    !isValidResolver(field.resolve) ? (0, _invariant2.default)(0, type.name + '.' + fieldName + ' field resolver must be a function if ' + ('provided, but got: ' + String(field.resolve) + '.')) : void 0;
    var argsConfig = fieldConfig.args;
    if (!argsConfig) {
      field.args = [];
    } else {
      !isPlainObj(argsConfig) ? (0, _invariant2.default)(0, type.name + '.' + fieldName + ' args must be an object with argument ' + 'names as keys.') : void 0;
      field.args = Object.keys(argsConfig).map(function (argName) {
        var arg = argsConfig[argName];
        return {
          name: argName,
          description: arg.description === undefined ? null : arg.description,
          type: arg.type,
          defaultValue: arg.defaultValue,
          astNode: arg.astNode
        };
      });
    }
    resultFieldMap[fieldName] = field;
  });
  return resultFieldMap;
}

function isPlainObj(obj) {
  return obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !Array.isArray(obj);
}

// If a resolver is defined, it must be a function.
function isValidResolver(resolver) {
  return resolver == null || typeof resolver === 'function';
}

/**
 * Interface Type Definition
 *
 * When a field can return one of a heterogeneous set of types, a Interface type
 * is used to describe what types are possible, what fields are in common across
 * all types, as well as a function to determine which type is actually used
 * when the field is resolved.
 *
 * Example:
 *
 *     const EntityType = new GraphQLInterfaceType({
 *       name: 'Entity',
 *       fields: {
 *         name: { type: GraphQLString }
 *       }
 *     });
 *
 */
var GraphQLInterfaceType = exports.GraphQLInterfaceType = function () {
  function GraphQLInterfaceType(config) {
    _classCallCheck(this, GraphQLInterfaceType);

    this.name = config.name;
    this.description = config.description;
    this.astNode = config.astNode;
    this.extensionASTNodes = config.extensionASTNodes;
    this.resolveType = config.resolveType;
    this._typeConfig = config;
    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;
    if (config.resolveType) {
      !(typeof config.resolveType === 'function') ? (0, _invariant2.default)(0, this.name + ' must provide "resolveType" as a function.') : void 0;
    }
  }

  GraphQLInterfaceType.prototype.getFields = function getFields() {
    return this._fields || (this._fields = defineFieldMap(this, this._typeConfig.fields));
  };

  GraphQLInterfaceType.prototype.toString = function toString() {
    return this.name;
  };

  return GraphQLInterfaceType;
}();

// Also provide toJSON and inspect aliases for toString.


GraphQLInterfaceType.prototype.toJSON = GraphQLInterfaceType.prototype.inspect = GraphQLInterfaceType.prototype.toString;

/**
 * Union Type Definition
 *
 * When a field can return one of a heterogeneous set of types, a Union type
 * is used to describe what types are possible as well as providing a function
 * to determine which type is actually used when the field is resolved.
 *
 * Example:
 *
 *     const PetType = new GraphQLUnionType({
 *       name: 'Pet',
 *       types: [ DogType, CatType ],
 *       resolveType(value) {
 *         if (value instanceof Dog) {
 *           return DogType;
 *         }
 *         if (value instanceof Cat) {
 *           return CatType;
 *         }
 *       }
 *     });
 *
 */
var GraphQLUnionType = exports.GraphQLUnionType = function () {
  function GraphQLUnionType(config) {
    _classCallCheck(this, GraphQLUnionType);

    this.name = config.name;
    this.description = config.description;
    this.astNode = config.astNode;
    this.resolveType = config.resolveType;
    this._typeConfig = config;
    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;
    if (config.resolveType) {
      !(typeof config.resolveType === 'function') ? (0, _invariant2.default)(0, this.name + ' must provide "resolveType" as a function.') : void 0;
    }
  }

  GraphQLUnionType.prototype.getTypes = function getTypes() {
    return this._types || (this._types = defineTypes(this, this._typeConfig.types));
  };

  GraphQLUnionType.prototype.toString = function toString() {
    return this.name;
  };

  return GraphQLUnionType;
}();

// Also provide toJSON and inspect aliases for toString.


GraphQLUnionType.prototype.toJSON = GraphQLUnionType.prototype.inspect = GraphQLUnionType.prototype.toString;

function defineTypes(unionType, typesThunk) {
  var types = resolveThunk(typesThunk) || [];
  !Array.isArray(types) ? (0, _invariant2.default)(0, 'Must provide Array of types or a function which returns ' + ('such an array for Union ' + unionType.name + '.')) : void 0;
  return types;
}

/**
 * Enum Type Definition
 *
 * Some leaf values of requests and input values are Enums. GraphQL serializes
 * Enum values as strings, however internally Enums can be represented by any
 * kind of type, often integers.
 *
 * Example:
 *
 *     const RGBType = new GraphQLEnumType({
 *       name: 'RGB',
 *       values: {
 *         RED: { value: 0 },
 *         GREEN: { value: 1 },
 *         BLUE: { value: 2 }
 *       }
 *     });
 *
 * Note: If a value is not provided in a definition, the name of the enum value
 * will be used as its internal value.
 */
var GraphQLEnumType /* <T> */ = exports.GraphQLEnumType = function () {
  function GraphQLEnumType(config /* <T> */) {
    _classCallCheck(this, GraphQLEnumType);

    this.name = config.name;
    this.description = config.description;
    this.astNode = config.astNode;
    this._enumConfig = config;
    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;
  }

  GraphQLEnumType.prototype.getValues = function getValues() {
    return this._values || (this._values = defineEnumValues(this, this._enumConfig.values));
  };

  GraphQLEnumType.prototype.getValue = function getValue(name) {
    return this._getNameLookup()[name];
  };

  GraphQLEnumType.prototype.serialize = function serialize(value /* T */) {
    var enumValue = this._getValueLookup().get(value);
    if (enumValue) {
      return enumValue.name;
    }
  };

  GraphQLEnumType.prototype.parseValue = function parseValue(value) /* T */{
    if (typeof value === 'string') {
      var enumValue = this._getNameLookup()[value];
      if (enumValue) {
        return enumValue.value;
      }
    }
  };

  GraphQLEnumType.prototype.parseLiteral = function parseLiteral(valueNode, _variables) /* T */{
    // Note: variables will be resolved to a value before calling this function.
    if (valueNode.kind === _kinds.Kind.ENUM) {
      var enumValue = this._getNameLookup()[valueNode.value];
      if (enumValue) {
        return enumValue.value;
      }
    }
  };

  GraphQLEnumType.prototype._getValueLookup = function _getValueLookup() {
    if (!this._valueLookup) {
      var lookup = new Map();
      this.getValues().forEach(function (value) {
        lookup.set(value.value, value);
      });
      this._valueLookup = lookup;
    }
    return this._valueLookup;
  };

  GraphQLEnumType.prototype._getNameLookup = function _getNameLookup() {
    if (!this._nameLookup) {
      var lookup = Object.create(null);
      this.getValues().forEach(function (value) {
        lookup[value.name] = value;
      });
      this._nameLookup = lookup;
    }
    return this._nameLookup;
  };

  GraphQLEnumType.prototype.toString = function toString() {
    return this.name;
  };

  return GraphQLEnumType;
}();

// Also provide toJSON and inspect aliases for toString.


GraphQLEnumType.prototype.toJSON = GraphQLEnumType.prototype.inspect = GraphQLEnumType.prototype.toString;

function defineEnumValues(type, valueMap /* <T> */
) {
  !isPlainObj(valueMap) ? (0, _invariant2.default)(0, type.name + ' values must be an object with value names as keys.') : void 0;
  return Object.keys(valueMap).map(function (valueName) {
    var value = valueMap[valueName];
    !isPlainObj(value) ? (0, _invariant2.default)(0, type.name + '.' + valueName + ' must refer to an object with a "value" key ' + ('representing an internal value but got: ' + String(value) + '.')) : void 0;
    !!value.hasOwnProperty('isDeprecated') ? (0, _invariant2.default)(0, type.name + '.' + valueName + ' should provide "deprecationReason" instead ' + 'of "isDeprecated".') : void 0;
    return {
      name: valueName,
      description: value.description,
      isDeprecated: Boolean(value.deprecationReason),
      deprecationReason: value.deprecationReason,
      astNode: value.astNode,
      value: value.hasOwnProperty('value') ? value.value : valueName
    };
  });
} /* <T> */

/**
 * Input Object Type Definition
 *
 * An input object defines a structured collection of fields which may be
 * supplied to a field argument.
 *
 * Using `NonNull` will ensure that a value must be provided by the query
 *
 * Example:
 *
 *     const GeoPoint = new GraphQLInputObjectType({
 *       name: 'GeoPoint',
 *       fields: {
 *         lat: { type: GraphQLNonNull(GraphQLFloat) },
 *         lon: { type: GraphQLNonNull(GraphQLFloat) },
 *         alt: { type: GraphQLFloat, defaultValue: 0 },
 *       }
 *     });
 *
 */
var GraphQLInputObjectType = exports.GraphQLInputObjectType = function () {
  function GraphQLInputObjectType(config) {
    _classCallCheck(this, GraphQLInputObjectType);

    this.name = config.name;
    this.description = config.description;
    this.astNode = config.astNode;
    this._typeConfig = config;
    !(typeof config.name === 'string') ? (0, _invariant2.default)(0, 'Must provide name.') : void 0;
  }

  GraphQLInputObjectType.prototype.getFields = function getFields() {
    return this._fields || (this._fields = this._defineFieldMap());
  };

  GraphQLInputObjectType.prototype._defineFieldMap = function _defineFieldMap() {
    var _this = this;

    var fieldMap = resolveThunk(this._typeConfig.fields) || {};
    !isPlainObj(fieldMap) ? (0, _invariant2.default)(0, this.name + ' fields must be an object with field names as keys or a ' + 'function which returns such an object.') : void 0;
    var resultFieldMap = Object.create(null);
    Object.keys(fieldMap).forEach(function (fieldName) {
      var field = _extends({}, fieldMap[fieldName], {
        name: fieldName
      });
      !!field.hasOwnProperty('resolve') ? (0, _invariant2.default)(0, _this.name + '.' + fieldName + ' field type has a resolve property, but ' + 'Input Types cannot define resolvers.') : void 0;
      resultFieldMap[fieldName] = field;
    });
    return resultFieldMap;
  };

  GraphQLInputObjectType.prototype.toString = function toString() {
    return this.name;
  };

  return GraphQLInputObjectType;
}();

// Also provide toJSON and inspect aliases for toString.


GraphQLInputObjectType.prototype.toJSON = GraphQLInputObjectType.prototype.toString;
GraphQLInputObjectType.prototype.inspect = GraphQLInputObjectType.prototype.toString;
},{"../jsutils/instanceOf":104,"../jsutils/invariant":105,"../jsutils/isInvalid":106,"../language/kinds":121,"../utilities/valueFromASTUntyped":160}],132:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.specifiedDirectives = exports.GraphQLDeprecatedDirective = exports.DEFAULT_DEPRECATION_REASON = exports.GraphQLSkipDirective = exports.GraphQLIncludeDirective = exports.GraphQLDirective = undefined;
exports.isDirective = isDirective;
exports.isSpecifiedDirective = isSpecifiedDirective;

var _definition = require('./definition');

var _scalars = require('./scalars');

var _instanceOf = require('../jsutils/instanceOf');

var _instanceOf2 = _interopRequireDefault(_instanceOf);

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _directiveLocation = require('../language/directiveLocation');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                           *
                                                                                                                                                           * This source code is licensed under the MIT license found in the
                                                                                                                                                           * LICENSE file in the root directory of this source tree.
                                                                                                                                                           *
                                                                                                                                                           *  strict
                                                                                                                                                           */

// eslint-disable-next-line no-redeclare


/**
 * Test if the given value is a GraphQL directive.
 */
function isDirective(directive) {
  return (0, _instanceOf2.default)(directive, GraphQLDirective);
}

/**
 * Directives are used by the GraphQL runtime as a way of modifying execution
 * behavior. Type system creators will usually not create these directly.
 */

var GraphQLDirective = exports.GraphQLDirective = function GraphQLDirective(config) {
  _classCallCheck(this, GraphQLDirective);

  this.name = config.name;
  this.description = config.description;
  this.locations = config.locations;
  this.astNode = config.astNode;
  !config.name ? (0, _invariant2.default)(0, 'Directive must be named.') : void 0;
  !Array.isArray(config.locations) ? (0, _invariant2.default)(0, 'Must provide locations for directive.') : void 0;

  var args = config.args;
  if (!args) {
    this.args = [];
  } else {
    !!Array.isArray(args) ? (0, _invariant2.default)(0, '@' + config.name + ' args must be an object with argument names as keys.') : void 0;
    this.args = Object.keys(args).map(function (argName) {
      var arg = args[argName];
      return {
        name: argName,
        description: arg.description === undefined ? null : arg.description,
        type: arg.type,
        defaultValue: arg.defaultValue,
        astNode: arg.astNode
      };
    });
  }
};

/**
 * Used to conditionally include fields or fragments.
 */
var GraphQLIncludeDirective = exports.GraphQLIncludeDirective = new GraphQLDirective({
  name: 'include',
  description: 'Directs the executor to include this field or fragment only when ' + 'the `if` argument is true.',
  locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
  args: {
    if: {
      type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),
      description: 'Included when true.'
    }
  }
});

/**
 * Used to conditionally skip (exclude) fields or fragments.
 */
var GraphQLSkipDirective = exports.GraphQLSkipDirective = new GraphQLDirective({
  name: 'skip',
  description: 'Directs the executor to skip this field or fragment when the `if` ' + 'argument is true.',
  locations: [_directiveLocation.DirectiveLocation.FIELD, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT],
  args: {
    if: {
      type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),
      description: 'Skipped when true.'
    }
  }
});

/**
 * Constant string used for default reason for a deprecation.
 */
var DEFAULT_DEPRECATION_REASON = exports.DEFAULT_DEPRECATION_REASON = 'No longer supported';

/**
 * Used to declare element of a GraphQL schema as deprecated.
 */
var GraphQLDeprecatedDirective = exports.GraphQLDeprecatedDirective = new GraphQLDirective({
  name: 'deprecated',
  description: 'Marks an element of a GraphQL schema as no longer supported.',
  locations: [_directiveLocation.DirectiveLocation.FIELD_DEFINITION, _directiveLocation.DirectiveLocation.ENUM_VALUE],
  args: {
    reason: {
      type: _scalars.GraphQLString,
      description: 'Explains why this element was deprecated, usually also including a ' + 'suggestion for how to access supported similar data. Formatted ' + 'in [Markdown](https://daringfireball.net/projects/markdown/).',
      defaultValue: DEFAULT_DEPRECATION_REASON
    }
  }
});

/**
 * The full list of specified directives.
 */
var specifiedDirectives = exports.specifiedDirectives = [GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective];

function isSpecifiedDirective(directive) {
  return specifiedDirectives.some(function (specifiedDirective) {
    return specifiedDirective.name === directive.name;
  });
}
},{"../jsutils/instanceOf":104,"../jsutils/invariant":105,"../language/directiveLocation":119,"./definition":131,"./scalars":135}],133:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _schema = require('./schema');

Object.defineProperty(exports, 'isSchema', {
  enumerable: true,
  get: function get() {
    return _schema.isSchema;
  }
});
Object.defineProperty(exports, 'GraphQLSchema', {
  enumerable: true,
  get: function get() {
    return _schema.GraphQLSchema;
  }
});

var _definition = require('./definition');

Object.defineProperty(exports, 'isType', {
  enumerable: true,
  get: function get() {
    return _definition.isType;
  }
});
Object.defineProperty(exports, 'isScalarType', {
  enumerable: true,
  get: function get() {
    return _definition.isScalarType;
  }
});
Object.defineProperty(exports, 'isObjectType', {
  enumerable: true,
  get: function get() {
    return _definition.isObjectType;
  }
});
Object.defineProperty(exports, 'isInterfaceType', {
  enumerable: true,
  get: function get() {
    return _definition.isInterfaceType;
  }
});
Object.defineProperty(exports, 'isUnionType', {
  enumerable: true,
  get: function get() {
    return _definition.isUnionType;
  }
});
Object.defineProperty(exports, 'isEnumType', {
  enumerable: true,
  get: function get() {
    return _definition.isEnumType;
  }
});
Object.defineProperty(exports, 'isInputObjectType', {
  enumerable: true,
  get: function get() {
    return _definition.isInputObjectType;
  }
});
Object.defineProperty(exports, 'isListType', {
  enumerable: true,
  get: function get() {
    return _definition.isListType;
  }
});
Object.defineProperty(exports, 'isNonNullType', {
  enumerable: true,
  get: function get() {
    return _definition.isNonNullType;
  }
});
Object.defineProperty(exports, 'isInputType', {
  enumerable: true,
  get: function get() {
    return _definition.isInputType;
  }
});
Object.defineProperty(exports, 'isOutputType', {
  enumerable: true,
  get: function get() {
    return _definition.isOutputType;
  }
});
Object.defineProperty(exports, 'isLeafType', {
  enumerable: true,
  get: function get() {
    return _definition.isLeafType;
  }
});
Object.defineProperty(exports, 'isCompositeType', {
  enumerable: true,
  get: function get() {
    return _definition.isCompositeType;
  }
});
Object.defineProperty(exports, 'isAbstractType', {
  enumerable: true,
  get: function get() {
    return _definition.isAbstractType;
  }
});
Object.defineProperty(exports, 'isWrappingType', {
  enumerable: true,
  get: function get() {
    return _definition.isWrappingType;
  }
});
Object.defineProperty(exports, 'isNullableType', {
  enumerable: true,
  get: function get() {
    return _definition.isNullableType;
  }
});
Object.defineProperty(exports, 'isNamedType', {
  enumerable: true,
  get: function get() {
    return _definition.isNamedType;
  }
});
Object.defineProperty(exports, 'assertType', {
  enumerable: true,
  get: function get() {
    return _definition.assertType;
  }
});
Object.defineProperty(exports, 'assertScalarType', {
  enumerable: true,
  get: function get() {
    return _definition.assertScalarType;
  }
});
Object.defineProperty(exports, 'assertObjectType', {
  enumerable: true,
  get: function get() {
    return _definition.assertObjectType;
  }
});
Object.defineProperty(exports, 'assertInterfaceType', {
  enumerable: true,
  get: function get() {
    return _definition.assertInterfaceType;
  }
});
Object.defineProperty(exports, 'assertUnionType', {
  enumerable: true,
  get: function get() {
    return _definition.assertUnionType;
  }
});
Object.defineProperty(exports, 'assertEnumType', {
  enumerable: true,
  get: function get() {
    return _definition.assertEnumType;
  }
});
Object.defineProperty(exports, 'assertInputObjectType', {
  enumerable: true,
  get: function get() {
    return _definition.assertInputObjectType;
  }
});
Object.defineProperty(exports, 'assertListType', {
  enumerable: true,
  get: function get() {
    return _definition.assertListType;
  }
});
Object.defineProperty(exports, 'assertNonNullType', {
  enumerable: true,
  get: function get() {
    return _definition.assertNonNullType;
  }
});
Object.defineProperty(exports, 'assertInputType', {
  enumerable: true,
  get: function get() {
    return _definition.assertInputType;
  }
});
Object.defineProperty(exports, 'assertOutputType', {
  enumerable: true,
  get: function get() {
    return _definition.assertOutputType;
  }
});
Object.defineProperty(exports, 'assertLeafType', {
  enumerable: true,
  get: function get() {
    return _definition.assertLeafType;
  }
});
Object.defineProperty(exports, 'assertCompositeType', {
  enumerable: true,
  get: function get() {
    return _definition.assertCompositeType;
  }
});
Object.defineProperty(exports, 'assertAbstractType', {
  enumerable: true,
  get: function get() {
    return _definition.assertAbstractType;
  }
});
Object.defineProperty(exports, 'assertWrappingType', {
  enumerable: true,
  get: function get() {
    return _definition.assertWrappingType;
  }
});
Object.defineProperty(exports, 'assertNullableType', {
  enumerable: true,
  get: function get() {
    return _definition.assertNullableType;
  }
});
Object.defineProperty(exports, 'assertNamedType', {
  enumerable: true,
  get: function get() {
    return _definition.assertNamedType;
  }
});
Object.defineProperty(exports, 'getNullableType', {
  enumerable: true,
  get: function get() {
    return _definition.getNullableType;
  }
});
Object.defineProperty(exports, 'getNamedType', {
  enumerable: true,
  get: function get() {
    return _definition.getNamedType;
  }
});
Object.defineProperty(exports, 'GraphQLScalarType', {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLScalarType;
  }
});
Object.defineProperty(exports, 'GraphQLObjectType', {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLObjectType;
  }
});
Object.defineProperty(exports, 'GraphQLInterfaceType', {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLInterfaceType;
  }
});
Object.defineProperty(exports, 'GraphQLUnionType', {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLUnionType;
  }
});
Object.defineProperty(exports, 'GraphQLEnumType', {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLEnumType;
  }
});
Object.defineProperty(exports, 'GraphQLInputObjectType', {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLInputObjectType;
  }
});
Object.defineProperty(exports, 'GraphQLList', {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLList;
  }
});
Object.defineProperty(exports, 'GraphQLNonNull', {
  enumerable: true,
  get: function get() {
    return _definition.GraphQLNonNull;
  }
});

var _directives = require('./directives');

Object.defineProperty(exports, 'isDirective', {
  enumerable: true,
  get: function get() {
    return _directives.isDirective;
  }
});
Object.defineProperty(exports, 'GraphQLDirective', {
  enumerable: true,
  get: function get() {
    return _directives.GraphQLDirective;
  }
});
Object.defineProperty(exports, 'isSpecifiedDirective', {
  enumerable: true,
  get: function get() {
    return _directives.isSpecifiedDirective;
  }
});
Object.defineProperty(exports, 'specifiedDirectives', {
  enumerable: true,
  get: function get() {
    return _directives.specifiedDirectives;
  }
});
Object.defineProperty(exports, 'GraphQLIncludeDirective', {
  enumerable: true,
  get: function get() {
    return _directives.GraphQLIncludeDirective;
  }
});
Object.defineProperty(exports, 'GraphQLSkipDirective', {
  enumerable: true,
  get: function get() {
    return _directives.GraphQLSkipDirective;
  }
});
Object.defineProperty(exports, 'GraphQLDeprecatedDirective', {
  enumerable: true,
  get: function get() {
    return _directives.GraphQLDeprecatedDirective;
  }
});
Object.defineProperty(exports, 'DEFAULT_DEPRECATION_REASON', {
  enumerable: true,
  get: function get() {
    return _directives.DEFAULT_DEPRECATION_REASON;
  }
});

var _scalars = require('./scalars');

Object.defineProperty(exports, 'isSpecifiedScalarType', {
  enumerable: true,
  get: function get() {
    return _scalars.isSpecifiedScalarType;
  }
});
Object.defineProperty(exports, 'specifiedScalarTypes', {
  enumerable: true,
  get: function get() {
    return _scalars.specifiedScalarTypes;
  }
});
Object.defineProperty(exports, 'GraphQLInt', {
  enumerable: true,
  get: function get() {
    return _scalars.GraphQLInt;
  }
});
Object.defineProperty(exports, 'GraphQLFloat', {
  enumerable: true,
  get: function get() {
    return _scalars.GraphQLFloat;
  }
});
Object.defineProperty(exports, 'GraphQLString', {
  enumerable: true,
  get: function get() {
    return _scalars.GraphQLString;
  }
});
Object.defineProperty(exports, 'GraphQLBoolean', {
  enumerable: true,
  get: function get() {
    return _scalars.GraphQLBoolean;
  }
});
Object.defineProperty(exports, 'GraphQLID', {
  enumerable: true,
  get: function get() {
    return _scalars.GraphQLID;
  }
});

var _introspection = require('./introspection');

Object.defineProperty(exports, 'TypeKind', {
  enumerable: true,
  get: function get() {
    return _introspection.TypeKind;
  }
});
Object.defineProperty(exports, 'isIntrospectionType', {
  enumerable: true,
  get: function get() {
    return _introspection.isIntrospectionType;
  }
});
Object.defineProperty(exports, 'introspectionTypes', {
  enumerable: true,
  get: function get() {
    return _introspection.introspectionTypes;
  }
});
Object.defineProperty(exports, '__Schema', {
  enumerable: true,
  get: function get() {
    return _introspection.__Schema;
  }
});
Object.defineProperty(exports, '__Directive', {
  enumerable: true,
  get: function get() {
    return _introspection.__Directive;
  }
});
Object.defineProperty(exports, '__DirectiveLocation', {
  enumerable: true,
  get: function get() {
    return _introspection.__DirectiveLocation;
  }
});
Object.defineProperty(exports, '__Type', {
  enumerable: true,
  get: function get() {
    return _introspection.__Type;
  }
});
Object.defineProperty(exports, '__Field', {
  enumerable: true,
  get: function get() {
    return _introspection.__Field;
  }
});
Object.defineProperty(exports, '__InputValue', {
  enumerable: true,
  get: function get() {
    return _introspection.__InputValue;
  }
});
Object.defineProperty(exports, '__EnumValue', {
  enumerable: true,
  get: function get() {
    return _introspection.__EnumValue;
  }
});
Object.defineProperty(exports, '__TypeKind', {
  enumerable: true,
  get: function get() {
    return _introspection.__TypeKind;
  }
});
Object.defineProperty(exports, 'SchemaMetaFieldDef', {
  enumerable: true,
  get: function get() {
    return _introspection.SchemaMetaFieldDef;
  }
});
Object.defineProperty(exports, 'TypeMetaFieldDef', {
  enumerable: true,
  get: function get() {
    return _introspection.TypeMetaFieldDef;
  }
});
Object.defineProperty(exports, 'TypeNameMetaFieldDef', {
  enumerable: true,
  get: function get() {
    return _introspection.TypeNameMetaFieldDef;
  }
});

var _validate = require('./validate');

Object.defineProperty(exports, 'validateSchema', {
  enumerable: true,
  get: function get() {
    return _validate.validateSchema;
  }
});
Object.defineProperty(exports, 'assertValidSchema', {
  enumerable: true,
  get: function get() {
    return _validate.assertValidSchema;
  }
});
},{"./definition":131,"./directives":132,"./introspection":134,"./scalars":135,"./schema":136,"./validate":137}],134:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.introspectionTypes = exports.TypeNameMetaFieldDef = exports.TypeMetaFieldDef = exports.SchemaMetaFieldDef = exports.__TypeKind = exports.TypeKind = exports.__EnumValue = exports.__InputValue = exports.__Field = exports.__Type = exports.__DirectiveLocation = exports.__Directive = exports.__Schema = undefined;
exports.isIntrospectionType = isIntrospectionType;

var _isInvalid = require('../jsutils/isInvalid');

var _isInvalid2 = _interopRequireDefault(_isInvalid);

var _objectValues = require('../jsutils/objectValues');

var _objectValues2 = _interopRequireDefault(_objectValues);

var _astFromValue = require('../utilities/astFromValue');

var _printer = require('../language/printer');

var _definition = require('./definition');

var _scalars = require('./scalars');

var _directiveLocation = require('../language/directiveLocation');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __Schema = exports.__Schema = new _definition.GraphQLObjectType({
  name: '__Schema',
  isIntrospection: true,
  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',
  fields: function fields() {
    return {
      types: {
        description: 'A list of all types supported by this server.',
        type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Type))),
        resolve: function resolve(schema) {
          return (0, _objectValues2.default)(schema.getTypeMap());
        }
      },
      queryType: {
        description: 'The type that query operations will be rooted at.',
        type: (0, _definition.GraphQLNonNull)(__Type),
        resolve: function resolve(schema) {
          return schema.getQueryType();
        }
      },
      mutationType: {
        description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',
        type: __Type,
        resolve: function resolve(schema) {
          return schema.getMutationType();
        }
      },
      subscriptionType: {
        description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',
        type: __Type,
        resolve: function resolve(schema) {
          return schema.getSubscriptionType();
        }
      },
      directives: {
        description: 'A list of all directives supported by this server.',
        type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Directive))),
        resolve: function resolve(schema) {
          return schema.getDirectives();
        }
      }
    };
  }
}); /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     *  strict
     */

var __Directive = exports.__Directive = new _definition.GraphQLObjectType({
  name: '__Directive',
  isIntrospection: true,
  description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + "\n\nIn some cases, you need to provide options to alter GraphQL's " + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',
  fields: function fields() {
    return {
      name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },
      description: { type: _scalars.GraphQLString },
      locations: {
        type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__DirectiveLocation)))
      },
      args: {
        type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__InputValue))),
        resolve: function resolve(directive) {
          return directive.args || [];
        }
      },
      // NOTE: the following three fields are deprecated and are no longer part
      // of the GraphQL specification.
      onOperation: {
        deprecationReason: 'Use `locations`.',
        type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),
        resolve: function resolve(d) {
          return d.locations.indexOf(_directiveLocation.DirectiveLocation.QUERY) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.MUTATION) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.SUBSCRIPTION) !== -1;
        }
      },
      onFragment: {
        deprecationReason: 'Use `locations`.',
        type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),
        resolve: function resolve(d) {
          return d.locations.indexOf(_directiveLocation.DirectiveLocation.FRAGMENT_SPREAD) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.INLINE_FRAGMENT) !== -1 || d.locations.indexOf(_directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION) !== -1;
        }
      },
      onField: {
        deprecationReason: 'Use `locations`.',
        type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean),
        resolve: function resolve(d) {
          return d.locations.indexOf(_directiveLocation.DirectiveLocation.FIELD) !== -1;
        }
      }
    };
  }
});

var __DirectiveLocation = exports.__DirectiveLocation = new _definition.GraphQLEnumType({
  name: '__DirectiveLocation',
  isIntrospection: true,
  description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',
  values: {
    QUERY: {
      value: _directiveLocation.DirectiveLocation.QUERY,
      description: 'Location adjacent to a query operation.'
    },
    MUTATION: {
      value: _directiveLocation.DirectiveLocation.MUTATION,
      description: 'Location adjacent to a mutation operation.'
    },
    SUBSCRIPTION: {
      value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,
      description: 'Location adjacent to a subscription operation.'
    },
    FIELD: {
      value: _directiveLocation.DirectiveLocation.FIELD,
      description: 'Location adjacent to a field.'
    },
    FRAGMENT_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,
      description: 'Location adjacent to a fragment definition.'
    },
    FRAGMENT_SPREAD: {
      value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,
      description: 'Location adjacent to a fragment spread.'
    },
    INLINE_FRAGMENT: {
      value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,
      description: 'Location adjacent to an inline fragment.'
    },
    SCHEMA: {
      value: _directiveLocation.DirectiveLocation.SCHEMA,
      description: 'Location adjacent to a schema definition.'
    },
    SCALAR: {
      value: _directiveLocation.DirectiveLocation.SCALAR,
      description: 'Location adjacent to a scalar definition.'
    },
    OBJECT: {
      value: _directiveLocation.DirectiveLocation.OBJECT,
      description: 'Location adjacent to an object type definition.'
    },
    FIELD_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,
      description: 'Location adjacent to a field definition.'
    },
    ARGUMENT_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,
      description: 'Location adjacent to an argument definition.'
    },
    INTERFACE: {
      value: _directiveLocation.DirectiveLocation.INTERFACE,
      description: 'Location adjacent to an interface definition.'
    },
    UNION: {
      value: _directiveLocation.DirectiveLocation.UNION,
      description: 'Location adjacent to a union definition.'
    },
    ENUM: {
      value: _directiveLocation.DirectiveLocation.ENUM,
      description: 'Location adjacent to an enum definition.'
    },
    ENUM_VALUE: {
      value: _directiveLocation.DirectiveLocation.ENUM_VALUE,
      description: 'Location adjacent to an enum value definition.'
    },
    INPUT_OBJECT: {
      value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,
      description: 'Location adjacent to an input object type definition.'
    },
    INPUT_FIELD_DEFINITION: {
      value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,
      description: 'Location adjacent to an input object field definition.'
    }
  }
});

var __Type = exports.__Type = new _definition.GraphQLObjectType({
  name: '__Type',
  isIntrospection: true,
  description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\n\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',
  fields: function fields() {
    return {
      kind: {
        type: (0, _definition.GraphQLNonNull)(__TypeKind),
        resolve: function resolve(type) {
          if ((0, _definition.isScalarType)(type)) {
            return TypeKind.SCALAR;
          } else if ((0, _definition.isObjectType)(type)) {
            return TypeKind.OBJECT;
          } else if ((0, _definition.isInterfaceType)(type)) {
            return TypeKind.INTERFACE;
          } else if ((0, _definition.isUnionType)(type)) {
            return TypeKind.UNION;
          } else if ((0, _definition.isEnumType)(type)) {
            return TypeKind.ENUM;
          } else if ((0, _definition.isInputObjectType)(type)) {
            return TypeKind.INPUT_OBJECT;
          } else if ((0, _definition.isListType)(type)) {
            return TypeKind.LIST;
          } else if ((0, _definition.isNonNullType)(type)) {
            return TypeKind.NON_NULL;
          }
          throw new Error('Unknown kind of type: ' + type);
        }
      },
      name: { type: _scalars.GraphQLString },
      description: { type: _scalars.GraphQLString },
      fields: {
        type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Field)),
        args: {
          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }
        },
        resolve: function resolve(type, _ref) {
          var includeDeprecated = _ref.includeDeprecated;

          if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
            var fields = (0, _objectValues2.default)(type.getFields());
            if (!includeDeprecated) {
              fields = fields.filter(function (field) {
                return !field.deprecationReason;
              });
            }
            return fields;
          }
          return null;
        }
      },
      interfaces: {
        type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Type)),
        resolve: function resolve(type) {
          if ((0, _definition.isObjectType)(type)) {
            return type.getInterfaces();
          }
        }
      },
      possibleTypes: {
        type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__Type)),
        resolve: function resolve(type, args, context, _ref2) {
          var schema = _ref2.schema;

          if ((0, _definition.isAbstractType)(type)) {
            return schema.getPossibleTypes(type);
          }
        }
      },
      enumValues: {
        type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__EnumValue)),
        args: {
          includeDeprecated: { type: _scalars.GraphQLBoolean, defaultValue: false }
        },
        resolve: function resolve(type, _ref3) {
          var includeDeprecated = _ref3.includeDeprecated;

          if ((0, _definition.isEnumType)(type)) {
            var values = type.getValues();
            if (!includeDeprecated) {
              values = values.filter(function (value) {
                return !value.deprecationReason;
              });
            }
            return values;
          }
        }
      },
      inputFields: {
        type: (0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__InputValue)),
        resolve: function resolve(type) {
          if ((0, _definition.isInputObjectType)(type)) {
            return (0, _objectValues2.default)(type.getFields());
          }
        }
      },
      ofType: { type: __Type }
    };
  }
});

var __Field = exports.__Field = new _definition.GraphQLObjectType({
  name: '__Field',
  isIntrospection: true,
  description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',
  fields: function fields() {
    return {
      name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },
      description: { type: _scalars.GraphQLString },
      args: {
        type: (0, _definition.GraphQLNonNull)((0, _definition.GraphQLList)((0, _definition.GraphQLNonNull)(__InputValue))),
        resolve: function resolve(field) {
          return field.args || [];
        }
      },
      type: { type: (0, _definition.GraphQLNonNull)(__Type) },
      isDeprecated: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean) },
      deprecationReason: {
        type: _scalars.GraphQLString
      }
    };
  }
});

var __InputValue = exports.__InputValue = new _definition.GraphQLObjectType({
  name: '__InputValue',
  isIntrospection: true,
  description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',
  fields: function fields() {
    return {
      name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },
      description: { type: _scalars.GraphQLString },
      type: { type: (0, _definition.GraphQLNonNull)(__Type) },
      defaultValue: {
        type: _scalars.GraphQLString,
        description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',
        resolve: function resolve(inputVal) {
          return (0, _isInvalid2.default)(inputVal.defaultValue) ? null : (0, _printer.print)((0, _astFromValue.astFromValue)(inputVal.defaultValue, inputVal.type));
        }
      }
    };
  }
});

var __EnumValue = exports.__EnumValue = new _definition.GraphQLObjectType({
  name: '__EnumValue',
  isIntrospection: true,
  description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',
  fields: function fields() {
    return {
      name: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) },
      description: { type: _scalars.GraphQLString },
      isDeprecated: { type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLBoolean) },
      deprecationReason: {
        type: _scalars.GraphQLString
      }
    };
  }
});

var TypeKind = exports.TypeKind = {
  SCALAR: 'SCALAR',
  OBJECT: 'OBJECT',
  INTERFACE: 'INTERFACE',
  UNION: 'UNION',
  ENUM: 'ENUM',
  INPUT_OBJECT: 'INPUT_OBJECT',
  LIST: 'LIST',
  NON_NULL: 'NON_NULL'
};

var __TypeKind = exports.__TypeKind = new _definition.GraphQLEnumType({
  name: '__TypeKind',
  isIntrospection: true,
  description: 'An enum describing what kind of type a given `__Type` is.',
  values: {
    SCALAR: {
      value: TypeKind.SCALAR,
      description: 'Indicates this type is a scalar.'
    },
    OBJECT: {
      value: TypeKind.OBJECT,
      description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'
    },
    INTERFACE: {
      value: TypeKind.INTERFACE,
      description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'
    },
    UNION: {
      value: TypeKind.UNION,
      description: 'Indicates this type is a union. ' + '`possibleTypes` is a valid field.'
    },
    ENUM: {
      value: TypeKind.ENUM,
      description: 'Indicates this type is an enum. ' + '`enumValues` is a valid field.'
    },
    INPUT_OBJECT: {
      value: TypeKind.INPUT_OBJECT,
      description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'
    },
    LIST: {
      value: TypeKind.LIST,
      description: 'Indicates this type is a list. ' + '`ofType` is a valid field.'
    },
    NON_NULL: {
      value: TypeKind.NON_NULL,
      description: 'Indicates this type is a non-null. ' + '`ofType` is a valid field.'
    }
  }
});

/**
 * Note that these are GraphQLField and not GraphQLFieldConfig,
 * so the format for args is different.
 */

var SchemaMetaFieldDef = exports.SchemaMetaFieldDef = {
  name: '__schema',
  type: (0, _definition.GraphQLNonNull)(__Schema),
  description: 'Access the current type schema of this server.',
  args: [],
  resolve: function resolve(source, args, context, _ref4) {
    var schema = _ref4.schema;
    return schema;
  }
};

var TypeMetaFieldDef = exports.TypeMetaFieldDef = {
  name: '__type',
  type: __Type,
  description: 'Request the type information of a single type.',
  args: [{ name: 'name', type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString) }],
  resolve: function resolve(source, _ref5, context, _ref6) {
    var name = _ref5.name;
    var schema = _ref6.schema;
    return schema.getType(name);
  }
};

var TypeNameMetaFieldDef = exports.TypeNameMetaFieldDef = {
  name: '__typename',
  type: (0, _definition.GraphQLNonNull)(_scalars.GraphQLString),
  description: 'The name of the current Object type at runtime.',
  args: [],
  resolve: function resolve(source, args, context, _ref7) {
    var parentType = _ref7.parentType;
    return parentType.name;
  }
};

var introspectionTypes = exports.introspectionTypes = [__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind];

function isIntrospectionType(type) {
  return (0, _definition.isNamedType)(type) && (
  // Would prefer to use introspectionTypes.some(), however %checks needs
  // a simple expression.
  type.name === __Schema.name || type.name === __Directive.name || type.name === __DirectiveLocation.name || type.name === __Type.name || type.name === __Field.name || type.name === __InputValue.name || type.name === __EnumValue.name || type.name === __TypeKind.name);
}
},{"../jsutils/isInvalid":106,"../jsutils/objectValues":112,"../language/directiveLocation":119,"../language/printer":125,"../utilities/astFromValue":140,"./definition":131,"./scalars":135}],135:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.specifiedScalarTypes = exports.GraphQLID = exports.GraphQLBoolean = exports.GraphQLString = exports.GraphQLFloat = exports.GraphQLInt = undefined;
exports.isSpecifiedScalarType = isSpecifiedScalarType;

var _definition = require('./definition');

var _kinds = require('../language/kinds');

// As per the GraphQL Spec, Integers are only treated as valid when a valid
// 32-bit signed integer, providing the broadest support across platforms.
//
// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because
// they are internally represented as IEEE 754 doubles.
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

var MAX_INT = 2147483647;
var MIN_INT = -2147483648;

function coerceInt(value) {
  if (value === '') {
    throw new TypeError('Int cannot represent non 32-bit signed integer value: (empty string)');
  }
  var num = Number(value);
  if (num !== num || num > MAX_INT || num < MIN_INT) {
    throw new TypeError('Int cannot represent non 32-bit signed integer value: ' + String(value));
  }
  var int = Math.floor(num);
  if (int !== num) {
    throw new TypeError('Int cannot represent non-integer value: ' + String(value));
  }
  return int;
}

var GraphQLInt = exports.GraphQLInt = new _definition.GraphQLScalarType({
  name: 'Int',
  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',
  serialize: coerceInt,
  parseValue: coerceInt,
  parseLiteral: function parseLiteral(ast) {
    if (ast.kind === _kinds.Kind.INT) {
      var num = parseInt(ast.value, 10);
      if (num <= MAX_INT && num >= MIN_INT) {
        return num;
      }
    }
    return undefined;
  }
});

function coerceFloat(value) {
  if (value === '') {
    throw new TypeError('Float cannot represent non numeric value: (empty string)');
  }
  var num = Number(value);
  if (num === num) {
    return num;
  }
  throw new TypeError('Float cannot represent non numeric value: ' + String(value));
}

var GraphQLFloat = exports.GraphQLFloat = new _definition.GraphQLScalarType({
  name: 'Float',
  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',
  serialize: coerceFloat,
  parseValue: coerceFloat,
  parseLiteral: function parseLiteral(ast) {
    return ast.kind === _kinds.Kind.FLOAT || ast.kind === _kinds.Kind.INT ? parseFloat(ast.value) : undefined;
  }
});

function coerceString(value) {
  if (Array.isArray(value)) {
    throw new TypeError('String cannot represent an array value: [' + String(value) + ']');
  }
  return String(value);
}

var GraphQLString = exports.GraphQLString = new _definition.GraphQLScalarType({
  name: 'String',
  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',
  serialize: coerceString,
  parseValue: coerceString,
  parseLiteral: function parseLiteral(ast) {
    return ast.kind === _kinds.Kind.STRING ? ast.value : undefined;
  }
});

var GraphQLBoolean = exports.GraphQLBoolean = new _definition.GraphQLScalarType({
  name: 'Boolean',
  description: 'The `Boolean` scalar type represents `true` or `false`.',
  serialize: Boolean,
  parseValue: Boolean,
  parseLiteral: function parseLiteral(ast) {
    return ast.kind === _kinds.Kind.BOOLEAN ? ast.value : undefined;
  }
});

var GraphQLID = exports.GraphQLID = new _definition.GraphQLScalarType({
  name: 'ID',
  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `"4"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',
  serialize: String,
  parseValue: String,
  parseLiteral: function parseLiteral(ast) {
    return ast.kind === _kinds.Kind.STRING || ast.kind === _kinds.Kind.INT ? ast.value : undefined;
  }
});

var specifiedScalarTypes = exports.specifiedScalarTypes = [GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID];

function isSpecifiedScalarType(type) {
  return (0, _definition.isNamedType)(type) && (
  // Would prefer to use specifiedScalarTypes.some(), however %checks needs
  // a simple expression.
  type.name === GraphQLString.name || type.name === GraphQLInt.name || type.name === GraphQLFloat.name || type.name === GraphQLBoolean.name || type.name === GraphQLID.name);
}
},{"../language/kinds":121,"./definition":131}],136:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLSchema = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.isSchema = isSchema;

var _definition = require('./definition');

var _directives = require('./directives');

var _introspection = require('./introspection');

var _find = require('../jsutils/find');

var _find2 = _interopRequireDefault(_find);

var _instanceOf = require('../jsutils/instanceOf');

var _instanceOf2 = _interopRequireDefault(_instanceOf);

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _objectValues = require('../jsutils/objectValues');

var _objectValues2 = _interopRequireDefault(_objectValues);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                           *
                                                                                                                                                           * This source code is licensed under the MIT license found in the
                                                                                                                                                           * LICENSE file in the root directory of this source tree.
                                                                                                                                                           *
                                                                                                                                                           *  strict
                                                                                                                                                           */

// eslint-disable-next-line no-redeclare


/**
 * Test if the given value is a GraphQL schema.
 */
function isSchema(schema) {
  return (0, _instanceOf2.default)(schema, GraphQLSchema);
}

/**
 * Schema Definition
 *
 * A Schema is created by supplying the root types of each type of operation,
 * query and mutation (optional). A schema definition is then supplied to the
 * validator and executor.
 *
 * Example:
 *
 *     const MyAppSchema = new GraphQLSchema({
 *       query: MyAppQueryRootType,
 *       mutation: MyAppMutationRootType,
 *     })
 *
 * Note: If an array of `directives` are provided to GraphQLSchema, that will be
 * the exact list of directives represented and allowed. If `directives` is not
 * provided then a default set of the specified directives (e.g. @include and
 * @skip) will be used. If you wish to provide *additional* directives to these
 * specified directives, you must explicitly declare them. Example:
 *
 *     const MyAppSchema = new GraphQLSchema({
 *       ...
 *       directives: specifiedDirectives.concat([ myCustomDirective ]),
 *     })
 *
 */

var GraphQLSchema = exports.GraphQLSchema = function () {
  // Used as a cache for validateSchema().
  function GraphQLSchema(config) {
    var _this = this;

    _classCallCheck(this, GraphQLSchema);

    // If this schema was built from a source known to be valid, then it may be
    // marked with assumeValid to avoid an additional type system validation.
    if (config && config.assumeValid) {
      this.__validationErrors = [];
    } else {
      // Otherwise check for common mistakes during construction to produce
      // clear and early error messages.
      !((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') ? (0, _invariant2.default)(0, 'Must provide configuration object.') : void 0;
      !(!config.types || Array.isArray(config.types)) ? (0, _invariant2.default)(0, '"types" must be Array if provided but got: ' + String(config.types) + '.') : void 0;
      !(!config.directives || Array.isArray(config.directives)) ? (0, _invariant2.default)(0, '"directives" must be Array if provided but got: ' + (String(config.directives) + '.')) : void 0;
      !(!config.allowedLegacyNames || Array.isArray(config.allowedLegacyNames)) ? (0, _invariant2.default)(0, '"allowedLegacyNames" must be Array if provided but got: ' + (String(config.allowedLegacyNames) + '.')) : void 0;
    }

    this.__allowedLegacyNames = config.allowedLegacyNames;
    this._queryType = config.query;
    this._mutationType = config.mutation;
    this._subscriptionType = config.subscription;
    // Provide specified directives (e.g. @include and @skip) by default.
    this._directives = config.directives || _directives.specifiedDirectives;
    this.astNode = config.astNode;

    // Build type map now to detect any errors within this schema.
    var initialTypes = [this.getQueryType(), this.getMutationType(), this.getSubscriptionType(), _introspection.__Schema];

    var types = config.types;
    if (types) {
      initialTypes = initialTypes.concat(types);
    }

    // Keep track of all types referenced within the schema.
    var typeMap = Object.create(null);

    // First by deeply visiting all initial types.
    typeMap = initialTypes.reduce(typeMapReducer, typeMap);

    // Then by deeply visiting all directive types.
    typeMap = this._directives.reduce(typeMapDirectiveReducer, typeMap);

    // Storing the resulting map for reference by the schema.
    this._typeMap = typeMap;

    // Keep track of all implementations by interface name.
    this._implementations = Object.create(null);
    Object.keys(this._typeMap).forEach(function (typeName) {
      var type = _this._typeMap[typeName];
      if ((0, _definition.isObjectType)(type)) {
        type.getInterfaces().forEach(function (iface) {
          if ((0, _definition.isInterfaceType)(iface)) {
            var impls = _this._implementations[iface.name];
            if (impls) {
              impls.push(type);
            } else {
              _this._implementations[iface.name] = [type];
            }
          }
        });
      }
    });
  }
  // Referenced by validateSchema().


  GraphQLSchema.prototype.getQueryType = function getQueryType() {
    return this._queryType;
  };

  GraphQLSchema.prototype.getMutationType = function getMutationType() {
    return this._mutationType;
  };

  GraphQLSchema.prototype.getSubscriptionType = function getSubscriptionType() {
    return this._subscriptionType;
  };

  GraphQLSchema.prototype.getTypeMap = function getTypeMap() {
    return this._typeMap;
  };

  GraphQLSchema.prototype.getType = function getType(name) {
    return this.getTypeMap()[name];
  };

  GraphQLSchema.prototype.getPossibleTypes = function getPossibleTypes(abstractType) {
    if ((0, _definition.isUnionType)(abstractType)) {
      return abstractType.getTypes();
    }
    return this._implementations[abstractType.name];
  };

  GraphQLSchema.prototype.isPossibleType = function isPossibleType(abstractType, possibleType) {
    var possibleTypeMap = this._possibleTypeMap;
    if (!possibleTypeMap) {
      this._possibleTypeMap = possibleTypeMap = Object.create(null);
    }

    if (!possibleTypeMap[abstractType.name]) {
      var possibleTypes = this.getPossibleTypes(abstractType);
      !Array.isArray(possibleTypes) ? (0, _invariant2.default)(0, 'Could not find possible implementing types for ' + abstractType.name + ' ' + 'in schema. Check that schema.types is defined and is an array of ' + 'all possible types in the schema.') : void 0;
      possibleTypeMap[abstractType.name] = possibleTypes.reduce(function (map, type) {
        return map[type.name] = true, map;
      }, Object.create(null));
    }

    return Boolean(possibleTypeMap[abstractType.name][possibleType.name]);
  };

  GraphQLSchema.prototype.getDirectives = function getDirectives() {
    return this._directives;
  };

  GraphQLSchema.prototype.getDirective = function getDirective(name) {
    return (0, _find2.default)(this.getDirectives(), function (directive) {
      return directive.name === name;
    });
  };

  return GraphQLSchema;
}();

function typeMapReducer(map, type) {
  if (!type) {
    return map;
  }
  if ((0, _definition.isWrappingType)(type)) {
    return typeMapReducer(map, type.ofType);
  }
  if (map[type.name]) {
    !(map[type.name] === type) ? (0, _invariant2.default)(0, 'Schema must contain unique named types but contains multiple ' + ('types named "' + type.name + '".')) : void 0;
    return map;
  }
  map[type.name] = type;

  var reducedMap = map;

  if ((0, _definition.isUnionType)(type)) {
    reducedMap = type.getTypes().reduce(typeMapReducer, reducedMap);
  }

  if ((0, _definition.isObjectType)(type)) {
    reducedMap = type.getInterfaces().reduce(typeMapReducer, reducedMap);
  }

  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
    (0, _objectValues2.default)(type.getFields()).forEach(function (field) {
      if (field.args) {
        var fieldArgTypes = field.args.map(function (arg) {
          return arg.type;
        });
        reducedMap = fieldArgTypes.reduce(typeMapReducer, reducedMap);
      }
      reducedMap = typeMapReducer(reducedMap, field.type);
    });
  }

  if ((0, _definition.isInputObjectType)(type)) {
    (0, _objectValues2.default)(type.getFields()).forEach(function (field) {
      reducedMap = typeMapReducer(reducedMap, field.type);
    });
  }

  return reducedMap;
}

function typeMapDirectiveReducer(map, directive) {
  // Directives are not validated until validateSchema() is called.
  if (!(0, _directives.isDirective)(directive)) {
    return map;
  }
  return directive.args.reduce(function (_map, arg) {
    return typeMapReducer(_map, arg.type);
  }, map);
}
},{"../jsutils/find":103,"../jsutils/instanceOf":104,"../jsutils/invariant":105,"../jsutils/objectValues":112,"./definition":131,"./directives":132,"./introspection":134}],137:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateSchema = validateSchema;
exports.assertValidSchema = assertValidSchema;

var _definition = require('./definition');

var _directives = require('./directives');

var _introspection = require('./introspection');

var _schema = require('./schema');

var _find = require('../jsutils/find');

var _find2 = _interopRequireDefault(_find);

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _objectValues = require('../jsutils/objectValues');

var _objectValues2 = _interopRequireDefault(_objectValues);

var _GraphQLError = require('../error/GraphQLError');

var _assertValidName = require('../utilities/assertValidName');

var _typeComparators = require('../utilities/typeComparators');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                           *
                                                                                                                                                           * This source code is licensed under the MIT license found in the
                                                                                                                                                           * LICENSE file in the root directory of this source tree.
                                                                                                                                                           *
                                                                                                                                                           *  strict
                                                                                                                                                           */

/**
 * Implements the "Type Validation" sub-sections of the specification's
 * "Type System" section.
 *
 * Validation runs synchronously, returning an array of encountered errors, or
 * an empty array if no errors were encountered and the Schema is valid.
 */
function validateSchema(schema) {
  // First check to ensure the provided value is in fact a GraphQLSchema.
  !(0, _schema.isSchema)(schema) ? (0, _invariant2.default)(0, 'Expected ' + String(schema) + ' to be a GraphQL schema.') : void 0;

  // If this Schema has already been validated, return the previous results.
  if (schema.__validationErrors) {
    return schema.__validationErrors;
  }

  // Validate the schema, producing a list of errors.
  var context = new SchemaValidationContext(schema);
  validateRootTypes(context);
  validateDirectives(context);
  validateTypes(context);

  // Persist the results of validation before returning to ensure validation
  // does not run multiple times for this schema.
  var errors = context.getErrors();
  schema.__validationErrors = errors;
  return errors;
}

/**
 * Utility function which asserts a schema is valid by throwing an error if
 * it is invalid.
 */
function assertValidSchema(schema) {
  var errors = validateSchema(schema);
  if (errors.length !== 0) {
    throw new Error(errors.map(function (error) {
      return error.message;
    }).join('\n\n'));
  }
}

var SchemaValidationContext = function () {
  function SchemaValidationContext(schema) {
    _classCallCheck(this, SchemaValidationContext);

    this._errors = [];
    this.schema = schema;
  }

  SchemaValidationContext.prototype.reportError = function reportError(message, nodes) {
    var _nodes = (Array.isArray(nodes) ? nodes : [nodes]).filter(Boolean);
    this.addError(new _GraphQLError.GraphQLError(message, _nodes));
  };

  SchemaValidationContext.prototype.addError = function addError(error) {
    this._errors.push(error);
  };

  SchemaValidationContext.prototype.getErrors = function getErrors() {
    return this._errors;
  };

  return SchemaValidationContext;
}();

function validateRootTypes(context) {
  var schema = context.schema;
  var queryType = schema.getQueryType();
  if (!queryType) {
    context.reportError('Query root type must be provided.', schema.astNode);
  } else if (!(0, _definition.isObjectType)(queryType)) {
    context.reportError('Query root type must be Object type, it cannot be ' + String(queryType) + '.', getOperationTypeNode(schema, queryType, 'query'));
  }

  var mutationType = schema.getMutationType();
  if (mutationType && !(0, _definition.isObjectType)(mutationType)) {
    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + (String(mutationType) + '.'), getOperationTypeNode(schema, mutationType, 'mutation'));
  }

  var subscriptionType = schema.getSubscriptionType();
  if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {
    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + (String(subscriptionType) + '.'), getOperationTypeNode(schema, subscriptionType, 'subscription'));
  }
}

function getOperationTypeNode(schema, type, operation) {
  var astNode = schema.astNode;
  var operationTypeNode = astNode && astNode.operationTypes.find(function (operationType) {
    return operationType.operation === operation;
  });
  return operationTypeNode ? operationTypeNode.type : type && type.astNode;
}

function validateDirectives(context) {
  var directives = context.schema.getDirectives();
  directives.forEach(function (directive) {
    // Ensure all directives are in fact GraphQL directives.
    if (!(0, _directives.isDirective)(directive)) {
      context.reportError('Expected directive but got: ' + String(directive) + '.', directive && directive.astNode);
      return;
    }

    // Ensure they are named correctly.
    validateName(context, directive);

    // TODO: Ensure proper locations.

    // Ensure the arguments are valid.
    var argNames = Object.create(null);
    directive.args.forEach(function (arg) {
      var argName = arg.name;

      // Ensure they are named correctly.
      validateName(context, arg);

      // Ensure they are unique per directive.
      if (argNames[argName]) {
        context.reportError('Argument @' + directive.name + '(' + argName + ':) can only be defined once.', getAllDirectiveArgNodes(directive, argName));
        return; // continue loop
      }
      argNames[argName] = true;

      // Ensure the type is an input type.
      if (!(0, _definition.isInputType)(arg.type)) {
        context.reportError('The type of @' + directive.name + '(' + argName + ':) must be Input Type ' + ('but got: ' + String(arg.type) + '.'), getDirectiveArgTypeNode(directive, argName));
      }
    });
  });
}

function validateName(context, node) {
  // If a schema explicitly allows some legacy name which is no longer valid,
  // allow it to be assumed valid.
  if (context.schema.__allowedLegacyNames && context.schema.__allowedLegacyNames.indexOf(node.name) !== -1) {
    return;
  }
  // Ensure names are valid, however introspection types opt out.
  var error = (0, _assertValidName.isValidNameError)(node.name, node.astNode || undefined);
  if (error) {
    context.addError(error);
  }
}

function validateTypes(context) {
  var typeMap = context.schema.getTypeMap();
  (0, _objectValues2.default)(typeMap).forEach(function (type) {
    // Ensure all provided types are in fact GraphQL type.
    if (!(0, _definition.isNamedType)(type)) {
      context.reportError('Expected GraphQL named type but got: ' + String(type) + '.', type && type.astNode);
      return;
    }

    // Ensure it is named correctly (excluding introspection types).
    if (!(0, _introspection.isIntrospectionType)(type)) {
      validateName(context, type);
    }

    if ((0, _definition.isObjectType)(type)) {
      // Ensure fields are valid
      validateFields(context, type);

      // Ensure objects implement the interfaces they claim to.
      validateObjectInterfaces(context, type);
    } else if ((0, _definition.isInterfaceType)(type)) {
      // Ensure fields are valid.
      validateFields(context, type);
    } else if ((0, _definition.isUnionType)(type)) {
      // Ensure Unions include valid member types.
      validateUnionMembers(context, type);
    } else if ((0, _definition.isEnumType)(type)) {
      // Ensure Enums have valid values.
      validateEnumValues(context, type);
    } else if ((0, _definition.isInputObjectType)(type)) {
      // Ensure Input Object fields are valid.
      validateInputFields(context, type);
    }
  });
}

function validateFields(context, type) {
  var fields = (0, _objectValues2.default)(type.getFields());

  // Objects and Interfaces both must define one or more fields.
  if (fields.length === 0) {
    context.reportError('Type ' + type.name + ' must define one or more fields.', getAllObjectOrInterfaceNodes(type));
  }

  fields.forEach(function (field) {
    // Ensure they are named correctly.
    validateName(context, field);

    // Ensure they were defined at most once.
    var fieldNodes = getAllFieldNodes(type, field.name);
    if (fieldNodes.length > 1) {
      context.reportError('Field ' + type.name + '.' + field.name + ' can only be defined once.', fieldNodes);
      return; // continue loop
    }

    // Ensure the type is an output type
    if (!(0, _definition.isOutputType)(field.type)) {
      context.reportError('The type of ' + type.name + '.' + field.name + ' must be Output Type ' + ('but got: ' + String(field.type) + '.'), getFieldTypeNode(type, field.name));
    }

    // Ensure the arguments are valid
    var argNames = Object.create(null);
    field.args.forEach(function (arg) {
      var argName = arg.name;

      // Ensure they are named correctly.
      validateName(context, arg);

      // Ensure they are unique per field.
      if (argNames[argName]) {
        context.reportError('Field argument ' + type.name + '.' + field.name + '(' + argName + ':) can only ' + 'be defined once.', getAllFieldArgNodes(type, field.name, argName));
      }
      argNames[argName] = true;

      // Ensure the type is an input type
      if (!(0, _definition.isInputType)(arg.type)) {
        context.reportError('The type of ' + type.name + '.' + field.name + '(' + argName + ':) must be Input ' + ('Type but got: ' + String(arg.type) + '.'), getFieldArgTypeNode(type, field.name, argName));
      }
    });
  });
}

function validateObjectInterfaces(context, object) {
  var implementedTypeNames = Object.create(null);
  object.getInterfaces().forEach(function (iface) {
    if (!(0, _definition.isInterfaceType)(iface)) {
      context.reportError('Type ' + String(object) + ' must only implement Interface types, ' + ('it cannot implement ' + String(iface) + '.'), getImplementsInterfaceNode(object, iface));
      return;
    }

    if (implementedTypeNames[iface.name]) {
      context.reportError('Type ' + object.name + ' can only implement ' + iface.name + ' once.', getAllImplementsInterfaceNodes(object, iface));
      return; // continue loop
    }
    implementedTypeNames[iface.name] = true;
    validateObjectImplementsInterface(context, object, iface);
  });
}

function validateObjectImplementsInterface(context, object, iface) {
  var objectFieldMap = object.getFields();
  var ifaceFieldMap = iface.getFields();

  // Assert each interface field is implemented.
  Object.keys(ifaceFieldMap).forEach(function (fieldName) {
    var objectField = objectFieldMap[fieldName];
    var ifaceField = ifaceFieldMap[fieldName];

    // Assert interface field exists on object.
    if (!objectField) {
      context.reportError('Interface field ' + iface.name + '.' + fieldName + ' expected but ' + (object.name + ' does not provide it.'), [getFieldNode(iface, fieldName), object.astNode]);
      // Continue loop over fields.
      return;
    }

    // Assert interface field type is satisfied by object field type, by being
    // a valid subtype. (covariant)
    if (!(0, _typeComparators.isTypeSubTypeOf)(context.schema, objectField.type, ifaceField.type)) {
      context.reportError('Interface field ' + iface.name + '.' + fieldName + ' expects type ' + (String(ifaceField.type) + ' but ' + object.name + '.' + fieldName + ' ') + ('is type ' + String(objectField.type) + '.'), [getFieldTypeNode(iface, fieldName), getFieldTypeNode(object, fieldName)]);
    }

    // Assert each interface field arg is implemented.
    ifaceField.args.forEach(function (ifaceArg) {
      var argName = ifaceArg.name;
      var objectArg = (0, _find2.default)(objectField.args, function (arg) {
        return arg.name === argName;
      });

      // Assert interface field arg exists on object field.
      if (!objectArg) {
        context.reportError('Interface field argument ' + iface.name + '.' + fieldName + '(' + argName + ':) ' + ('expected but ' + object.name + '.' + fieldName + ' does not provide it.'), [getFieldArgNode(iface, fieldName, argName), getFieldNode(object, fieldName)]);
        // Continue loop over arguments.
        return;
      }

      // Assert interface field arg type matches object field arg type.
      // (invariant)
      // TODO: change to contravariant?
      if (!(0, _typeComparators.isEqualType)(ifaceArg.type, objectArg.type)) {
        context.reportError('Interface field argument ' + iface.name + '.' + fieldName + '(' + argName + ':) ' + ('expects type ' + String(ifaceArg.type) + ' but ') + (object.name + '.' + fieldName + '(' + argName + ':) is type ') + (String(objectArg.type) + '.'), [getFieldArgTypeNode(iface, fieldName, argName), getFieldArgTypeNode(object, fieldName, argName)]);
      }

      // TODO: validate default values?
    });

    // Assert additional arguments must not be required.
    objectField.args.forEach(function (objectArg) {
      var argName = objectArg.name;
      var ifaceArg = (0, _find2.default)(ifaceField.args, function (arg) {
        return arg.name === argName;
      });
      if (!ifaceArg && (0, _definition.isNonNullType)(objectArg.type)) {
        context.reportError('Object field argument ' + object.name + '.' + fieldName + '(' + argName + ':) ' + ('is of required type ' + String(objectArg.type) + ' but is not also ') + ('provided by the Interface field ' + iface.name + '.' + fieldName + '.'), [getFieldArgTypeNode(object, fieldName, argName), getFieldNode(iface, fieldName)]);
      }
    });
  });
}

function validateUnionMembers(context, union) {
  var memberTypes = union.getTypes();

  if (memberTypes.length === 0) {
    context.reportError('Union type ' + union.name + ' must define one or more member types.', union.astNode);
  }

  var includedTypeNames = Object.create(null);
  memberTypes.forEach(function (memberType) {
    if (includedTypeNames[memberType.name]) {
      context.reportError('Union type ' + union.name + ' can only include type ' + (memberType.name + ' once.'), getUnionMemberTypeNodes(union, memberType.name));
      return; // continue loop
    }
    includedTypeNames[memberType.name] = true;
    if (!(0, _definition.isObjectType)(memberType)) {
      context.reportError('Union type ' + union.name + ' can only include Object types, ' + ('it cannot include ' + String(memberType) + '.'), getUnionMemberTypeNodes(union, String(memberType)));
    }
  });
}

function validateEnumValues(context, enumType) {
  var enumValues = enumType.getValues();

  if (enumValues.length === 0) {
    context.reportError('Enum type ' + enumType.name + ' must define one or more values.', enumType.astNode);
  }

  enumValues.forEach(function (enumValue) {
    var valueName = enumValue.name;

    // Ensure no duplicates.
    var allNodes = getEnumValueNodes(enumType, valueName);
    if (allNodes && allNodes.length > 1) {
      context.reportError('Enum type ' + enumType.name + ' can include value ' + valueName + ' only once.', allNodes);
    }

    // Ensure valid name.
    validateName(context, enumValue);
    if (valueName === 'true' || valueName === 'false' || valueName === 'null') {
      context.reportError('Enum type ' + enumType.name + ' cannot include value: ' + valueName + '.', enumValue.astNode);
    }
  });
}

function validateInputFields(context, inputObj) {
  var fields = (0, _objectValues2.default)(inputObj.getFields());

  if (fields.length === 0) {
    context.reportError('Input Object type ' + inputObj.name + ' must define one or more fields.', inputObj.astNode);
  }

  // Ensure the arguments are valid
  fields.forEach(function (field) {
    // Ensure they are named correctly.
    validateName(context, field);

    // TODO: Ensure they are unique per field.

    // Ensure the type is an input type
    if (!(0, _definition.isInputType)(field.type)) {
      context.reportError('The type of ' + inputObj.name + '.' + field.name + ' must be Input Type ' + ('but got: ' + String(field.type) + '.'), field.astNode && field.astNode.type);
    }
  });
}

function getAllObjectNodes(type) {
  return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];
}

function getAllObjectOrInterfaceNodes(type) {
  return type.astNode ? type.extensionASTNodes ? [type.astNode].concat(type.extensionASTNodes) : [type.astNode] : type.extensionASTNodes || [];
}

function getImplementsInterfaceNode(type, iface) {
  return getAllImplementsInterfaceNodes(type, iface)[0];
}

function getAllImplementsInterfaceNodes(type, iface) {
  var implementsNodes = [];
  var astNodes = getAllObjectNodes(type);
  for (var i = 0; i < astNodes.length; i++) {
    var _astNode = astNodes[i];
    if (_astNode && _astNode.interfaces) {
      _astNode.interfaces.forEach(function (node) {
        if (node.name.value === iface.name) {
          implementsNodes.push(node);
        }
      });
    }
  }
  return implementsNodes;
}

function getFieldNode(type, fieldName) {
  return getAllFieldNodes(type, fieldName)[0];
}

function getAllFieldNodes(type, fieldName) {
  var fieldNodes = [];
  var astNodes = getAllObjectOrInterfaceNodes(type);
  for (var i = 0; i < astNodes.length; i++) {
    var _astNode2 = astNodes[i];
    if (_astNode2 && _astNode2.fields) {
      _astNode2.fields.forEach(function (node) {
        if (node.name.value === fieldName) {
          fieldNodes.push(node);
        }
      });
    }
  }
  return fieldNodes;
}

function getFieldTypeNode(type, fieldName) {
  var fieldNode = getFieldNode(type, fieldName);
  return fieldNode && fieldNode.type;
}

function getFieldArgNode(type, fieldName, argName) {
  return getAllFieldArgNodes(type, fieldName, argName)[0];
}

function getAllFieldArgNodes(type, fieldName, argName) {
  var argNodes = [];
  var fieldNode = getFieldNode(type, fieldName);
  if (fieldNode && fieldNode.arguments) {
    fieldNode.arguments.forEach(function (node) {
      if (node.name.value === argName) {
        argNodes.push(node);
      }
    });
  }
  return argNodes;
}

function getFieldArgTypeNode(type, fieldName, argName) {
  var fieldArgNode = getFieldArgNode(type, fieldName, argName);
  return fieldArgNode && fieldArgNode.type;
}

function getAllDirectiveArgNodes(directive, argName) {
  var argNodes = [];
  var directiveNode = directive.astNode;
  if (directiveNode && directiveNode.arguments) {
    directiveNode.arguments.forEach(function (node) {
      if (node.name.value === argName) {
        argNodes.push(node);
      }
    });
  }
  return argNodes;
}

function getDirectiveArgTypeNode(directive, argName) {
  var argNode = getAllDirectiveArgNodes(directive, argName)[0];
  return argNode && argNode.type;
}

function getUnionMemberTypeNodes(union, typeName) {
  return union.astNode && union.astNode.types && union.astNode.types.filter(function (type) {
    return type.name.value === typeName;
  });
}

function getEnumValueNodes(enumType, valueName) {
  return enumType.astNode && enumType.astNode.values && enumType.astNode.values.filter(function (value) {
    return value.name.value === valueName;
  });
}
},{"../error/GraphQLError":92,"../jsutils/find":103,"../jsutils/invariant":105,"../jsutils/objectValues":112,"../utilities/assertValidName":139,"../utilities/typeComparators":157,"./definition":131,"./directives":132,"./introspection":134,"./schema":136}],138:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeInfo = undefined;

var _kinds = require('../language/kinds');

var _definition = require('../type/definition');

var _introspection = require('../type/introspection');

var _typeFromAST = require('./typeFromAST');

var _find = require('../jsutils/find');

var _find2 = _interopRequireDefault(_find);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                           *
                                                                                                                                                           * This source code is licensed under the MIT license found in the
                                                                                                                                                           * LICENSE file in the root directory of this source tree.
                                                                                                                                                           *
                                                                                                                                                           *  strict
                                                                                                                                                           */

/**
 * TypeInfo is a utility class which, given a GraphQL schema, can keep track
 * of the current field and type definitions at any point in a GraphQL document
 * AST during a recursive descent by calling `enter(node)` and `leave(node)`.
 */
var TypeInfo = exports.TypeInfo = function () {
  function TypeInfo(schema,
  // NOTE: this experimental optional second parameter is only needed in order
  // to support non-spec-compliant codebases. You should never need to use it.
  getFieldDefFn,
  // Initial type may be provided in rare cases to facilitate traversals
  initialType) {
    _classCallCheck(this, TypeInfo);

    this._schema = schema;
    this._typeStack = [];
    this._parentTypeStack = [];
    this._inputTypeStack = [];
    this._fieldDefStack = [];
    this._directive = null;
    this._argument = null;
    this._enumValue = null;
    this._getFieldDef = getFieldDefFn || getFieldDef;
    if (initialType) {
      if ((0, _definition.isInputType)(initialType)) {
        this._inputTypeStack.push(initialType);
      }
      if ((0, _definition.isCompositeType)(initialType)) {
        this._parentTypeStack.push(initialType);
      }
      if ((0, _definition.isOutputType)(initialType)) {
        this._typeStack.push(initialType);
      }
    }
  }

  TypeInfo.prototype.getType = function getType() {
    if (this._typeStack.length > 0) {
      return this._typeStack[this._typeStack.length - 1];
    }
  };

  TypeInfo.prototype.getParentType = function getParentType() {
    if (this._parentTypeStack.length > 0) {
      return this._parentTypeStack[this._parentTypeStack.length - 1];
    }
  };

  TypeInfo.prototype.getInputType = function getInputType() {
    if (this._inputTypeStack.length > 0) {
      return this._inputTypeStack[this._inputTypeStack.length - 1];
    }
  };

  TypeInfo.prototype.getParentInputType = function getParentInputType() {
    if (this._inputTypeStack.length > 1) {
      return this._inputTypeStack[this._inputTypeStack.length - 2];
    }
  };

  TypeInfo.prototype.getFieldDef = function getFieldDef() {
    if (this._fieldDefStack.length > 0) {
      return this._fieldDefStack[this._fieldDefStack.length - 1];
    }
  };

  TypeInfo.prototype.getDirective = function getDirective() {
    return this._directive;
  };

  TypeInfo.prototype.getArgument = function getArgument() {
    return this._argument;
  };

  TypeInfo.prototype.getEnumValue = function getEnumValue() {
    return this._enumValue;
  };

  // Flow does not yet handle this case.


  TypeInfo.prototype.enter = function enter(node /* ASTNode */) {
    var schema = this._schema;
    // Note: many of the types below are explicitly typed as "mixed" to drop
    // any assumptions of a valid schema to ensure runtime types are properly
    // checked before continuing since TypeInfo is used as part of validation
    // which occurs before guarantees of schema and document validity.
    switch (node.kind) {
      case _kinds.Kind.SELECTION_SET:
        var namedType = (0, _definition.getNamedType)(this.getType());
        this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : undefined);
        break;
      case _kinds.Kind.FIELD:
        var parentType = this.getParentType();
        var fieldDef = void 0;
        var fieldType = void 0;
        if (parentType) {
          fieldDef = this._getFieldDef(schema, parentType, node);
          if (fieldDef) {
            fieldType = fieldDef.type;
          }
        }
        this._fieldDefStack.push(fieldDef);
        this._typeStack.push((0, _definition.isOutputType)(fieldType) ? fieldType : undefined);
        break;
      case _kinds.Kind.DIRECTIVE:
        this._directive = schema.getDirective(node.name.value);
        break;
      case _kinds.Kind.OPERATION_DEFINITION:
        var type = void 0;
        if (node.operation === 'query') {
          type = schema.getQueryType();
        } else if (node.operation === 'mutation') {
          type = schema.getMutationType();
        } else if (node.operation === 'subscription') {
          type = schema.getSubscriptionType();
        }
        this._typeStack.push((0, _definition.isObjectType)(type) ? type : undefined);
        break;
      case _kinds.Kind.INLINE_FRAGMENT:
      case _kinds.Kind.FRAGMENT_DEFINITION:
        var typeConditionAST = node.typeCondition;
        var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : (0, _definition.getNamedType)(this.getType());
        this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : undefined);
        break;
      case _kinds.Kind.VARIABLE_DEFINITION:
        var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);
        this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : undefined);
        break;
      case _kinds.Kind.ARGUMENT:
        var argDef = void 0;
        var argType = void 0;
        var fieldOrDirective = this.getDirective() || this.getFieldDef();
        if (fieldOrDirective) {
          argDef = (0, _find2.default)(fieldOrDirective.args, function (arg) {
            return arg.name === node.name.value;
          });
          if (argDef) {
            argType = argDef.type;
          }
        }
        this._argument = argDef;
        this._inputTypeStack.push((0, _definition.isInputType)(argType) ? argType : undefined);
        break;
      case _kinds.Kind.LIST:
        var listType = (0, _definition.getNullableType)(this.getInputType());
        var itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType;
        this._inputTypeStack.push((0, _definition.isInputType)(itemType) ? itemType : undefined);
        break;
      case _kinds.Kind.OBJECT_FIELD:
        var objectType = (0, _definition.getNamedType)(this.getInputType());
        var inputFieldType = void 0;
        if ((0, _definition.isInputObjectType)(objectType)) {
          var inputField = objectType.getFields()[node.name.value];
          if (inputField) {
            inputFieldType = inputField.type;
          }
        }
        this._inputTypeStack.push((0, _definition.isInputType)(inputFieldType) ? inputFieldType : undefined);
        break;
      case _kinds.Kind.ENUM:
        var enumType = (0, _definition.getNamedType)(this.getInputType());
        var enumValue = void 0;
        if ((0, _definition.isEnumType)(enumType)) {
          enumValue = enumType.getValue(node.value);
        }
        this._enumValue = enumValue;
        break;
    }
  };

  TypeInfo.prototype.leave = function leave(node) {
    switch (node.kind) {
      case _kinds.Kind.SELECTION_SET:
        this._parentTypeStack.pop();
        break;
      case _kinds.Kind.FIELD:
        this._fieldDefStack.pop();
        this._typeStack.pop();
        break;
      case _kinds.Kind.DIRECTIVE:
        this._directive = null;
        break;
      case _kinds.Kind.OPERATION_DEFINITION:
      case _kinds.Kind.INLINE_FRAGMENT:
      case _kinds.Kind.FRAGMENT_DEFINITION:
        this._typeStack.pop();
        break;
      case _kinds.Kind.VARIABLE_DEFINITION:
        this._inputTypeStack.pop();
        break;
      case _kinds.Kind.ARGUMENT:
        this._argument = null;
        this._inputTypeStack.pop();
        break;
      case _kinds.Kind.LIST:
      case _kinds.Kind.OBJECT_FIELD:
        this._inputTypeStack.pop();
        break;
      case _kinds.Kind.ENUM:
        this._enumValue = null;
        break;
    }
  };

  return TypeInfo;
}();

/**
 * Not exactly the same as the executor's definition of getFieldDef, in this
 * statically evaluated environment we do not always have an Object type,
 * and need to handle Interface and Union types.
 */


function getFieldDef(schema, parentType, fieldNode) {
  var name = fieldNode.name.value;
  if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.SchemaMetaFieldDef;
  }
  if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
    return _introspection.TypeMetaFieldDef;
  }
  if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {
    return _introspection.TypeNameMetaFieldDef;
  }
  if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
    return parentType.getFields()[name];
  }
}
},{"../jsutils/find":103,"../language/kinds":121,"../type/definition":131,"../type/introspection":134,"./typeFromAST":158}],139:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertValidName = assertValidName;
exports.isValidNameError = isValidNameError;

var _GraphQLError = require('../error/GraphQLError');

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

/**
 * Upholds the spec rules about naming.
 */
function assertValidName(name) {
  var error = isValidNameError(name);
  if (error) {
    throw error;
  }
  return name;
}

/**
 * Returns an Error if a name is invalid.
 */
function isValidNameError(name, node) {
  !(typeof name === 'string') ? (0, _invariant2.default)(0, 'Expected string') : void 0;
  if (name.length > 1 && name[0] === '_' && name[1] === '_') {
    return new _GraphQLError.GraphQLError('Name "' + name + '" must not begin with "__", which is reserved by ' + 'GraphQL introspection.', node);
  }
  if (!NAME_RX.test(name)) {
    return new _GraphQLError.GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but "' + name + '" does not.', node);
  }
}
},{"../error/GraphQLError":92,"../jsutils/invariant":105}],140:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               *  strict
                                                                                                                                                                                                                                                                               */

exports.astFromValue = astFromValue;

var _iterall = require('iterall');

var _isNullish = require('../jsutils/isNullish');

var _isNullish2 = _interopRequireDefault(_isNullish);

var _isInvalid = require('../jsutils/isInvalid');

var _isInvalid2 = _interopRequireDefault(_isInvalid);

var _objectValues = require('../jsutils/objectValues');

var _objectValues2 = _interopRequireDefault(_objectValues);

var _kinds = require('../language/kinds');

var _definition = require('../type/definition');

var _scalars = require('../type/scalars');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produces a GraphQL Value AST given a JavaScript value.
 *
 * A GraphQL type must be provided, which will be used to interpret different
 * JavaScript values.
 *
 * | JSON Value    | GraphQL Value        |
 * | ------------- | -------------------- |
 * | Object        | Input Object         |
 * | Array         | List                 |
 * | Boolean       | Boolean              |
 * | String        | String / Enum Value  |
 * | Number        | Int / Float          |
 * | Mixed         | Enum Value           |
 * | null          | NullValue            |
 *
 */
function astFromValue(value, type) {
  if ((0, _definition.isNonNullType)(type)) {
    var astValue = astFromValue(value, type.ofType);
    if (astValue && astValue.kind === _kinds.Kind.NULL) {
      return null;
    }
    return astValue;
  }

  // only explicit null, not undefined, NaN
  if (value === null) {
    return { kind: _kinds.Kind.NULL };
  }

  // undefined, NaN
  if ((0, _isInvalid2.default)(value)) {
    return null;
  }

  // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
  // the value is not an array, convert the value using the list's item type.
  if ((0, _definition.isListType)(type)) {
    var itemType = type.ofType;
    if ((0, _iterall.isCollection)(value)) {
      var valuesNodes = [];
      (0, _iterall.forEach)(value, function (item) {
        var itemNode = astFromValue(item, itemType);
        if (itemNode) {
          valuesNodes.push(itemNode);
        }
      });
      return { kind: _kinds.Kind.LIST, values: valuesNodes };
    }
    return astFromValue(value, itemType);
  }

  // Populate the fields of the input object by creating ASTs from each value
  // in the JavaScript object according to the fields in the input type.
  if ((0, _definition.isInputObjectType)(type)) {
    if (value === null || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
      return null;
    }
    var fields = (0, _objectValues2.default)(type.getFields());
    var fieldNodes = [];
    fields.forEach(function (field) {
      var fieldValue = astFromValue(value[field.name], field.type);
      if (fieldValue) {
        fieldNodes.push({
          kind: _kinds.Kind.OBJECT_FIELD,
          name: { kind: _kinds.Kind.NAME, value: field.name },
          value: fieldValue
        });
      }
    });
    return { kind: _kinds.Kind.OBJECT, fields: fieldNodes };
  }

  if ((0, _definition.isScalarType)(type) || (0, _definition.isEnumType)(type)) {
    // Since value is an internally represented value, it must be serialized
    // to an externally represented value before converting into an AST.
    var serialized = type.serialize(value);
    if ((0, _isNullish2.default)(serialized)) {
      return null;
    }

    // Others serialize based on their corresponding JavaScript scalar types.
    if (typeof serialized === 'boolean') {
      return { kind: _kinds.Kind.BOOLEAN, value: serialized };
    }

    // JavaScript numbers can be Int or Float values.
    if (typeof serialized === 'number') {
      var stringNum = String(serialized);
      return integerStringRegExp.test(stringNum) ? { kind: _kinds.Kind.INT, value: stringNum } : { kind: _kinds.Kind.FLOAT, value: stringNum };
    }

    if (typeof serialized === 'string') {
      // Enum types use Enum literals.
      if ((0, _definition.isEnumType)(type)) {
        return { kind: _kinds.Kind.ENUM, value: serialized };
      }

      // ID types can use Int literals.
      if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {
        return { kind: _kinds.Kind.INT, value: serialized };
      }

      return {
        kind: _kinds.Kind.STRING,
        value: serialized
      };
    }

    throw new TypeError('Cannot convert value to AST: ' + String(serialized));
  }

  /* istanbul ignore next */
  throw new Error('Unknown type: ' + type + '.');
}

/**
 * IntValue:
 *   - NegativeSign? 0
 *   - NegativeSign? NonZeroDigit ( Digit+ )?
 */
var integerStringRegExp = /^-?(0|[1-9][0-9]*)$/;
},{"../jsutils/isInvalid":106,"../jsutils/isNullish":107,"../jsutils/objectValues":112,"../language/kinds":121,"../type/definition":131,"../type/scalars":135,"iterall":193}],141:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ASTDefinitionBuilder = undefined;
exports.buildASTSchema = buildASTSchema;
exports.getDescription = getDescription;
exports.buildSchema = buildSchema;

var _keyMap = require('../jsutils/keyMap');

var _keyMap2 = _interopRequireDefault(_keyMap);

var _keyValMap = require('../jsutils/keyValMap');

var _keyValMap2 = _interopRequireDefault(_keyValMap);

var _valueFromAST = require('./valueFromAST');

var _blockStringValue = require('../language/blockStringValue');

var _blockStringValue2 = _interopRequireDefault(_blockStringValue);

var _lexer = require('../language/lexer');

var _parser = require('../language/parser');

var _values = require('../execution/values');

var _kinds = require('../language/kinds');

var _definition = require('../type/definition');

var _directives = require('../type/directives');

var _introspection = require('../type/introspection');

var _scalars = require('../type/scalars');

var _schema = require('../type/schema');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                           *
                                                                                                                                                           * This source code is licensed under the MIT license found in the
                                                                                                                                                           * LICENSE file in the root directory of this source tree.
                                                                                                                                                           *
                                                                                                                                                           *  strict
                                                                                                                                                           */

function buildWrappedType(innerType, inputTypeNode) {
  if (inputTypeNode.kind === _kinds.Kind.LIST_TYPE) {
    return (0, _definition.GraphQLList)(buildWrappedType(innerType, inputTypeNode.type));
  }
  if (inputTypeNode.kind === _kinds.Kind.NON_NULL_TYPE) {
    var wrappedType = buildWrappedType(innerType, inputTypeNode.type);
    return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(wrappedType));
  }
  return innerType;
}

function getNamedTypeNode(typeNode) {
  var namedType = typeNode;
  while (namedType.kind === _kinds.Kind.LIST_TYPE || namedType.kind === _kinds.Kind.NON_NULL_TYPE) {
    namedType = namedType.type;
  }
  return namedType;
}

/**
 * This takes the ast of a schema document produced by the parse function in
 * src/language/parser.js.
 *
 * If no schema definition is provided, then it will look for types named Query
 * and Mutation.
 *
 * Given that AST it constructs a GraphQLSchema. The resulting schema
 * has no resolve methods, so execution will use default resolvers.
 *
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */
function buildASTSchema(ast, options) {
  if (!ast || ast.kind !== _kinds.Kind.DOCUMENT) {
    throw new Error('Must provide a document ast.');
  }

  var schemaDef = void 0;

  var typeDefs = [];
  var nodeMap = Object.create(null);
  var directiveDefs = [];
  for (var i = 0; i < ast.definitions.length; i++) {
    var d = ast.definitions[i];
    switch (d.kind) {
      case _kinds.Kind.SCHEMA_DEFINITION:
        if (schemaDef) {
          throw new Error('Must provide only one schema definition.');
        }
        schemaDef = d;
        break;
      case _kinds.Kind.SCALAR_TYPE_DEFINITION:
      case _kinds.Kind.OBJECT_TYPE_DEFINITION:
      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
      case _kinds.Kind.ENUM_TYPE_DEFINITION:
      case _kinds.Kind.UNION_TYPE_DEFINITION:
      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        var typeName = d.name.value;
        if (nodeMap[typeName]) {
          throw new Error('Type "' + typeName + '" was defined more than once.');
        }
        typeDefs.push(d);
        nodeMap[typeName] = d;
        break;
      case _kinds.Kind.DIRECTIVE_DEFINITION:
        directiveDefs.push(d);
        break;
    }
  }

  var operationTypes = schemaDef ? getOperationTypes(schemaDef) : {
    query: nodeMap.Query,
    mutation: nodeMap.Mutation,
    subscription: nodeMap.Subscription
  };

  var definitionBuilder = new ASTDefinitionBuilder(nodeMap, options, function (typeRef) {
    throw new Error('Type "' + typeRef.name.value + '" not found in document.');
  });

  var types = definitionBuilder.buildTypes(typeDefs);
  var directives = directiveDefs.map(function (def) {
    return definitionBuilder.buildDirective(def);
  });

  // If specified directives were not explicitly declared, add them.
  if (!directives.some(function (directive) {
    return directive.name === 'skip';
  })) {
    directives.push(_directives.GraphQLSkipDirective);
  }

  if (!directives.some(function (directive) {
    return directive.name === 'include';
  })) {
    directives.push(_directives.GraphQLIncludeDirective);
  }

  if (!directives.some(function (directive) {
    return directive.name === 'deprecated';
  })) {
    directives.push(_directives.GraphQLDeprecatedDirective);
  }

  // Note: While this could make early assertions to get the correctly
  // typed values below, that would throw immediately while type system
  // validation with validateSchema() will produce more actionable results.
  return new _schema.GraphQLSchema({
    query: operationTypes.query ? definitionBuilder.buildType(operationTypes.query) : null,
    mutation: operationTypes.mutation ? definitionBuilder.buildType(operationTypes.mutation) : null,
    subscription: operationTypes.subscription ? definitionBuilder.buildType(operationTypes.subscription) : null,
    types: types,
    directives: directives,
    astNode: schemaDef,
    assumeValid: options && options.assumeValid,
    allowedLegacyNames: options && options.allowedLegacyNames
  });

  function getOperationTypes(schema) {
    var opTypes = {};
    schema.operationTypes.forEach(function (operationType) {
      var typeName = operationType.type.name.value;
      var operation = operationType.operation;
      if (opTypes[operation]) {
        throw new Error('Must provide only one ' + operation + ' type in schema.');
      }
      if (!nodeMap[typeName]) {
        throw new Error('Specified ' + operation + ' type "' + typeName + '" not found in document.');
      }
      opTypes[operation] = operationType.type;
    });
    return opTypes;
  }
}

var ASTDefinitionBuilder = exports.ASTDefinitionBuilder = function () {
  function ASTDefinitionBuilder(typeDefinitionsMap, options, resolveType) {
    _classCallCheck(this, ASTDefinitionBuilder);

    this._typeDefinitionsMap = typeDefinitionsMap;
    this._options = options;
    this._resolveType = resolveType;
    // Initialize to the GraphQL built in scalars and introspection types.
    this._cache = (0, _keyMap2.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function (type) {
      return type.name;
    });
  }

  ASTDefinitionBuilder.prototype.buildTypes = function buildTypes(nodes) {
    var _this = this;

    return nodes.map(function (node) {
      return _this.buildType(node);
    });
  };

  ASTDefinitionBuilder.prototype.buildType = function buildType(node) {
    var typeName = node.name.value;
    if (!this._cache[typeName]) {
      if (node.kind === _kinds.Kind.NAMED_TYPE) {
        var defNode = this._typeDefinitionsMap[typeName];
        this._cache[typeName] = defNode ? this._makeSchemaDef(defNode) : this._resolveType(node);
      } else {
        this._cache[typeName] = this._makeSchemaDef(node);
      }
    }
    return this._cache[typeName];
  };

  ASTDefinitionBuilder.prototype._buildWrappedType = function _buildWrappedType(typeNode) {
    var typeDef = this.buildType(getNamedTypeNode(typeNode));
    return buildWrappedType(typeDef, typeNode);
  };

  ASTDefinitionBuilder.prototype.buildDirective = function buildDirective(directiveNode) {
    return new _directives.GraphQLDirective({
      name: directiveNode.name.value,
      description: getDescription(directiveNode, this._options),
      locations: directiveNode.locations.map(function (node) {
        return node.value;
      }),
      args: directiveNode.arguments && this._makeInputValues(directiveNode.arguments),
      astNode: directiveNode
    });
  };

  ASTDefinitionBuilder.prototype.buildField = function buildField(field) {
    return {
      // Note: While this could make assertions to get the correctly typed
      // value, that would throw immediately while type system validation
      // with validateSchema() will produce more actionable results.
      type: this._buildWrappedType(field.type),
      description: getDescription(field, this._options),
      args: field.arguments && this._makeInputValues(field.arguments),
      deprecationReason: getDeprecationReason(field),
      astNode: field
    };
  };

  ASTDefinitionBuilder.prototype._makeSchemaDef = function _makeSchemaDef(def) {
    switch (def.kind) {
      case _kinds.Kind.OBJECT_TYPE_DEFINITION:
        return this._makeTypeDef(def);
      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
        return this._makeInterfaceDef(def);
      case _kinds.Kind.ENUM_TYPE_DEFINITION:
        return this._makeEnumDef(def);
      case _kinds.Kind.UNION_TYPE_DEFINITION:
        return this._makeUnionDef(def);
      case _kinds.Kind.SCALAR_TYPE_DEFINITION:
        return this._makeScalarDef(def);
      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        return this._makeInputObjectDef(def);
      default:
        throw new Error('Type kind "' + def.kind + '" not supported.');
    }
  };

  ASTDefinitionBuilder.prototype._makeTypeDef = function _makeTypeDef(def) {
    var _this2 = this;

    var typeName = def.name.value;
    var interfaces = def.interfaces;
    return new _definition.GraphQLObjectType({
      name: typeName,
      description: getDescription(def, this._options),
      fields: function fields() {
        return _this2._makeFieldDefMap(def);
      },
      // Note: While this could make early assertions to get the correctly
      // typed values, that would throw immediately while type system
      // validation with validateSchema() will produce more actionable results.
      interfaces: interfaces ? function () {
        return _this2.buildTypes(interfaces);
      } : [],
      astNode: def
    });
  };

  ASTDefinitionBuilder.prototype._makeFieldDefMap = function _makeFieldDefMap(def) {
    var _this3 = this;

    return def.fields ? (0, _keyValMap2.default)(def.fields, function (field) {
      return field.name.value;
    }, function (field) {
      return _this3.buildField(field);
    }) : {};
  };

  ASTDefinitionBuilder.prototype._makeInputValues = function _makeInputValues(values) {
    var _this4 = this;

    return (0, _keyValMap2.default)(values, function (value) {
      return value.name.value;
    }, function (value) {
      // Note: While this could make assertions to get the correctly typed
      // value, that would throw immediately while type system validation
      var type = _this4._buildWrappedType(value.type);
      return {
        type: type,
        description: getDescription(value, _this4._options),
        defaultValue: (0, _valueFromAST.valueFromAST)(value.defaultValue, type),
        astNode: value
      };
    });
  };

  ASTDefinitionBuilder.prototype._makeInterfaceDef = function _makeInterfaceDef(def) {
    var _this5 = this;

    return new _definition.GraphQLInterfaceType({
      name: def.name.value,
      description: getDescription(def, this._options),
      fields: function fields() {
        return _this5._makeFieldDefMap(def);
      },
      astNode: def
    });
  };

  ASTDefinitionBuilder.prototype._makeEnumDef = function _makeEnumDef(def) {
    var _this6 = this;

    return new _definition.GraphQLEnumType({
      name: def.name.value,
      description: getDescription(def, this._options),
      values: def.values ? (0, _keyValMap2.default)(def.values, function (enumValue) {
        return enumValue.name.value;
      }, function (enumValue) {
        return {
          description: getDescription(enumValue, _this6._options),
          deprecationReason: getDeprecationReason(enumValue),
          astNode: enumValue
        };
      }) : {},
      astNode: def
    });
  };

  ASTDefinitionBuilder.prototype._makeUnionDef = function _makeUnionDef(def) {
    return new _definition.GraphQLUnionType({
      name: def.name.value,
      description: getDescription(def, this._options),
      // Note: While this could make assertions to get the correctly typed
      // values below, that would throw immediately while type system
      // validation with validateSchema() will produce more actionable results.
      types: def.types ? this.buildTypes(def.types) : [],
      astNode: def
    });
  };

  ASTDefinitionBuilder.prototype._makeScalarDef = function _makeScalarDef(def) {
    return new _definition.GraphQLScalarType({
      name: def.name.value,
      description: getDescription(def, this._options),
      astNode: def,
      serialize: function serialize(value) {
        return value;
      }
    });
  };

  ASTDefinitionBuilder.prototype._makeInputObjectDef = function _makeInputObjectDef(def) {
    var _this7 = this;

    return new _definition.GraphQLInputObjectType({
      name: def.name.value,
      description: getDescription(def, this._options),
      fields: function fields() {
        return def.fields ? _this7._makeInputValues(def.fields) : {};
      },
      astNode: def
    });
  };

  return ASTDefinitionBuilder;
}();

/**
 * Given a field or enum value node, returns the string value for the
 * deprecation reason.
 */


function getDeprecationReason(node) {
  var deprecated = (0, _values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective, node);
  return deprecated && deprecated.reason;
}

/**
 * Given an ast node, returns its string description.
 *
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */
function getDescription(node, options) {
  if (node.description) {
    return node.description.value;
  }
  if (options && options.commentDescriptions) {
    var rawValue = getLeadingCommentBlock(node);
    if (rawValue !== undefined) {
      return (0, _blockStringValue2.default)('\n' + rawValue);
    }
  }
}

function getLeadingCommentBlock(node) {
  var loc = node.loc;
  if (!loc) {
    return;
  }
  var comments = [];
  var token = loc.startToken.prev;
  while (token && token.kind === _lexer.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {
    var value = String(token.value);
    comments.push(value);
    token = token.prev;
  }
  return comments.reverse().join('\n');
}

/**
 * A helper function to build a GraphQLSchema directly from a source
 * document.
 */
function buildSchema(source, options) {
  return buildASTSchema((0, _parser.parse)(source, options), options);
}
},{"../execution/values":100,"../jsutils/keyMap":109,"../jsutils/keyValMap":110,"../language/blockStringValue":118,"../language/kinds":121,"../language/lexer":122,"../language/parser":124,"../type/definition":131,"../type/directives":132,"../type/introspection":134,"../type/scalars":135,"../type/schema":136,"./valueFromAST":159}],142:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildClientSchema = buildClientSchema;

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _keyMap = require('../jsutils/keyMap');

var _keyMap2 = _interopRequireDefault(_keyMap);

var _keyValMap = require('../jsutils/keyValMap');

var _keyValMap2 = _interopRequireDefault(_keyValMap);

var _valueFromAST = require('./valueFromAST');

var _parser = require('../language/parser');

var _schema = require('../type/schema');

var _directiveLocation = require('../language/directiveLocation');

var _definition = require('../type/definition');

var _directives = require('../type/directives');

var _introspection = require('../type/introspection');

var _scalars = require('../type/scalars');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Build a GraphQLSchema for use by client tools.
 *
 * Given the result of a client running the introspection query, creates and
 * returns a GraphQLSchema instance which can be then used with all graphql-js
 * tools, but cannot be used to execute a query, as introspection does not
 * represent the "resolver", "parse" or "serialize" functions or any other
 * server-internal mechanisms.
 *
 * This function expects a complete introspection result. Don't forget to check
 * the "errors" field of a server response before calling this function.
 */
function buildClientSchema(introspection, options) {
  // Get the schema from the introspection result.
  var schemaIntrospection = introspection.__schema;

  // Converts the list of types into a keyMap based on the type names.
  var typeIntrospectionMap = (0, _keyMap2.default)(schemaIntrospection.types, function (type) {
    return type.name;
  });

  // A cache to use to store the actual GraphQLType definition objects by name.
  // Initialize to the GraphQL built in scalars. All functions below are inline
  // so that this type def cache is within the scope of the closure.
  var typeDefCache = (0, _keyMap2.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function (type) {
    return type.name;
  });

  // Given a type reference in introspection, return the GraphQLType instance.
  // preferring cached instances before building new instances.
  function getType(typeRef) {
    if (typeRef.kind === _introspection.TypeKind.LIST) {
      var itemRef = typeRef.ofType;
      if (!itemRef) {
        throw new Error('Decorated type deeper than introspection query.');
      }
      return (0, _definition.GraphQLList)(getType(itemRef));
    }
    if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
      var nullableRef = typeRef.ofType;
      if (!nullableRef) {
        throw new Error('Decorated type deeper than introspection query.');
      }
      var nullableType = getType(nullableRef);
      return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(nullableType));
    }
    if (!typeRef.name) {
      throw new Error('Unknown type reference: ' + JSON.stringify(typeRef));
    }
    return getNamedType(typeRef.name);
  }

  function getNamedType(typeName) {
    if (typeDefCache[typeName]) {
      return typeDefCache[typeName];
    }
    var typeIntrospection = typeIntrospectionMap[typeName];
    if (!typeIntrospection) {
      throw new Error('Invalid or incomplete schema, unknown type: ' + typeName + '. Ensure ' + 'that a full introspection query is used in order to build a ' + 'client schema.');
    }
    var typeDef = buildType(typeIntrospection);
    typeDefCache[typeName] = typeDef;
    return typeDef;
  }

  function getInputType(typeRef) {
    var type = getType(typeRef);
    !(0, _definition.isInputType)(type) ? (0, _invariant2.default)(0, 'Introspection must provide input type for arguments.') : void 0;
    return type;
  }

  function getOutputType(typeRef) {
    var type = getType(typeRef);
    !(0, _definition.isOutputType)(type) ? (0, _invariant2.default)(0, 'Introspection must provide output type for fields.') : void 0;
    return type;
  }

  function getObjectType(typeRef) {
    var type = getType(typeRef);
    return (0, _definition.assertObjectType)(type);
  }

  function getInterfaceType(typeRef) {
    var type = getType(typeRef);
    return (0, _definition.assertInterfaceType)(type);
  }

  // Given a type's introspection result, construct the correct
  // GraphQLType instance.
  function buildType(type) {
    if (type && type.name && type.kind) {
      switch (type.kind) {
        case _introspection.TypeKind.SCALAR:
          return buildScalarDef(type);
        case _introspection.TypeKind.OBJECT:
          return buildObjectDef(type);
        case _introspection.TypeKind.INTERFACE:
          return buildInterfaceDef(type);
        case _introspection.TypeKind.UNION:
          return buildUnionDef(type);
        case _introspection.TypeKind.ENUM:
          return buildEnumDef(type);
        case _introspection.TypeKind.INPUT_OBJECT:
          return buildInputObjectDef(type);
      }
    }
    throw new Error('Invalid or incomplete introspection result. Ensure that a full ' + 'introspection query is used in order to build a client schema:' + JSON.stringify(type));
  }

  function buildScalarDef(scalarIntrospection) {
    return new _definition.GraphQLScalarType({
      name: scalarIntrospection.name,
      description: scalarIntrospection.description,
      serialize: function serialize(value) {
        return value;
      }
    });
  }

  function buildObjectDef(objectIntrospection) {
    if (!objectIntrospection.interfaces) {
      throw new Error('Introspection result missing interfaces: ' + JSON.stringify(objectIntrospection));
    }
    return new _definition.GraphQLObjectType({
      name: objectIntrospection.name,
      description: objectIntrospection.description,
      interfaces: objectIntrospection.interfaces.map(getInterfaceType),
      fields: function fields() {
        return buildFieldDefMap(objectIntrospection);
      }
    });
  }

  function buildInterfaceDef(interfaceIntrospection) {
    return new _definition.GraphQLInterfaceType({
      name: interfaceIntrospection.name,
      description: interfaceIntrospection.description,
      fields: function fields() {
        return buildFieldDefMap(interfaceIntrospection);
      }
    });
  }

  function buildUnionDef(unionIntrospection) {
    if (!unionIntrospection.possibleTypes) {
      throw new Error('Introspection result missing possibleTypes: ' + JSON.stringify(unionIntrospection));
    }
    return new _definition.GraphQLUnionType({
      name: unionIntrospection.name,
      description: unionIntrospection.description,
      types: unionIntrospection.possibleTypes.map(getObjectType)
    });
  }

  function buildEnumDef(enumIntrospection) {
    if (!enumIntrospection.enumValues) {
      throw new Error('Introspection result missing enumValues: ' + JSON.stringify(enumIntrospection));
    }
    return new _definition.GraphQLEnumType({
      name: enumIntrospection.name,
      description: enumIntrospection.description,
      values: (0, _keyValMap2.default)(enumIntrospection.enumValues, function (valueIntrospection) {
        return valueIntrospection.name;
      }, function (valueIntrospection) {
        return {
          description: valueIntrospection.description,
          deprecationReason: valueIntrospection.deprecationReason
        };
      })
    });
  }

  function buildInputObjectDef(inputObjectIntrospection) {
    if (!inputObjectIntrospection.inputFields) {
      throw new Error('Introspection result missing inputFields: ' + JSON.stringify(inputObjectIntrospection));
    }
    return new _definition.GraphQLInputObjectType({
      name: inputObjectIntrospection.name,
      description: inputObjectIntrospection.description,
      fields: function fields() {
        return buildInputValueDefMap(inputObjectIntrospection.inputFields);
      }
    });
  }

  function buildFieldDefMap(typeIntrospection) {
    if (!typeIntrospection.fields) {
      throw new Error('Introspection result missing fields: ' + JSON.stringify(typeIntrospection));
    }
    return (0, _keyValMap2.default)(typeIntrospection.fields, function (fieldIntrospection) {
      return fieldIntrospection.name;
    }, function (fieldIntrospection) {
      if (!fieldIntrospection.args) {
        throw new Error('Introspection result missing field args: ' + JSON.stringify(fieldIntrospection));
      }
      return {
        description: fieldIntrospection.description,
        deprecationReason: fieldIntrospection.deprecationReason,
        type: getOutputType(fieldIntrospection.type),
        args: buildInputValueDefMap(fieldIntrospection.args)
      };
    });
  }

  function buildInputValueDefMap(inputValueIntrospections) {
    return (0, _keyValMap2.default)(inputValueIntrospections, function (inputValue) {
      return inputValue.name;
    }, buildInputValue);
  }

  function buildInputValue(inputValueIntrospection) {
    var type = getInputType(inputValueIntrospection.type);
    var defaultValue = inputValueIntrospection.defaultValue ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;
    return {
      name: inputValueIntrospection.name,
      description: inputValueIntrospection.description,
      type: type,
      defaultValue: defaultValue
    };
  }

  function buildDirective(directiveIntrospection) {
    // Support deprecated `on****` fields for building `locations`, as this
    // is used by GraphiQL which may need to support outdated servers.
    var locations = directiveIntrospection.locations ? directiveIntrospection.locations.slice() : [].concat(!directiveIntrospection.onField ? [] : [_directiveLocation.DirectiveLocation.FIELD], !directiveIntrospection.onOperation ? [] : [_directiveLocation.DirectiveLocation.QUERY, _directiveLocation.DirectiveLocation.MUTATION, _directiveLocation.DirectiveLocation.SUBSCRIPTION], !directiveIntrospection.onFragment ? [] : [_directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION, _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD, _directiveLocation.DirectiveLocation.INLINE_FRAGMENT]);
    if (!directiveIntrospection.args) {
      throw new Error('Introspection result missing directive args: ' + JSON.stringify(directiveIntrospection));
    }
    return new _directives.GraphQLDirective({
      name: directiveIntrospection.name,
      description: directiveIntrospection.description,
      locations: locations,
      args: buildInputValueDefMap(directiveIntrospection.args)
    });
  }

  // Iterate through all types, getting the type definition for each, ensuring
  // that any type not directly referenced by a field will get created.
  var types = schemaIntrospection.types.map(function (typeIntrospection) {
    return getNamedType(typeIntrospection.name);
  });

  // Get the root Query, Mutation, and Subscription types.
  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;

  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;

  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null;

  // Get the directives supported by Introspection, assuming empty-set if
  // directives were not queried for.
  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];

  // Then produce and return a Schema with these types.
  return new _schema.GraphQLSchema({
    query: queryType,
    mutation: mutationType,
    subscription: subscriptionType,
    types: types,
    directives: directives,
    assumeValid: options && options.assumeValid,
    allowedLegacyNames: options && options.allowedLegacyNames
  });
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{"../jsutils/invariant":105,"../jsutils/keyMap":109,"../jsutils/keyValMap":110,"../language/directiveLocation":119,"../language/parser":124,"../type/definition":131,"../type/directives":132,"../type/introspection":134,"../type/scalars":135,"../type/schema":136,"./valueFromAST":159}],143:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               *  strict
                                                                                                                                                                                                                                                                               */

exports.coerceValue = coerceValue;

var _iterall = require('iterall');

var _isInvalid = require('../jsutils/isInvalid');

var _isInvalid2 = _interopRequireDefault(_isInvalid);

var _isNullish = require('../jsutils/isNullish');

var _isNullish2 = _interopRequireDefault(_isNullish);

var _orList = require('../jsutils/orList');

var _orList2 = _interopRequireDefault(_orList);

var _suggestionList = require('../jsutils/suggestionList');

var _suggestionList2 = _interopRequireDefault(_suggestionList);

var _error = require('../error');

var _definition = require('../type/definition');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Coerces a JavaScript value given a GraphQL Type.
 *
 * Returns either a value which is valid for the provided type or a list of
 * encountered coercion errors.
 *
 */
function coerceValue(value, type, blameNode, path) {
  // A value must be provided if the type is non-null.
  if ((0, _definition.isNonNullType)(type)) {
    if ((0, _isNullish2.default)(value)) {
      return ofErrors([coercionError('Expected non-nullable type ' + String(type) + ' not to be null', blameNode, path)]);
    }
    return coerceValue(value, type.ofType, blameNode, path);
  }

  if ((0, _isNullish2.default)(value)) {
    // Explicitly return the value null.
    return ofValue(null);
  }

  if ((0, _definition.isScalarType)(type)) {
    // Scalars determine if a value is valid via parseValue(), which can
    // throw to indicate failure. If it throws, maintain a reference to
    // the original error.
    try {
      var parseResult = type.parseValue(value);
      if ((0, _isInvalid2.default)(parseResult)) {
        return ofErrors([coercionError('Expected type ' + type.name, blameNode, path)]);
      }
      return ofValue(parseResult);
    } catch (error) {
      return ofErrors([coercionError('Expected type ' + type.name, blameNode, path, error.message, error)]);
    }
  }

  if ((0, _definition.isEnumType)(type)) {
    if (typeof value === 'string') {
      var enumValue = type.getValue(value);
      if (enumValue) {
        return ofValue(enumValue.value);
      }
    }
    var suggestions = (0, _suggestionList2.default)(String(value), type.getValues().map(function (enumValue) {
      return enumValue.name;
    }));
    var didYouMean = suggestions.length !== 0 ? 'did you mean ' + (0, _orList2.default)(suggestions) + '?' : undefined;
    return ofErrors([coercionError('Expected type ' + type.name, blameNode, path, didYouMean)]);
  }

  if ((0, _definition.isListType)(type)) {
    var itemType = type.ofType;
    if ((0, _iterall.isCollection)(value)) {
      var _errors = void 0;
      var coercedValue = [];
      (0, _iterall.forEach)(value, function (itemValue, index) {
        var coercedItem = coerceValue(itemValue, itemType, blameNode, atPath(path, index));
        if (coercedItem.errors) {
          _errors = add(_errors, coercedItem.errors);
        } else if (!_errors) {
          coercedValue.push(coercedItem.value);
        }
      });
      return _errors ? ofErrors(_errors) : ofValue(coercedValue);
    }
    // Lists accept a non-list value as a list of one.
    var coercedItem = coerceValue(value, itemType, blameNode);
    return coercedItem.errors ? coercedItem : ofValue([coercedItem.value]);
  }

  if ((0, _definition.isInputObjectType)(type)) {
    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
      return ofErrors([coercionError('Expected type ' + type.name + ' to be an object', blameNode, path)]);
    }
    var _errors2 = void 0;
    var _coercedValue = {};
    var fields = type.getFields();

    // Ensure every defined field is valid.
    for (var fieldName in fields) {
      if (hasOwnProperty.call(fields, fieldName)) {
        var field = fields[fieldName];
        var fieldValue = value[fieldName];
        if ((0, _isInvalid2.default)(fieldValue)) {
          if (!(0, _isInvalid2.default)(field.defaultValue)) {
            _coercedValue[fieldName] = field.defaultValue;
          } else if ((0, _definition.isNonNullType)(field.type)) {
            _errors2 = add(_errors2, coercionError('Field ' + printPath(atPath(path, fieldName)) + ' of required ' + ('type ' + String(field.type) + ' was not provided'), blameNode));
          }
        } else {
          var coercedField = coerceValue(fieldValue, field.type, blameNode, atPath(path, fieldName));
          if (coercedField.errors) {
            _errors2 = add(_errors2, coercedField.errors);
          } else if (!_errors2) {
            _coercedValue[fieldName] = coercedField.value;
          }
        }
      }
    }

    // Ensure every provided field is defined.
    for (var _fieldName in value) {
      if (hasOwnProperty.call(value, _fieldName)) {
        if (!fields[_fieldName]) {
          var _suggestions = (0, _suggestionList2.default)(_fieldName, Object.keys(fields));
          var _didYouMean = _suggestions.length !== 0 ? 'did you mean ' + (0, _orList2.default)(_suggestions) + '?' : undefined;
          _errors2 = add(_errors2, coercionError('Field "' + _fieldName + '" is not defined by type ' + type.name, blameNode, path, _didYouMean));
        }
      }
    }

    return _errors2 ? ofErrors(_errors2) : ofValue(_coercedValue);
  }

  /* istanbul ignore next */
  throw new Error('Unexpected type: ' + type + '.');
}

function ofValue(value) {
  return { errors: undefined, value: value };
}

function ofErrors(errors) {
  return { errors: errors, value: undefined };
}

function add(errors, moreErrors) {
  return (errors || []).concat(moreErrors);
}

function atPath(prev, key) {
  return { prev: prev, key: key };
}

function coercionError(message, blameNode, path, subMessage, originalError) {
  var pathStr = printPath(path);
  // Return a GraphQLError instance
  return new _error.GraphQLError(message + (pathStr ? ' at ' + pathStr : '') + (subMessage ? '; ' + subMessage : '.'), blameNode, undefined, undefined, undefined, originalError);
}

// Build a string describing the path into the value where the error was found
function printPath(path) {
  var pathStr = '';
  var currentPath = path;
  while (currentPath) {
    pathStr = (typeof currentPath.key === 'string' ? '.' + currentPath.key : '[' + String(currentPath.key) + ']') + pathStr;
    currentPath = currentPath.prev;
  }
  return pathStr ? 'value' + pathStr : '';
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
},{"../error":94,"../jsutils/isInvalid":106,"../jsutils/isNullish":107,"../jsutils/orList":113,"../jsutils/suggestionList":117,"../type/definition":131,"iterall":193}],144:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatAST = concatAST;


/**
 * Provided a collection of ASTs, presumably each from different files,
 * concatenate the ASTs together into batched AST, useful for validating many
 * GraphQL source files which together represent one conceptual application.
 */
function concatAST(asts) {
  var batchDefinitions = [];
  for (var i = 0; i < asts.length; i++) {
    var definitions = asts[i].definitions;
    for (var j = 0; j < definitions.length; j++) {
      batchDefinitions.push(definitions[j]);
    }
  }
  return {
    kind: 'Document',
    definitions: batchDefinitions
  };
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{}],145:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extendSchema = extendSchema;

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _keyMap = require('../jsutils/keyMap');

var _keyMap2 = _interopRequireDefault(_keyMap);

var _objectValues = require('../jsutils/objectValues');

var _objectValues2 = _interopRequireDefault(_objectValues);

var _buildASTSchema = require('./buildASTSchema');

var _GraphQLError = require('../error/GraphQLError');

var _schema = require('../type/schema');

var _introspection = require('../type/introspection');

var _definition = require('../type/definition');

var _directives = require('../type/directives');

var _kinds = require('../language/kinds');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produces a new schema given an existing schema and a document which may
 * contain GraphQL type extensions and definitions. The original schema will
 * remain unaltered.
 *
 * Because a schema represents a graph of references, a schema cannot be
 * extended without effectively making an entire copy. We do not know until it's
 * too late if subgraphs remain unchanged.
 *
 * This algorithm copies the provided schema, applying extensions while
 * producing the copy. The original schema remains unaltered.
 *
 * Accepts options as a third argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function extendSchema(schema, documentAST, options) {
  !(0, _schema.isSchema)(schema) ? (0, _invariant2.default)(0, 'Must provide valid GraphQLSchema') : void 0;

  !(documentAST && documentAST.kind === _kinds.Kind.DOCUMENT) ? (0, _invariant2.default)(0, 'Must provide valid Document AST') : void 0;

  // Collect the type definitions and extensions found in the document.
  var typeDefinitionMap = Object.create(null);
  var typeExtensionsMap = Object.create(null);

  // New directives and types are separate because a directives and types can
  // have the same name. For example, a type named "skip".
  var directiveDefinitions = [];

  for (var i = 0; i < documentAST.definitions.length; i++) {
    var def = documentAST.definitions[i];
    switch (def.kind) {
      case _kinds.Kind.OBJECT_TYPE_DEFINITION:
      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
      case _kinds.Kind.ENUM_TYPE_DEFINITION:
      case _kinds.Kind.UNION_TYPE_DEFINITION:
      case _kinds.Kind.SCALAR_TYPE_DEFINITION:
      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        // Sanity check that none of the defined types conflict with the
        // schema's existing types.
        var typeName = def.name.value;
        if (schema.getType(typeName)) {
          throw new _GraphQLError.GraphQLError('Type "' + typeName + '" already exists in the schema. It cannot also ' + 'be defined in this type definition.', [def]);
        }
        typeDefinitionMap[typeName] = def;
        break;
      case _kinds.Kind.OBJECT_TYPE_EXTENSION:
      case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
        // Sanity check that this type extension exists within the
        // schema's existing types.
        var extendedTypeName = def.name.value;
        var existingType = schema.getType(extendedTypeName);
        if (!existingType) {
          throw new _GraphQLError.GraphQLError('Cannot extend type "' + extendedTypeName + '" because it does not ' + 'exist in the existing schema.', [def]);
        }
        checkExtensionNode(existingType, def);

        var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
        typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
        break;
      case _kinds.Kind.DIRECTIVE_DEFINITION:
        var directiveName = def.name.value;
        var existingDirective = schema.getDirective(directiveName);
        if (existingDirective) {
          throw new _GraphQLError.GraphQLError('Directive "' + directiveName + '" already exists in the schema. It ' + 'cannot be redefined.', [def]);
        }
        directiveDefinitions.push(def);
        break;
      case _kinds.Kind.SCALAR_TYPE_EXTENSION:
      case _kinds.Kind.UNION_TYPE_EXTENSION:
      case _kinds.Kind.ENUM_TYPE_EXTENSION:
      case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
        throw new Error('The ' + def.kind + ' kind is not yet supported by extendSchema().');
    }
  }

  // If this document contains no new types, extensions, or directives then
  // return the same unmodified GraphQLSchema instance.
  if (Object.keys(typeExtensionsMap).length === 0 && Object.keys(typeDefinitionMap).length === 0 && directiveDefinitions.length === 0) {
    return schema;
  }

  var astBuilder = new _buildASTSchema.ASTDefinitionBuilder(typeDefinitionMap, options, function (typeRef) {
    var typeName = typeRef.name.value;
    var existingType = schema.getType(typeName);
    if (existingType) {
      return getExtendedType(existingType);
    }

    throw new _GraphQLError.GraphQLError('Unknown type: "' + typeName + '". Ensure that this type exists ' + 'either in the original schema, or is added in a type definition.', [typeRef]);
  });

  var extendTypeCache = Object.create(null);

  // Get the root Query, Mutation, and Subscription object types.
  var existingQueryType = schema.getQueryType();
  var queryType = existingQueryType ? getExtendedType(existingQueryType) : null;

  var existingMutationType = schema.getMutationType();
  var mutationType = existingMutationType ? getExtendedType(existingMutationType) : null;

  var existingSubscriptionType = schema.getSubscriptionType();
  var subscriptionType = existingSubscriptionType ? getExtendedType(existingSubscriptionType) : null;

  var types = [].concat((0, _objectValues2.default)(schema.getTypeMap()).map(function (type) {
    return getExtendedType(type);
  }), astBuilder.buildTypes((0, _objectValues2.default)(typeDefinitionMap)));

  // Support both original legacy names and extended legacy names.
  var schemaAllowedLegacyNames = schema.__allowedLegacyNames;
  var extendAllowedLegacyNames = options && options.allowedLegacyNames;
  var allowedLegacyNames = schemaAllowedLegacyNames && extendAllowedLegacyNames ? schemaAllowedLegacyNames.concat(extendAllowedLegacyNames) : schemaAllowedLegacyNames || extendAllowedLegacyNames;

  // Then produce and return a Schema with these types.
  return new _schema.GraphQLSchema({
    query: queryType,
    mutation: mutationType,
    subscription: subscriptionType,
    types: types,
    directives: getMergedDirectives(),
    astNode: schema.astNode,
    allowedLegacyNames: allowedLegacyNames
  });

  // Below are functions used for producing this schema that have closed over
  // this scope and have access to the schema, cache, and newly defined types.

  function getMergedDirectives() {
    var existingDirectives = schema.getDirectives();
    !existingDirectives ? (0, _invariant2.default)(0, 'schema must have default directives') : void 0;

    return existingDirectives.concat(directiveDefinitions.map(function (node) {
      return astBuilder.buildDirective(node);
    }));
  }

  function getExtendedType(type) {
    if (!extendTypeCache[type.name]) {
      extendTypeCache[type.name] = extendType(type);
    }
    return extendTypeCache[type.name];
  }

  // To be called at most once per type. Only getExtendedType should call this.
  function extendType(type) {
    if ((0, _introspection.isIntrospectionType)(type)) {
      // Introspection types are not extended.
      return type;
    }
    if ((0, _definition.isObjectType)(type)) {
      return extendObjectType(type);
    }
    if ((0, _definition.isInterfaceType)(type)) {
      return extendInterfaceType(type);
    }
    if ((0, _definition.isUnionType)(type)) {
      return extendUnionType(type);
    }
    // This type is not yet extendable.
    return type;
  }

  function extendObjectType(type) {
    var name = type.name;
    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;
    return new _definition.GraphQLObjectType({
      name: name,
      description: type.description,
      interfaces: function interfaces() {
        return extendImplementedInterfaces(type);
      },
      fields: function fields() {
        return extendFieldMap(type);
      },
      astNode: type.astNode,
      extensionASTNodes: extensionASTNodes,
      isTypeOf: type.isTypeOf
    });
  }

  function extendInterfaceType(type) {
    var name = type.name;
    var extensionASTNodes = typeExtensionsMap[name] ? type.extensionASTNodes ? type.extensionASTNodes.concat(typeExtensionsMap[name]) : typeExtensionsMap[name] : type.extensionASTNodes;
    return new _definition.GraphQLInterfaceType({
      name: type.name,
      description: type.description,
      fields: function fields() {
        return extendFieldMap(type);
      },
      astNode: type.astNode,
      extensionASTNodes: extensionASTNodes,
      resolveType: type.resolveType
    });
  }

  function extendUnionType(type) {
    return new _definition.GraphQLUnionType({
      name: type.name,
      description: type.description,
      types: type.getTypes().map(getExtendedType),
      astNode: type.astNode,
      resolveType: type.resolveType
    });
  }

  function extendImplementedInterfaces(type) {
    var interfaces = type.getInterfaces().map(getExtendedType);

    // If there are any extensions to the interfaces, apply those here.
    var extensions = typeExtensionsMap[type.name];
    if (extensions) {
      extensions.forEach(function (extension) {
        extension.interfaces.forEach(function (namedType) {
          // Note: While this could make early assertions to get the correctly
          // typed values, that would throw immediately while type system
          // validation with validateSchema() will produce more actionable results.
          interfaces.push(astBuilder.buildType(namedType));
        });
      });
    }

    return interfaces;
  }

  function extendFieldMap(type) {
    var newFieldMap = Object.create(null);
    var oldFieldMap = type.getFields();
    Object.keys(oldFieldMap).forEach(function (fieldName) {
      var field = oldFieldMap[fieldName];
      newFieldMap[fieldName] = {
        description: field.description,
        deprecationReason: field.deprecationReason,
        type: extendFieldType(field.type),
        args: (0, _keyMap2.default)(field.args, function (arg) {
          return arg.name;
        }),
        astNode: field.astNode,
        resolve: field.resolve
      };
    });

    // If there are any extensions to the fields, apply those here.
    var extensions = typeExtensionsMap[type.name];
    if (extensions) {
      extensions.forEach(function (extension) {
        extension.fields.forEach(function (field) {
          var fieldName = field.name.value;
          if (oldFieldMap[fieldName]) {
            throw new _GraphQLError.GraphQLError('Field "' + type.name + '.' + fieldName + '" already exists in the ' + 'schema. It cannot also be defined in this type extension.', [field]);
          }
          newFieldMap[fieldName] = astBuilder.buildField(field);
        });
      });
    }

    return newFieldMap;
  }

  function extendFieldType(typeDef) {
    if ((0, _definition.isListType)(typeDef)) {
      return (0, _definition.GraphQLList)(extendFieldType(typeDef.ofType));
    }
    if ((0, _definition.isNonNullType)(typeDef)) {
      return (0, _definition.GraphQLNonNull)(extendFieldType(typeDef.ofType));
    }
    return getExtendedType(typeDef);
  }
}

function checkExtensionNode(type, node) {
  switch (node.kind) {
    case _kinds.Kind.OBJECT_TYPE_EXTENSION:
      if (!(0, _definition.isObjectType)(type)) {
        throw new _GraphQLError.GraphQLError('Cannot extend non-object type "' + type.name + '".', [node]);
      }
      break;
    case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
      if (!(0, _definition.isInterfaceType)(type)) {
        throw new _GraphQLError.GraphQLError('Cannot extend non-interface type "' + type.name + '".', [node]);
      }
      break;
  }
}
},{"../error/GraphQLError":92,"../jsutils/invariant":105,"../jsutils/keyMap":109,"../jsutils/objectValues":112,"../language/kinds":121,"../type/definition":131,"../type/directives":132,"../type/introspection":134,"../type/schema":136,"./buildASTSchema":141}],146:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DangerousChangeType = exports.BreakingChangeType = undefined;
exports.findBreakingChanges = findBreakingChanges;
exports.findDangerousChanges = findDangerousChanges;
exports.findRemovedTypes = findRemovedTypes;
exports.findTypesThatChangedKind = findTypesThatChangedKind;
exports.findArgChanges = findArgChanges;
exports.findFieldsThatChangedTypeOnObjectOrInterfaceTypes = findFieldsThatChangedTypeOnObjectOrInterfaceTypes;
exports.findFieldsThatChangedTypeOnInputObjectTypes = findFieldsThatChangedTypeOnInputObjectTypes;
exports.findTypesRemovedFromUnions = findTypesRemovedFromUnions;
exports.findTypesAddedToUnions = findTypesAddedToUnions;
exports.findValuesRemovedFromEnums = findValuesRemovedFromEnums;
exports.findValuesAddedToEnums = findValuesAddedToEnums;
exports.findInterfacesRemovedFromObjectTypes = findInterfacesRemovedFromObjectTypes;
exports.findInterfacesAddedToObjectTypes = findInterfacesAddedToObjectTypes;
exports.findRemovedDirectives = findRemovedDirectives;
exports.findRemovedDirectiveArgs = findRemovedDirectiveArgs;
exports.findAddedNonNullDirectiveArgs = findAddedNonNullDirectiveArgs;
exports.findRemovedLocationsForDirective = findRemovedLocationsForDirective;
exports.findRemovedDirectiveLocations = findRemovedDirectiveLocations;

var _definition = require('../type/definition');

var _directives = require('../type/directives');

var _schema = require('../type/schema');

var _keyMap = require('../jsutils/keyMap');

var _keyMap2 = _interopRequireDefault(_keyMap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

var BreakingChangeType = exports.BreakingChangeType = {
  FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',
  FIELD_REMOVED: 'FIELD_REMOVED',
  TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',
  TYPE_REMOVED: 'TYPE_REMOVED',
  TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',
  VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',
  ARG_REMOVED: 'ARG_REMOVED',
  ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',
  NON_NULL_ARG_ADDED: 'NON_NULL_ARG_ADDED',
  NON_NULL_INPUT_FIELD_ADDED: 'NON_NULL_INPUT_FIELD_ADDED',
  INTERFACE_REMOVED_FROM_OBJECT: 'INTERFACE_REMOVED_FROM_OBJECT',
  DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',
  DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',
  DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED',
  NON_NULL_DIRECTIVE_ARG_ADDED: 'NON_NULL_DIRECTIVE_ARG_ADDED'
};

var DangerousChangeType = exports.DangerousChangeType = {
  ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE',
  VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',
  INTERFACE_ADDED_TO_OBJECT: 'INTERFACE_ADDED_TO_OBJECT',
  TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',
  NULLABLE_INPUT_FIELD_ADDED: 'NULLABLE_INPUT_FIELD_ADDED',
  NULLABLE_ARG_ADDED: 'NULLABLE_ARG_ADDED'
};

/**
 * Given two schemas, returns an Array containing descriptions of all the types
 * of breaking changes covered by the other functions down below.
 */
function findBreakingChanges(oldSchema, newSchema) {
  return [].concat(findRemovedTypes(oldSchema, newSchema), findTypesThatChangedKind(oldSchema, newSchema), findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).breakingChanges, findTypesRemovedFromUnions(oldSchema, newSchema), findValuesRemovedFromEnums(oldSchema, newSchema), findArgChanges(oldSchema, newSchema).breakingChanges, findInterfacesRemovedFromObjectTypes(oldSchema, newSchema), findRemovedDirectives(oldSchema, newSchema), findRemovedDirectiveArgs(oldSchema, newSchema), findAddedNonNullDirectiveArgs(oldSchema, newSchema), findRemovedDirectiveLocations(oldSchema, newSchema));
}

/**
 * Given two schemas, returns an Array containing descriptions of all the types
 * of potentially dangerous changes covered by the other functions down below.
 */
function findDangerousChanges(oldSchema, newSchema) {
  return [].concat(findArgChanges(oldSchema, newSchema).dangerousChanges, findValuesAddedToEnums(oldSchema, newSchema), findInterfacesAddedToObjectTypes(oldSchema, newSchema), findTypesAddedToUnions(oldSchema, newSchema), findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema).dangerousChanges);
}

/**
 * Given two schemas, returns an Array containing descriptions of any breaking
 * changes in the newSchema related to removing an entire type.
 */
function findRemovedTypes(oldSchema, newSchema) {
  var oldTypeMap = oldSchema.getTypeMap();
  var newTypeMap = newSchema.getTypeMap();

  var breakingChanges = [];
  Object.keys(oldTypeMap).forEach(function (typeName) {
    if (!newTypeMap[typeName]) {
      breakingChanges.push({
        type: BreakingChangeType.TYPE_REMOVED,
        description: typeName + ' was removed.'
      });
    }
  });
  return breakingChanges;
}

/**
 * Given two schemas, returns an Array containing descriptions of any breaking
 * changes in the newSchema related to changing the type of a type.
 */
function findTypesThatChangedKind(oldSchema, newSchema) {
  var oldTypeMap = oldSchema.getTypeMap();
  var newTypeMap = newSchema.getTypeMap();

  var breakingChanges = [];
  Object.keys(oldTypeMap).forEach(function (typeName) {
    if (!newTypeMap[typeName]) {
      return;
    }
    var oldType = oldTypeMap[typeName];
    var newType = newTypeMap[typeName];
    if (oldType.constructor !== newType.constructor) {
      breakingChanges.push({
        type: BreakingChangeType.TYPE_CHANGED_KIND,
        description: typeName + ' changed from ' + (typeKindName(oldType) + ' to ' + typeKindName(newType) + '.')
      });
    }
  });
  return breakingChanges;
}

/**
 * Given two schemas, returns an Array containing descriptions of any
 * breaking or dangerous changes in the newSchema related to arguments
 * (such as removal or change of type of an argument, or a change in an
 * argument's default value).
 */
function findArgChanges(oldSchema, newSchema) {
  var oldTypeMap = oldSchema.getTypeMap();
  var newTypeMap = newSchema.getTypeMap();

  var breakingChanges = [];
  var dangerousChanges = [];

  Object.keys(oldTypeMap).forEach(function (typeName) {
    var oldType = oldTypeMap[typeName];
    var newType = newTypeMap[typeName];
    if (!((0, _definition.isObjectType)(oldType) || (0, _definition.isInterfaceType)(oldType)) || !((0, _definition.isObjectType)(newType) || (0, _definition.isInterfaceType)(newType)) || newType.constructor !== oldType.constructor) {
      return;
    }

    var oldTypeFields = oldType.getFields();
    var newTypeFields = newType.getFields();

    Object.keys(oldTypeFields).forEach(function (fieldName) {
      if (!newTypeFields[fieldName]) {
        return;
      }

      oldTypeFields[fieldName].args.forEach(function (oldArgDef) {
        var newArgs = newTypeFields[fieldName].args;
        var newArgDef = newArgs.find(function (arg) {
          return arg.name === oldArgDef.name;
        });

        // Arg not present
        if (!newArgDef) {
          breakingChanges.push({
            type: BreakingChangeType.ARG_REMOVED,
            description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' was removed')
          });
        } else {
          var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldArgDef.type, newArgDef.type);
          if (!isSafe) {
            breakingChanges.push({
              type: BreakingChangeType.ARG_CHANGED_KIND,
              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed type from ') + (oldArgDef.type.toString() + ' to ' + newArgDef.type.toString())
            });
          } else if (oldArgDef.defaultValue !== undefined && oldArgDef.defaultValue !== newArgDef.defaultValue) {
            dangerousChanges.push({
              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
              description: oldType.name + '.' + fieldName + ' arg ' + (oldArgDef.name + ' has changed defaultValue')
            });
          }
        }
      });
      // Check if a non-null arg was added to the field
      newTypeFields[fieldName].args.forEach(function (newArgDef) {
        var oldArgs = oldTypeFields[fieldName].args;
        var oldArgDef = oldArgs.find(function (arg) {
          return arg.name === newArgDef.name;
        });
        if (!oldArgDef) {
          if ((0, _definition.isNonNullType)(newArgDef.type)) {
            breakingChanges.push({
              type: BreakingChangeType.NON_NULL_ARG_ADDED,
              description: 'A non-null arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')
            });
          } else {
            dangerousChanges.push({
              type: DangerousChangeType.NULLABLE_ARG_ADDED,
              description: 'A nullable arg ' + newArgDef.name + ' on ' + (newType.name + '.' + fieldName + ' was added')
            });
          }
        }
      });
    });
  });

  return {
    breakingChanges: breakingChanges,
    dangerousChanges: dangerousChanges
  };
}

function typeKindName(type) {
  if ((0, _definition.isScalarType)(type)) {
    return 'a Scalar type';
  }
  if ((0, _definition.isObjectType)(type)) {
    return 'an Object type';
  }
  if ((0, _definition.isInterfaceType)(type)) {
    return 'an Interface type';
  }
  if ((0, _definition.isUnionType)(type)) {
    return 'a Union type';
  }
  if ((0, _definition.isEnumType)(type)) {
    return 'an Enum type';
  }
  if ((0, _definition.isInputObjectType)(type)) {
    return 'an Input type';
  }
  throw new TypeError('Unknown type ' + type.constructor.name);
}

function findFieldsThatChangedTypeOnObjectOrInterfaceTypes(oldSchema, newSchema) {
  var oldTypeMap = oldSchema.getTypeMap();
  var newTypeMap = newSchema.getTypeMap();

  var breakingChanges = [];
  Object.keys(oldTypeMap).forEach(function (typeName) {
    var oldType = oldTypeMap[typeName];
    var newType = newTypeMap[typeName];
    if (!((0, _definition.isObjectType)(oldType) || (0, _definition.isInterfaceType)(oldType)) || !((0, _definition.isObjectType)(newType) || (0, _definition.isInterfaceType)(newType)) || newType.constructor !== oldType.constructor) {
      return;
    }

    var oldTypeFieldsDef = oldType.getFields();
    var newTypeFieldsDef = newType.getFields();
    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {
      // Check if the field is missing on the type in the new schema.
      if (!(fieldName in newTypeFieldsDef)) {
        breakingChanges.push({
          type: BreakingChangeType.FIELD_REMOVED,
          description: typeName + '.' + fieldName + ' was removed.'
        });
      } else {
        var oldFieldType = oldTypeFieldsDef[fieldName].type;
        var newFieldType = newTypeFieldsDef[fieldName].type;
        var isSafe = isChangeSafeForObjectOrInterfaceField(oldFieldType, newFieldType);
        if (!isSafe) {
          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();
          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();
          breakingChanges.push({
            type: BreakingChangeType.FIELD_CHANGED_KIND,
            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')
          });
        }
      }
    });
  });
  return breakingChanges;
}

function findFieldsThatChangedTypeOnInputObjectTypes(oldSchema, newSchema) {
  var oldTypeMap = oldSchema.getTypeMap();
  var newTypeMap = newSchema.getTypeMap();

  var breakingChanges = [];
  var dangerousChanges = [];
  Object.keys(oldTypeMap).forEach(function (typeName) {
    var oldType = oldTypeMap[typeName];
    var newType = newTypeMap[typeName];
    if (!(0, _definition.isInputObjectType)(oldType) || !(0, _definition.isInputObjectType)(newType)) {
      return;
    }

    var oldTypeFieldsDef = oldType.getFields();
    var newTypeFieldsDef = newType.getFields();
    Object.keys(oldTypeFieldsDef).forEach(function (fieldName) {
      // Check if the field is missing on the type in the new schema.
      if (!(fieldName in newTypeFieldsDef)) {
        breakingChanges.push({
          type: BreakingChangeType.FIELD_REMOVED,
          description: typeName + '.' + fieldName + ' was removed.'
        });
      } else {
        var oldFieldType = oldTypeFieldsDef[fieldName].type;
        var newFieldType = newTypeFieldsDef[fieldName].type;

        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(oldFieldType, newFieldType);
        if (!isSafe) {
          var oldFieldTypeString = (0, _definition.isNamedType)(oldFieldType) ? oldFieldType.name : oldFieldType.toString();
          var newFieldTypeString = (0, _definition.isNamedType)(newFieldType) ? newFieldType.name : newFieldType.toString();
          breakingChanges.push({
            type: BreakingChangeType.FIELD_CHANGED_KIND,
            description: typeName + '.' + fieldName + ' changed type from ' + (oldFieldTypeString + ' to ' + newFieldTypeString + '.')
          });
        }
      }
    });
    // Check if a field was added to the input object type
    Object.keys(newTypeFieldsDef).forEach(function (fieldName) {
      if (!(fieldName in oldTypeFieldsDef)) {
        if ((0, _definition.isNonNullType)(newTypeFieldsDef[fieldName].type)) {
          breakingChanges.push({
            type: BreakingChangeType.NON_NULL_INPUT_FIELD_ADDED,
            description: 'A non-null field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')
          });
        } else {
          dangerousChanges.push({
            type: DangerousChangeType.NULLABLE_INPUT_FIELD_ADDED,
            description: 'A nullable field ' + fieldName + ' on ' + ('input type ' + newType.name + ' was added.')
          });
        }
      }
    });
  });
  return {
    breakingChanges: breakingChanges,
    dangerousChanges: dangerousChanges
  };
}

function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
  if ((0, _definition.isNamedType)(oldType)) {
    return (
      // if they're both named types, see if their names are equivalent
      (0, _definition.isNamedType)(newType) && oldType.name === newType.name ||
      // moving from nullable to non-null of the same underlying type is safe
      (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
    );
  } else if ((0, _definition.isListType)(oldType)) {
    return (
      // if they're both lists, make sure the underlying types are compatible
      (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) ||
      // moving from nullable to non-null of the same underlying type is safe
      (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)
    );
  } else if ((0, _definition.isNonNullType)(oldType)) {
    // if they're both non-null, make sure the underlying types are compatible
    return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
  }
  return false;
}

function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
  if ((0, _definition.isNamedType)(oldType)) {
    // if they're both named types, see if their names are equivalent
    return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;
  } else if ((0, _definition.isListType)(oldType)) {
    // if they're both lists, make sure the underlying types are compatible
    return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
  } else if ((0, _definition.isNonNullType)(oldType)) {
    return (
      // if they're both non-null, make sure the underlying types are
      // compatible
      (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) ||
      // moving from non-null to nullable of the same underlying type is safe
      !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)
    );
  }
  return false;
}

/**
 * Given two schemas, returns an Array containing descriptions of any breaking
 * changes in the newSchema related to removing types from a union type.
 */
function findTypesRemovedFromUnions(oldSchema, newSchema) {
  var oldTypeMap = oldSchema.getTypeMap();
  var newTypeMap = newSchema.getTypeMap();

  var typesRemovedFromUnion = [];
  Object.keys(oldTypeMap).forEach(function (typeName) {
    var oldType = oldTypeMap[typeName];
    var newType = newTypeMap[typeName];
    if (!(0, _definition.isUnionType)(oldType) || !(0, _definition.isUnionType)(newType)) {
      return;
    }
    var typeNamesInNewUnion = Object.create(null);
    newType.getTypes().forEach(function (type) {
      typeNamesInNewUnion[type.name] = true;
    });
    oldType.getTypes().forEach(function (type) {
      if (!typeNamesInNewUnion[type.name]) {
        typesRemovedFromUnion.push({
          type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
          description: type.name + ' was removed from union type ' + typeName + '.'
        });
      }
    });
  });
  return typesRemovedFromUnion;
}

/**
 * Given two schemas, returns an Array containing descriptions of any dangerous
 * changes in the newSchema related to adding types to a union type.
 */
function findTypesAddedToUnions(oldSchema, newSchema) {
  var oldTypeMap = oldSchema.getTypeMap();
  var newTypeMap = newSchema.getTypeMap();

  var typesAddedToUnion = [];
  Object.keys(newTypeMap).forEach(function (typeName) {
    var oldType = oldTypeMap[typeName];
    var newType = newTypeMap[typeName];
    if (!(0, _definition.isUnionType)(oldType) || !(0, _definition.isUnionType)(newType)) {
      return;
    }
    var typeNamesInOldUnion = Object.create(null);
    oldType.getTypes().forEach(function (type) {
      typeNamesInOldUnion[type.name] = true;
    });
    newType.getTypes().forEach(function (type) {
      if (!typeNamesInOldUnion[type.name]) {
        typesAddedToUnion.push({
          type: DangerousChangeType.TYPE_ADDED_TO_UNION,
          description: type.name + ' was added to union type ' + typeName + '.'
        });
      }
    });
  });
  return typesAddedToUnion;
}
/**
 * Given two schemas, returns an Array containing descriptions of any breaking
 * changes in the newSchema related to removing values from an enum type.
 */
function findValuesRemovedFromEnums(oldSchema, newSchema) {
  var oldTypeMap = oldSchema.getTypeMap();
  var newTypeMap = newSchema.getTypeMap();

  var valuesRemovedFromEnums = [];
  Object.keys(oldTypeMap).forEach(function (typeName) {
    var oldType = oldTypeMap[typeName];
    var newType = newTypeMap[typeName];
    if (!(0, _definition.isEnumType)(oldType) || !(0, _definition.isEnumType)(newType)) {
      return;
    }
    var valuesInNewEnum = Object.create(null);
    newType.getValues().forEach(function (value) {
      valuesInNewEnum[value.name] = true;
    });
    oldType.getValues().forEach(function (value) {
      if (!valuesInNewEnum[value.name]) {
        valuesRemovedFromEnums.push({
          type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
          description: value.name + ' was removed from enum type ' + typeName + '.'
        });
      }
    });
  });
  return valuesRemovedFromEnums;
}

/**
 * Given two schemas, returns an Array containing descriptions of any dangerous
 * changes in the newSchema related to adding values to an enum type.
 */
function findValuesAddedToEnums(oldSchema, newSchema) {
  var oldTypeMap = oldSchema.getTypeMap();
  var newTypeMap = newSchema.getTypeMap();

  var valuesAddedToEnums = [];
  Object.keys(oldTypeMap).forEach(function (typeName) {
    var oldType = oldTypeMap[typeName];
    var newType = newTypeMap[typeName];
    if (!(0, _definition.isEnumType)(oldType) || !(0, _definition.isEnumType)(newType)) {
      return;
    }

    var valuesInOldEnum = Object.create(null);
    oldType.getValues().forEach(function (value) {
      valuesInOldEnum[value.name] = true;
    });
    newType.getValues().forEach(function (value) {
      if (!valuesInOldEnum[value.name]) {
        valuesAddedToEnums.push({
          type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
          description: value.name + ' was added to enum type ' + typeName + '.'
        });
      }
    });
  });
  return valuesAddedToEnums;
}

function findInterfacesRemovedFromObjectTypes(oldSchema, newSchema) {
  var oldTypeMap = oldSchema.getTypeMap();
  var newTypeMap = newSchema.getTypeMap();
  var breakingChanges = [];

  Object.keys(oldTypeMap).forEach(function (typeName) {
    var oldType = oldTypeMap[typeName];
    var newType = newTypeMap[typeName];
    if (!(0, _definition.isObjectType)(oldType) || !(0, _definition.isObjectType)(newType)) {
      return;
    }

    var oldInterfaces = oldType.getInterfaces();
    var newInterfaces = newType.getInterfaces();
    oldInterfaces.forEach(function (oldInterface) {
      if (!newInterfaces.some(function (int) {
        return int.name === oldInterface.name;
      })) {
        breakingChanges.push({
          type: BreakingChangeType.INTERFACE_REMOVED_FROM_OBJECT,
          description: typeName + ' no longer implements interface ' + (oldInterface.name + '.')
        });
      }
    });
  });
  return breakingChanges;
}

function findInterfacesAddedToObjectTypes(oldSchema, newSchema) {
  var oldTypeMap = oldSchema.getTypeMap();
  var newTypeMap = newSchema.getTypeMap();
  var interfacesAddedToObjectTypes = [];

  Object.keys(newTypeMap).forEach(function (typeName) {
    var oldType = oldTypeMap[typeName];
    var newType = newTypeMap[typeName];
    if (!(0, _definition.isObjectType)(oldType) || !(0, _definition.isObjectType)(newType)) {
      return;
    }

    var oldInterfaces = oldType.getInterfaces();
    var newInterfaces = newType.getInterfaces();
    newInterfaces.forEach(function (newInterface) {
      if (!oldInterfaces.some(function (int) {
        return int.name === newInterface.name;
      })) {
        interfacesAddedToObjectTypes.push({
          type: DangerousChangeType.INTERFACE_ADDED_TO_OBJECT,
          description: newInterface.name + ' added to interfaces implemented ' + ('by ' + typeName + '.')
        });
      }
    });
  });
  return interfacesAddedToObjectTypes;
}

function findRemovedDirectives(oldSchema, newSchema) {
  var removedDirectives = [];

  var newSchemaDirectiveMap = getDirectiveMapForSchema(newSchema);
  oldSchema.getDirectives().forEach(function (directive) {
    if (!newSchemaDirectiveMap[directive.name]) {
      removedDirectives.push({
        type: BreakingChangeType.DIRECTIVE_REMOVED,
        description: directive.name + ' was removed'
      });
    }
  });

  return removedDirectives;
}

function findRemovedArgsForDirective(oldDirective, newDirective) {
  var removedArgs = [];
  var newArgMap = getArgumentMapForDirective(newDirective);

  oldDirective.args.forEach(function (arg) {
    if (!newArgMap[arg.name]) {
      removedArgs.push(arg);
    }
  });

  return removedArgs;
}

function findRemovedDirectiveArgs(oldSchema, newSchema) {
  var removedDirectiveArgs = [];
  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);

  newSchema.getDirectives().forEach(function (newDirective) {
    var oldDirective = oldSchemaDirectiveMap[newDirective.name];
    if (!oldDirective) {
      return;
    }

    findRemovedArgsForDirective(oldDirective, newDirective).forEach(function (arg) {
      removedDirectiveArgs.push({
        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
        description: arg.name + ' was removed from ' + newDirective.name
      });
    });
  });

  return removedDirectiveArgs;
}

function findAddedArgsForDirective(oldDirective, newDirective) {
  var addedArgs = [];
  var oldArgMap = getArgumentMapForDirective(oldDirective);

  newDirective.args.forEach(function (arg) {
    if (!oldArgMap[arg.name]) {
      addedArgs.push(arg);
    }
  });

  return addedArgs;
}

function findAddedNonNullDirectiveArgs(oldSchema, newSchema) {
  var addedNonNullableArgs = [];
  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);

  newSchema.getDirectives().forEach(function (newDirective) {
    var oldDirective = oldSchemaDirectiveMap[newDirective.name];
    if (!oldDirective) {
      return;
    }

    findAddedArgsForDirective(oldDirective, newDirective).forEach(function (arg) {
      if (!(0, _definition.isNonNullType)(arg.type)) {
        return;
      }

      addedNonNullableArgs.push({
        type: BreakingChangeType.NON_NULL_DIRECTIVE_ARG_ADDED,
        description: 'A non-null arg ' + arg.name + ' on directive ' + (newDirective.name + ' was added')
      });
    });
  });

  return addedNonNullableArgs;
}

function findRemovedLocationsForDirective(oldDirective, newDirective) {
  var removedLocations = [];
  var newLocationSet = new Set(newDirective.locations);

  oldDirective.locations.forEach(function (oldLocation) {
    if (!newLocationSet.has(oldLocation)) {
      removedLocations.push(oldLocation);
    }
  });

  return removedLocations;
}

function findRemovedDirectiveLocations(oldSchema, newSchema) {
  var removedLocations = [];
  var oldSchemaDirectiveMap = getDirectiveMapForSchema(oldSchema);

  newSchema.getDirectives().forEach(function (newDirective) {
    var oldDirective = oldSchemaDirectiveMap[newDirective.name];
    if (!oldDirective) {
      return;
    }

    findRemovedLocationsForDirective(oldDirective, newDirective).forEach(function (location) {
      removedLocations.push({
        type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
        description: location + ' was removed from ' + newDirective.name
      });
    });
  });

  return removedLocations;
}

function getDirectiveMapForSchema(schema) {
  return (0, _keyMap2.default)(schema.getDirectives(), function (dir) {
    return dir.name;
  });
}

function getArgumentMapForDirective(directive) {
  return (0, _keyMap2.default)(directive.args, function (arg) {
    return arg.name;
  });
}
},{"../jsutils/keyMap":109,"../type/definition":131,"../type/directives":132,"../type/schema":136}],147:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findDeprecatedUsages = findDeprecatedUsages;

var _GraphQLError = require('../error/GraphQLError');

var _visitor = require('../language/visitor');

var _definition = require('../type/definition');

var _schema = require('../type/schema');

var _TypeInfo = require('./TypeInfo');

/**
 * A validation rule which reports deprecated usages.
 *
 * Returns a list of GraphQLError instances describing each deprecated use.
 */
function findDeprecatedUsages(schema, ast) {
  var errors = [];
  var typeInfo = new _TypeInfo.TypeInfo(schema);

  (0, _visitor.visit)(ast, (0, _visitor.visitWithTypeInfo)(typeInfo, {
    Field: function Field(node) {
      var fieldDef = typeInfo.getFieldDef();
      if (fieldDef && fieldDef.isDeprecated) {
        var parentType = typeInfo.getParentType();
        if (parentType) {
          var reason = fieldDef.deprecationReason;
          errors.push(new _GraphQLError.GraphQLError('The field ' + parentType.name + '.' + fieldDef.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));
        }
      }
    },
    EnumValue: function EnumValue(node) {
      var enumVal = typeInfo.getEnumValue();
      if (enumVal && enumVal.isDeprecated) {
        var type = (0, _definition.getNamedType)(typeInfo.getInputType());
        if (type) {
          var reason = enumVal.deprecationReason;
          errors.push(new _GraphQLError.GraphQLError('The enum value ' + type.name + '.' + enumVal.name + ' is deprecated.' + (reason ? ' ' + reason : ''), [node]));
        }
      }
    }
  }));

  return errors;
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{"../error/GraphQLError":92,"../language/visitor":127,"../type/definition":131,"../type/schema":136,"./TypeInfo":138}],148:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOperationAST = getOperationAST;

var _kinds = require('../language/kinds');

/**
 * Returns an operation AST given a document AST and optionally an operation
 * name. If a name is not provided, an operation is only returned if only one is
 * provided in the document.
 */
function getOperationAST(documentAST, operationName) {
  var operation = null;
  for (var i = 0; i < documentAST.definitions.length; i++) {
    var definition = documentAST.definitions[i];
    if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {
      if (!operationName) {
        // If no operation name was provided, only return an Operation if there
        // is one defined in the document. Upon encountering the second, return
        // null.
        if (operation) {
          return null;
        }
        operation = definition;
      } else if (definition.name && definition.name.value === operationName) {
        return definition;
      }
    }
  }
  return operation;
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{"../language/kinds":121}],149:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _introspectionQuery = require('./introspectionQuery');

Object.defineProperty(exports, 'getIntrospectionQuery', {
  enumerable: true,
  get: function get() {
    return _introspectionQuery.getIntrospectionQuery;
  }
});
Object.defineProperty(exports, 'introspectionQuery', {
  enumerable: true,
  get: function get() {
    return _introspectionQuery.introspectionQuery;
  }
});

var _getOperationAST = require('./getOperationAST');

Object.defineProperty(exports, 'getOperationAST', {
  enumerable: true,
  get: function get() {
    return _getOperationAST.getOperationAST;
  }
});

var _introspectionFromSchema = require('./introspectionFromSchema');

Object.defineProperty(exports, 'introspectionFromSchema', {
  enumerable: true,
  get: function get() {
    return _introspectionFromSchema.introspectionFromSchema;
  }
});

var _buildClientSchema = require('./buildClientSchema');

Object.defineProperty(exports, 'buildClientSchema', {
  enumerable: true,
  get: function get() {
    return _buildClientSchema.buildClientSchema;
  }
});

var _buildASTSchema = require('./buildASTSchema');

Object.defineProperty(exports, 'buildASTSchema', {
  enumerable: true,
  get: function get() {
    return _buildASTSchema.buildASTSchema;
  }
});
Object.defineProperty(exports, 'buildSchema', {
  enumerable: true,
  get: function get() {
    return _buildASTSchema.buildSchema;
  }
});
Object.defineProperty(exports, 'getDescription', {
  enumerable: true,
  get: function get() {
    return _buildASTSchema.getDescription;
  }
});

var _extendSchema = require('./extendSchema');

Object.defineProperty(exports, 'extendSchema', {
  enumerable: true,
  get: function get() {
    return _extendSchema.extendSchema;
  }
});

var _lexicographicSortSchema = require('./lexicographicSortSchema');

Object.defineProperty(exports, 'lexicographicSortSchema', {
  enumerable: true,
  get: function get() {
    return _lexicographicSortSchema.lexicographicSortSchema;
  }
});

var _schemaPrinter = require('./schemaPrinter');

Object.defineProperty(exports, 'printSchema', {
  enumerable: true,
  get: function get() {
    return _schemaPrinter.printSchema;
  }
});
Object.defineProperty(exports, 'printType', {
  enumerable: true,
  get: function get() {
    return _schemaPrinter.printType;
  }
});
Object.defineProperty(exports, 'printIntrospectionSchema', {
  enumerable: true,
  get: function get() {
    return _schemaPrinter.printIntrospectionSchema;
  }
});

var _typeFromAST = require('./typeFromAST');

Object.defineProperty(exports, 'typeFromAST', {
  enumerable: true,
  get: function get() {
    return _typeFromAST.typeFromAST;
  }
});

var _valueFromAST = require('./valueFromAST');

Object.defineProperty(exports, 'valueFromAST', {
  enumerable: true,
  get: function get() {
    return _valueFromAST.valueFromAST;
  }
});

var _valueFromASTUntyped = require('./valueFromASTUntyped');

Object.defineProperty(exports, 'valueFromASTUntyped', {
  enumerable: true,
  get: function get() {
    return _valueFromASTUntyped.valueFromASTUntyped;
  }
});

var _astFromValue = require('./astFromValue');

Object.defineProperty(exports, 'astFromValue', {
  enumerable: true,
  get: function get() {
    return _astFromValue.astFromValue;
  }
});

var _TypeInfo = require('./TypeInfo');

Object.defineProperty(exports, 'TypeInfo', {
  enumerable: true,
  get: function get() {
    return _TypeInfo.TypeInfo;
  }
});

var _coerceValue = require('./coerceValue');

Object.defineProperty(exports, 'coerceValue', {
  enumerable: true,
  get: function get() {
    return _coerceValue.coerceValue;
  }
});

var _isValidJSValue = require('./isValidJSValue');

Object.defineProperty(exports, 'isValidJSValue', {
  enumerable: true,
  get: function get() {
    return _isValidJSValue.isValidJSValue;
  }
});

var _isValidLiteralValue = require('./isValidLiteralValue');

Object.defineProperty(exports, 'isValidLiteralValue', {
  enumerable: true,
  get: function get() {
    return _isValidLiteralValue.isValidLiteralValue;
  }
});

var _concatAST = require('./concatAST');

Object.defineProperty(exports, 'concatAST', {
  enumerable: true,
  get: function get() {
    return _concatAST.concatAST;
  }
});

var _separateOperations = require('./separateOperations');

Object.defineProperty(exports, 'separateOperations', {
  enumerable: true,
  get: function get() {
    return _separateOperations.separateOperations;
  }
});

var _typeComparators = require('./typeComparators');

Object.defineProperty(exports, 'isEqualType', {
  enumerable: true,
  get: function get() {
    return _typeComparators.isEqualType;
  }
});
Object.defineProperty(exports, 'isTypeSubTypeOf', {
  enumerable: true,
  get: function get() {
    return _typeComparators.isTypeSubTypeOf;
  }
});
Object.defineProperty(exports, 'doTypesOverlap', {
  enumerable: true,
  get: function get() {
    return _typeComparators.doTypesOverlap;
  }
});

var _assertValidName = require('./assertValidName');

Object.defineProperty(exports, 'assertValidName', {
  enumerable: true,
  get: function get() {
    return _assertValidName.assertValidName;
  }
});
Object.defineProperty(exports, 'isValidNameError', {
  enumerable: true,
  get: function get() {
    return _assertValidName.isValidNameError;
  }
});

var _findBreakingChanges = require('./findBreakingChanges');

Object.defineProperty(exports, 'BreakingChangeType', {
  enumerable: true,
  get: function get() {
    return _findBreakingChanges.BreakingChangeType;
  }
});
Object.defineProperty(exports, 'DangerousChangeType', {
  enumerable: true,
  get: function get() {
    return _findBreakingChanges.DangerousChangeType;
  }
});
Object.defineProperty(exports, 'findBreakingChanges', {
  enumerable: true,
  get: function get() {
    return _findBreakingChanges.findBreakingChanges;
  }
});
Object.defineProperty(exports, 'findDangerousChanges', {
  enumerable: true,
  get: function get() {
    return _findBreakingChanges.findDangerousChanges;
  }
});

var _findDeprecatedUsages = require('./findDeprecatedUsages');

Object.defineProperty(exports, 'findDeprecatedUsages', {
  enumerable: true,
  get: function get() {
    return _findDeprecatedUsages.findDeprecatedUsages;
  }
});
},{"./TypeInfo":138,"./assertValidName":139,"./astFromValue":140,"./buildASTSchema":141,"./buildClientSchema":142,"./coerceValue":143,"./concatAST":144,"./extendSchema":145,"./findBreakingChanges":146,"./findDeprecatedUsages":147,"./getOperationAST":148,"./introspectionFromSchema":150,"./introspectionQuery":151,"./isValidJSValue":152,"./isValidLiteralValue":153,"./lexicographicSortSchema":154,"./schemaPrinter":155,"./separateOperations":156,"./typeComparators":157,"./typeFromAST":158,"./valueFromAST":159,"./valueFromASTUntyped":160}],150:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.introspectionFromSchema = introspectionFromSchema;

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _introspectionQuery = require('./introspectionQuery');

var _schema = require('../type/schema');

var _execute = require('../execution/execute');

var _parser = require('../language/parser');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Build an IntrospectionQuery from a GraphQLSchema
 *
 * IntrospectionQuery is useful for utilities that care about type and field
 * relationships, but do not need to traverse through those relationships.
 *
 * This is the inverse of buildClientSchema. The primary use case is outside
 * of the server context, for instance when doing schema comparisons.
 */
function introspectionFromSchema(schema, options) {
  var queryAST = (0, _parser.parse)((0, _introspectionQuery.getIntrospectionQuery)(options));
  var result = (0, _execute.execute)(schema, queryAST);
  !(!result.then && !result.errors && result.data) ? (0, _invariant2.default)(0) : void 0;
  return result.data;
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{"../execution/execute":98,"../jsutils/invariant":105,"../language/parser":124,"../type/schema":136,"./introspectionQuery":151}],151:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIntrospectionQuery = getIntrospectionQuery;
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function getIntrospectionQuery(options) {
  var descriptions = !(options && options.descriptions === false);
  return '\n    query IntrospectionQuery {\n      __schema {\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ' + (descriptions ? 'description' : '') + '\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ' + (descriptions ? 'description' : '') + '\n      fields(includeDeprecated: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ' + (descriptions ? 'description' : '') + '\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ' + (descriptions ? 'description' : '') + '\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ';
}

var introspectionQuery = exports.introspectionQuery = getIntrospectionQuery();
},{}],152:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidJSValue = isValidJSValue;

var _coerceValue = require('./coerceValue');

/**
 * Deprecated. Use coerceValue() directly for richer information.
 */
function isValidJSValue(value, type) {
  var errors = (0, _coerceValue.coerceValue)(value, type).errors;
  return errors ? errors.map(function (error) {
    return error.message;
  }) : [];
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{"./coerceValue":143}],153:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidLiteralValue = isValidLiteralValue;

var _TypeInfo = require('./TypeInfo');

var _kinds = require('../language/kinds');

var _visitor = require('../language/visitor');

var _schema = require('../type/schema');

var _ValuesOfCorrectType = require('../validation/rules/ValuesOfCorrectType');

var _ValidationContext = require('../validation/ValidationContext');

var _ValidationContext2 = _interopRequireDefault(_ValidationContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Utility which determines if a value literal node is valid for an input type.
 *
 * Deprecated. Rely on validation for documents containing literal values.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function isValidLiteralValue(type, valueNode) {
  var emptySchema = new _schema.GraphQLSchema({});
  var emptyDoc = { kind: _kinds.Kind.DOCUMENT, definitions: [] };
  var typeInfo = new _TypeInfo.TypeInfo(emptySchema, undefined, type);
  var context = new _ValidationContext2.default(emptySchema, emptyDoc, typeInfo);
  var visitor = (0, _ValuesOfCorrectType.ValuesOfCorrectType)(context);
  (0, _visitor.visit)(valueNode, (0, _visitor.visitWithTypeInfo)(typeInfo, visitor));
  return context.getErrors();
}
},{"../language/kinds":121,"../language/visitor":127,"../type/schema":136,"../validation/ValidationContext":161,"../validation/rules/ValuesOfCorrectType":186,"./TypeInfo":138}],154:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   *  strict
                                                                                                                                                                                                                                                                   */

exports.lexicographicSortSchema = lexicographicSortSchema;

var _keyValMap = require('../jsutils/keyValMap');

var _keyValMap2 = _interopRequireDefault(_keyValMap);

var _objectValues = require('../jsutils/objectValues');

var _objectValues2 = _interopRequireDefault(_objectValues);

var _schema = require('../type/schema');

var _directives = require('../type/directives');

var _definition = require('../type/definition');

var _scalars = require('../type/scalars');

var _introspection = require('../type/introspection');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Sort GraphQLSchema.
 */
function lexicographicSortSchema(schema) {
  var cache = Object.create(null);

  var sortMaybeType = function sortMaybeType(maybeType) {
    return maybeType && sortNamedType(maybeType);
  };
  return new _schema.GraphQLSchema({
    types: sortTypes((0, _objectValues2.default)(schema.getTypeMap())),
    directives: sortByName(schema.getDirectives()).map(sortDirective),
    query: sortMaybeType(schema.getQueryType()),
    mutation: sortMaybeType(schema.getMutationType()),
    subscription: sortMaybeType(schema.getSubscriptionType()),
    astNode: schema.astNode
  });

  function sortDirective(directive) {
    return new _directives.GraphQLDirective({
      name: directive.name,
      description: directive.description,
      locations: sortBy(directive.locations, function (x) {
        return x;
      }),
      args: sortArgs(directive.args),
      astNode: directive.astNode
    });
  }

  function sortArgs(args) {
    return (0, _keyValMap2.default)(sortByName(args), function (arg) {
      return arg.name;
    }, function (arg) {
      return _extends({}, arg, {
        type: sortType(arg.type)
      });
    });
  }

  function sortFields(fieldsMap) {
    return sortObjMap(fieldsMap, function (field) {
      return {
        type: sortType(field.type),
        args: sortArgs(field.args),
        resolve: field.resolve,
        subscribe: field.subscribe,
        deprecationReason: field.deprecationReason,
        description: field.description,
        astNode: field.astNode
      };
    });
  }

  function sortInputFields(fieldsMap) {
    return sortObjMap(fieldsMap, function (field) {
      return {
        type: sortType(field.type),
        defaultValue: field.defaultValue,
        description: field.description,
        astNode: field.astNode
      };
    });
  }

  function sortType(type) {
    if ((0, _definition.isListType)(type)) {
      return new _definition.GraphQLList(sortType(type.ofType));
    } else if ((0, _definition.isNonNullType)(type)) {
      return new _definition.GraphQLNonNull(sortType(type.ofType));
    }
    return sortNamedType(type);
  }

  function sortTypes(arr) {
    return sortByName(arr).map(sortNamedType);
  }

  function sortNamedType(type) {
    if ((0, _scalars.isSpecifiedScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {
      return type;
    }

    var sortedType = cache[type.name];
    if (!sortedType) {
      sortedType = sortNamedTypeImpl(type);
      cache[type.name] = sortedType;
    }
    return sortedType;
  }

  function sortNamedTypeImpl(type) {
    if ((0, _definition.isScalarType)(type)) {
      return type;
    } else if ((0, _definition.isObjectType)(type)) {
      return new _definition.GraphQLObjectType({
        name: type.name,
        interfaces: function interfaces() {
          return sortTypes(type.getInterfaces());
        },
        fields: function fields() {
          return sortFields(type.getFields());
        },
        isTypeOf: type.isTypeOf,
        description: type.description,
        astNode: type.astNode,
        extensionASTNodes: type.extensionASTNodes
      });
    } else if ((0, _definition.isInterfaceType)(type)) {
      return new _definition.GraphQLInterfaceType({
        name: type.name,
        fields: function fields() {
          return sortFields(type.getFields());
        },
        resolveType: type.resolveType,
        description: type.description,
        astNode: type.astNode,
        extensionASTNodes: type.extensionASTNodes
      });
    } else if ((0, _definition.isUnionType)(type)) {
      return new _definition.GraphQLUnionType({
        name: type.name,
        types: function types() {
          return sortTypes(type.getTypes());
        },
        resolveType: type.resolveType,
        description: type.description,
        astNode: type.astNode
      });
    } else if ((0, _definition.isEnumType)(type)) {
      return new _definition.GraphQLEnumType({
        name: type.name,
        values: (0, _keyValMap2.default)(sortByName(type.getValues()), function (val) {
          return val.name;
        }, function (val) {
          return {
            value: val.value,
            deprecationReason: val.deprecationReason,
            description: val.description,
            astNode: val.astNode
          };
        }),
        description: type.description,
        astNode: type.astNode
      });
    } else if ((0, _definition.isInputObjectType)(type)) {
      return new _definition.GraphQLInputObjectType({
        name: type.name,
        fields: function fields() {
          return sortInputFields(type.getFields());
        },
        description: type.description,
        astNode: type.astNode
      });
    }
    throw new Error('Unknown type: "' + type + '"');
  }
}

function sortObjMap(map, sortValueFn) {
  var sortedMap = Object.create(null);
  var sortedKeys = sortBy(Object.keys(map), function (x) {
    return x;
  });
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = sortedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      var value = map[key];
      sortedMap[key] = sortValueFn ? sortValueFn(value) : value;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return sortedMap;
}

function sortByName(array) {
  return sortBy(array, function (obj) {
    return obj.name;
  });
}

function sortBy(array, mapToKey) {
  return array.slice().sort(function (obj1, obj2) {
    var key1 = mapToKey(obj1);
    var key2 = mapToKey(obj2);
    return key1.localeCompare(key2);
  });
}
},{"../jsutils/keyValMap":110,"../jsutils/objectValues":112,"../type/definition":131,"../type/directives":132,"../type/introspection":134,"../type/scalars":135,"../type/schema":136}],155:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printSchema = printSchema;
exports.printIntrospectionSchema = printIntrospectionSchema;
exports.printType = printType;

var _isNullish = require('../jsutils/isNullish');

var _isNullish2 = _interopRequireDefault(_isNullish);

var _isInvalid = require('../jsutils/isInvalid');

var _isInvalid2 = _interopRequireDefault(_isInvalid);

var _objectValues = require('../jsutils/objectValues');

var _objectValues2 = _interopRequireDefault(_objectValues);

var _astFromValue = require('../utilities/astFromValue');

var _printer = require('../language/printer');

var _definition = require('../type/definition');

var _scalars = require('../type/scalars');

var _directives = require('../type/directives');

var _introspection = require('../type/introspection');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */
function printSchema(schema, options) {
  return printFilteredSchema(schema, function (n) {
    return !(0, _directives.isSpecifiedDirective)(n);
  }, isDefinedType, options);
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */

function printIntrospectionSchema(schema, options) {
  return printFilteredSchema(schema, _directives.isSpecifiedDirective, _introspection.isIntrospectionType, options);
}

function isDefinedType(type) {
  return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);
}

function printFilteredSchema(schema, directiveFilter, typeFilter, options) {
  var directives = schema.getDirectives().filter(directiveFilter);
  var typeMap = schema.getTypeMap();
  var types = (0, _objectValues2.default)(typeMap).sort(function (type1, type2) {
    return type1.name.localeCompare(type2.name);
  }).filter(typeFilter);

  return [printSchemaDefinition(schema)].concat(directives.map(function (directive) {
    return printDirective(directive, options);
  }), types.map(function (type) {
    return printType(type, options);
  })).filter(Boolean).join('\n\n') + '\n';
}

function printSchemaDefinition(schema) {
  if (isSchemaOfCommonNames(schema)) {
    return;
  }

  var operationTypes = [];

  var queryType = schema.getQueryType();
  if (queryType) {
    operationTypes.push('  query: ' + queryType.name);
  }

  var mutationType = schema.getMutationType();
  if (mutationType) {
    operationTypes.push('  mutation: ' + mutationType.name);
  }

  var subscriptionType = schema.getSubscriptionType();
  if (subscriptionType) {
    operationTypes.push('  subscription: ' + subscriptionType.name);
  }

  return 'schema {\n' + operationTypes.join('\n') + '\n}';
}

/**
 * GraphQL schema define root types for each type of operation. These types are
 * the same as any other type and can be named in any manner, however there is
 * a common naming convention:
 *
 *   schema {
 *     query: Query
 *     mutation: Mutation
 *   }
 *
 * When using this naming convention, the schema description can be omitted.
 */
function isSchemaOfCommonNames(schema) {
  var queryType = schema.getQueryType();
  if (queryType && queryType.name !== 'Query') {
    return false;
  }

  var mutationType = schema.getMutationType();
  if (mutationType && mutationType.name !== 'Mutation') {
    return false;
  }

  var subscriptionType = schema.getSubscriptionType();
  if (subscriptionType && subscriptionType.name !== 'Subscription') {
    return false;
  }

  return true;
}

function printType(type, options) {
  if ((0, _definition.isScalarType)(type)) {
    return printScalar(type, options);
  } else if ((0, _definition.isObjectType)(type)) {
    return printObject(type, options);
  } else if ((0, _definition.isInterfaceType)(type)) {
    return printInterface(type, options);
  } else if ((0, _definition.isUnionType)(type)) {
    return printUnion(type, options);
  } else if ((0, _definition.isEnumType)(type)) {
    return printEnum(type, options);
  } else if ((0, _definition.isInputObjectType)(type)) {
    return printInputObject(type, options);
  }
  /* istanbul ignore next */
  throw new Error('Unknown type: ' + type + '.');
}

function printScalar(type, options) {
  return printDescription(options, type) + ('scalar ' + type.name);
}

function printObject(type, options) {
  var interfaces = type.getInterfaces();
  var implementedInterfaces = interfaces.length ? ' implements ' + interfaces.map(function (i) {
    return i.name;
  }).join(' & ') : '';
  return printDescription(options, type) + ('type ' + type.name + implementedInterfaces + ' {\n') + printFields(options, type) + '\n' + '}';
}

function printInterface(type, options) {
  return printDescription(options, type) + ('interface ' + type.name + ' {\n') + printFields(options, type) + '\n' + '}';
}

function printUnion(type, options) {
  return printDescription(options, type) + ('union ' + type.name + ' = ' + type.getTypes().join(' | '));
}

function printEnum(type, options) {
  return printDescription(options, type) + ('enum ' + type.name + ' {\n') + printEnumValues(type.getValues(), options) + '\n' + '}';
}

function printEnumValues(values, options) {
  return values.map(function (value, i) {
    return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value);
  }).join('\n');
}

function printInputObject(type, options) {
  var fields = (0, _objectValues2.default)(type.getFields());
  return printDescription(options, type) + ('input ' + type.name + ' {\n') + fields.map(function (f, i) {
    return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);
  }).join('\n') + '\n' + '}';
}

function printFields(options, type) {
  var fields = (0, _objectValues2.default)(type.getFields());
  return fields.map(function (f, i) {
    return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f);
  }).join('\n');
}

function printArgs(options, args) {
  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  if (args.length === 0) {
    return '';
  }

  // If every arg does not have a description, print them on one line.
  if (args.every(function (arg) {
    return !arg.description;
  })) {
    return '(' + args.map(printInputValue).join(', ') + ')';
  }

  return '(\n' + args.map(function (arg, i) {
    return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);
  }).join('\n') + '\n' + indentation + ')';
}

function printInputValue(arg) {
  var argDecl = arg.name + ': ' + String(arg.type);
  if (!(0, _isInvalid2.default)(arg.defaultValue)) {
    argDecl += ' = ' + (0, _printer.print)((0, _astFromValue.astFromValue)(arg.defaultValue, arg.type));
  }
  return argDecl;
}

function printDirective(directive, options) {
  return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + ' on ' + directive.locations.join(' | ');
}

function printDeprecated(fieldOrEnumVal) {
  if (!fieldOrEnumVal.isDeprecated) {
    return '';
  }
  var reason = fieldOrEnumVal.deprecationReason;
  if ((0, _isNullish2.default)(reason) || reason === '' || reason === _directives.DEFAULT_DEPRECATION_REASON) {
    return ' @deprecated';
  }
  return ' @deprecated(reason: ' + (0, _printer.print)((0, _astFromValue.astFromValue)(reason, _scalars.GraphQLString)) + ')';
}

function printDescription(options, def) {
  var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  if (!def.description) {
    return '';
  }

  var lines = descriptionLines(def.description, 120 - indentation.length);
  if (options && options.commentDescriptions) {
    return printDescriptionWithComments(lines, indentation, firstInBlock);
  }

  var description = indentation && !firstInBlock ? '\n' + indentation + '"""' : indentation + '"""';

  // In some circumstances, a single line can be used for the description.
  if (lines.length === 1 && lines[0].length < 70 && lines[0][lines[0].length - 1] !== '"') {
    return description + escapeQuote(lines[0]) + '"""\n';
  }

  // Format a multi-line block quote to account for leading space.
  var hasLeadingSpace = lines[0][0] === ' ' || lines[0][0] === '\t';
  if (!hasLeadingSpace) {
    description += '\n';
  }
  for (var i = 0; i < lines.length; i++) {
    if (i !== 0 || !hasLeadingSpace) {
      description += indentation;
    }
    description += escapeQuote(lines[i]) + '\n';
  }
  description += indentation + '"""\n';
  return description;
}

function escapeQuote(line) {
  return line.replace(/"""/g, '\\"""');
}

function printDescriptionWithComments(lines, indentation, firstInBlock) {
  var description = indentation && !firstInBlock ? '\n' : '';
  for (var i = 0; i < lines.length; i++) {
    if (lines[i] === '') {
      description += indentation + '#\n';
    } else {
      description += indentation + '# ' + lines[i] + '\n';
    }
  }
  return description;
}

function descriptionLines(description, maxLen) {
  var lines = [];
  var rawLines = description.split('\n');
  for (var i = 0; i < rawLines.length; i++) {
    if (rawLines[i] === '') {
      lines.push(rawLines[i]);
    } else {
      // For > 120 character long lines, cut at space boundaries into sublines
      // of ~80 chars.
      var sublines = breakLine(rawLines[i], maxLen);
      for (var j = 0; j < sublines.length; j++) {
        lines.push(sublines[j]);
      }
    }
  }
  return lines;
}

function breakLine(line, maxLen) {
  if (line.length < maxLen + 5) {
    return [line];
  }
  var parts = line.split(new RegExp('((?: |^).{15,' + (maxLen - 40) + '}(?= |$))'));
  if (parts.length < 4) {
    return [line];
  }
  var sublines = [parts[0] + parts[1] + parts[2]];
  for (var i = 3; i < parts.length; i += 2) {
    sublines.push(parts[i].slice(1) + parts[i + 1]);
  }
  return sublines;
}
},{"../jsutils/isInvalid":106,"../jsutils/isNullish":107,"../jsutils/objectValues":112,"../language/printer":125,"../type/definition":131,"../type/directives":132,"../type/introspection":134,"../type/scalars":135,"../utilities/astFromValue":140}],156:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.separateOperations = separateOperations;

var _visitor = require('../language/visitor');

/**
 * separateOperations accepts a single AST document which may contain many
 * operations and fragments and returns a collection of AST documents each of
 * which contains a single operation as well the fragment definitions it
 * refers to.
 */
function separateOperations(documentAST) {
  var operations = [];
  var fragments = Object.create(null);
  var positions = new Map();
  var depGraph = Object.create(null);
  var fromName = void 0;
  var idx = 0;

  // Populate metadata and build a dependency graph.
  (0, _visitor.visit)(documentAST, {
    OperationDefinition: function OperationDefinition(node) {
      fromName = opName(node);
      operations.push(node);
      positions.set(node, idx++);
    },
    FragmentDefinition: function FragmentDefinition(node) {
      fromName = node.name.value;
      fragments[fromName] = node;
      positions.set(node, idx++);
    },
    FragmentSpread: function FragmentSpread(node) {
      var toName = node.name.value;
      (depGraph[fromName] || (depGraph[fromName] = Object.create(null)))[toName] = true;
    }
  });

  // For each operation, produce a new synthesized AST which includes only what
  // is necessary for completing that operation.
  var separatedDocumentASTs = Object.create(null);
  operations.forEach(function (operation) {
    var operationName = opName(operation);
    var dependencies = Object.create(null);
    collectTransitiveDependencies(dependencies, depGraph, operationName);

    // The list of definition nodes to be included for this operation, sorted
    // to retain the same order as the original document.
    var definitions = [operation];
    Object.keys(dependencies).forEach(function (name) {
      definitions.push(fragments[name]);
    });
    definitions.sort(function (n1, n2) {
      return (positions.get(n1) || 0) - (positions.get(n2) || 0);
    });

    separatedDocumentASTs[operationName] = {
      kind: 'Document',
      definitions: definitions
    };
  });

  return separatedDocumentASTs;
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */

// Provides the empty string for anonymous operations.
function opName(operation) {
  return operation.name ? operation.name.value : '';
}

// From a dependency graph, collects a list of transitive dependencies by
// recursing through a dependency graph.
function collectTransitiveDependencies(collected, depGraph, fromName) {
  var immediateDeps = depGraph[fromName];
  if (immediateDeps) {
    Object.keys(immediateDeps).forEach(function (toName) {
      if (!collected[toName]) {
        collected[toName] = true;
        collectTransitiveDependencies(collected, depGraph, toName);
      }
    });
  }
}
},{"../language/visitor":127}],157:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEqualType = isEqualType;
exports.isTypeSubTypeOf = isTypeSubTypeOf;
exports.doTypesOverlap = doTypesOverlap;

var _definition = require('../type/definition');

/**
 * Provided two types, return true if the types are equal (invariant).
 */
function isEqualType(typeA, typeB) {
  // Equivalent types are equal.
  if (typeA === typeB) {
    return true;
  }

  // If either type is non-null, the other must also be non-null.
  if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {
    return isEqualType(typeA.ofType, typeB.ofType);
  }

  // If either type is a list, the other must also be a list.
  if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {
    return isEqualType(typeA.ofType, typeB.ofType);
  }

  // Otherwise the types are not equal.
  return false;
}

/**
 * Provided a type and a super type, return true if the first type is either
 * equal or a subset of the second super type (covariant).
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function isTypeSubTypeOf(schema, maybeSubType, superType) {
  // Equivalent type is a valid subtype
  if (maybeSubType === superType) {
    return true;
  }

  // If superType is non-null, maybeSubType must also be non-null.
  if ((0, _definition.isNonNullType)(superType)) {
    if ((0, _definition.isNonNullType)(maybeSubType)) {
      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
    }
    return false;
  }
  if ((0, _definition.isNonNullType)(maybeSubType)) {
    // If superType is nullable, maybeSubType may be non-null or nullable.
    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
  }

  // If superType type is a list, maybeSubType type must also be a list.
  if ((0, _definition.isListType)(superType)) {
    if ((0, _definition.isListType)(maybeSubType)) {
      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
    }
    return false;
  }
  if ((0, _definition.isListType)(maybeSubType)) {
    // If superType is not a list, maybeSubType must also be not a list.
    return false;
  }

  // If superType type is an abstract type, maybeSubType type may be a currently
  // possible object type.
  if ((0, _definition.isAbstractType)(superType) && (0, _definition.isObjectType)(maybeSubType) && schema.isPossibleType(superType, maybeSubType)) {
    return true;
  }

  // Otherwise, the child type is not a valid subtype of the parent type.
  return false;
}

/**
 * Provided two composite types, determine if they "overlap". Two composite
 * types overlap when the Sets of possible concrete types for each intersect.
 *
 * This is often used to determine if a fragment of a given type could possibly
 * be visited in a context of another type.
 *
 * This function is commutative.
 */
function doTypesOverlap(schema, typeA, typeB) {
  // Equivalent types overlap
  if (typeA === typeB) {
    return true;
  }

  if ((0, _definition.isAbstractType)(typeA)) {
    if ((0, _definition.isAbstractType)(typeB)) {
      // If both types are abstract, then determine if there is any intersection
      // between possible concrete types of each.
      return schema.getPossibleTypes(typeA).some(function (type) {
        return schema.isPossibleType(typeB, type);
      });
    }
    // Determine if the latter type is a possible concrete type of the former.
    return schema.isPossibleType(typeA, typeB);
  }

  if ((0, _definition.isAbstractType)(typeB)) {
    // Determine if the former type is a possible concrete type of the latter.
    return schema.isPossibleType(typeB, typeA);
  }

  // Otherwise the types do not overlap.
  return false;
}
},{"../type/definition":131}],158:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeFromAST = typeFromAST;

var _kinds = require('../language/kinds');

var _definition = require('../type/definition');

/**
 * Given a Schema and an AST node describing a type, return a GraphQLType
 * definition which applies to that type. For example, if provided the parsed
 * AST node for `[User]`, a GraphQLList instance will be returned, containing
 * the type called "User" found in the schema. If a type called "User" is not
 * found in the schema, then undefined will be returned.
 */
/* eslint-disable no-redeclare */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function typeFromAST(schema, typeNode) {
  /* eslint-enable no-redeclare */
  var innerType = void 0;
  if (typeNode.kind === _kinds.Kind.LIST_TYPE) {
    innerType = typeFromAST(schema, typeNode.type);
    return innerType && (0, _definition.GraphQLList)(innerType);
  }
  if (typeNode.kind === _kinds.Kind.NON_NULL_TYPE) {
    innerType = typeFromAST(schema, typeNode.type);
    return innerType && (0, _definition.GraphQLNonNull)(innerType);
  }
  if (typeNode.kind === _kinds.Kind.NAMED_TYPE) {
    return schema.getType(typeNode.name.value);
  }
  /* istanbul ignore next */
  throw new Error('Unexpected type kind: ' + typeNode.kind + '.');
}
},{"../language/kinds":121,"../type/definition":131}],159:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.valueFromAST = valueFromAST;

var _keyMap = require('../jsutils/keyMap');

var _keyMap2 = _interopRequireDefault(_keyMap);

var _isInvalid = require('../jsutils/isInvalid');

var _isInvalid2 = _interopRequireDefault(_isInvalid);

var _objectValues = require('../jsutils/objectValues');

var _objectValues2 = _interopRequireDefault(_objectValues);

var _kinds = require('../language/kinds');

var _definition = require('../type/definition');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produces a JavaScript value given a GraphQL Value AST.
 *
 * A GraphQL type must be provided, which will be used to interpret different
 * GraphQL Value literals.
 *
 * Returns `undefined` when the value could not be validly coerced according to
 * the provided type.
 *
 * | GraphQL Value        | JSON Value    |
 * | -------------------- | ------------- |
 * | Input Object         | Object        |
 * | List                 | Array         |
 * | Boolean              | Boolean       |
 * | String               | String        |
 * | Int / Float          | Number        |
 * | Enum Value           | Mixed         |
 * | NullValue            | null          |
 *
 */
function valueFromAST(valueNode, type, variables) {
  if (!valueNode) {
    // When there is no node, then there is also no value.
    // Importantly, this is different from returning the value null.
    return;
  }

  if ((0, _definition.isNonNullType)(type)) {
    if (valueNode.kind === _kinds.Kind.NULL) {
      return; // Invalid: intentionally return no value.
    }
    return valueFromAST(valueNode, type.ofType, variables);
  }

  if (valueNode.kind === _kinds.Kind.NULL) {
    // This is explicitly returning the value null.
    return null;
  }

  if (valueNode.kind === _kinds.Kind.VARIABLE) {
    var variableName = valueNode.name.value;
    if (!variables || (0, _isInvalid2.default)(variables[variableName])) {
      // No valid return value.
      return;
    }
    // Note: we're not doing any checking that this variable is correct. We're
    // assuming that this query has been validated and the variable usage here
    // is of the correct type.
    return variables[variableName];
  }

  if ((0, _definition.isListType)(type)) {
    var itemType = type.ofType;
    if (valueNode.kind === _kinds.Kind.LIST) {
      var coercedValues = [];
      var itemNodes = valueNode.values;
      for (var i = 0; i < itemNodes.length; i++) {
        if (isMissingVariable(itemNodes[i], variables)) {
          // If an array contains a missing variable, it is either coerced to
          // null or if the item type is non-null, it considered invalid.
          if ((0, _definition.isNonNullType)(itemType)) {
            return; // Invalid: intentionally return no value.
          }
          coercedValues.push(null);
        } else {
          var itemValue = valueFromAST(itemNodes[i], itemType, variables);
          if ((0, _isInvalid2.default)(itemValue)) {
            return; // Invalid: intentionally return no value.
          }
          coercedValues.push(itemValue);
        }
      }
      return coercedValues;
    }
    var coercedValue = valueFromAST(valueNode, itemType, variables);
    if ((0, _isInvalid2.default)(coercedValue)) {
      return; // Invalid: intentionally return no value.
    }
    return [coercedValue];
  }

  if ((0, _definition.isInputObjectType)(type)) {
    if (valueNode.kind !== _kinds.Kind.OBJECT) {
      return; // Invalid: intentionally return no value.
    }
    var coercedObj = Object.create(null);
    var fieldNodes = (0, _keyMap2.default)(valueNode.fields, function (field) {
      return field.name.value;
    });
    var fields = (0, _objectValues2.default)(type.getFields());
    for (var _i = 0; _i < fields.length; _i++) {
      var field = fields[_i];
      var fieldNode = fieldNodes[field.name];
      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
        if (!(0, _isInvalid2.default)(field.defaultValue)) {
          coercedObj[field.name] = field.defaultValue;
        } else if ((0, _definition.isNonNullType)(field.type)) {
          return; // Invalid: intentionally return no value.
        }
        continue;
      }
      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);
      if ((0, _isInvalid2.default)(fieldValue)) {
        return; // Invalid: intentionally return no value.
      }
      coercedObj[field.name] = fieldValue;
    }
    return coercedObj;
  }

  if ((0, _definition.isEnumType)(type)) {
    if (valueNode.kind !== _kinds.Kind.ENUM) {
      return; // Invalid: intentionally return no value.
    }
    var enumValue = type.getValue(valueNode.value);
    if (!enumValue) {
      return; // Invalid: intentionally return no value.
    }
    return enumValue.value;
  }

  if ((0, _definition.isScalarType)(type)) {
    // Scalars fulfill parsing a literal value via parseLiteral().
    // Invalid values represent a failure to parse correctly, in which case
    // no value is returned.
    var result = void 0;
    try {
      result = type.parseLiteral(valueNode, variables);
    } catch (_error) {
      return; // Invalid: intentionally return no value.
    }
    if ((0, _isInvalid2.default)(result)) {
      return; // Invalid: intentionally return no value.
    }
    return result;
  }

  /* istanbul ignore next */
  throw new Error('Unknown type: ' + type + '.');
}

// Returns true if the provided valueNode is a variable which is not defined
// in the set of variables.
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function isMissingVariable(valueNode, variables) {
  return valueNode.kind === _kinds.Kind.VARIABLE && (!variables || (0, _isInvalid2.default)(variables[valueNode.name.value]));
}
},{"../jsutils/isInvalid":106,"../jsutils/keyMap":109,"../jsutils/objectValues":112,"../language/kinds":121,"../type/definition":131}],160:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.valueFromASTUntyped = valueFromASTUntyped;

var _keyValMap = require('../jsutils/keyValMap');

var _keyValMap2 = _interopRequireDefault(_keyValMap);

var _isInvalid = require('../jsutils/isInvalid');

var _isInvalid2 = _interopRequireDefault(_isInvalid);

var _kinds = require('../language/kinds');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produces a JavaScript value given a GraphQL Value AST.
 *
 * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
 * will reflect the provided GraphQL value AST.
 *
 * | GraphQL Value        | JavaScript Value |
 * | -------------------- | ---------------- |
 * | Input Object         | Object           |
 * | List                 | Array            |
 * | Boolean              | Boolean          |
 * | String / Enum        | String           |
 * | Int / Float          | Number           |
 * | Null                 | null             |
 *
 */
function valueFromASTUntyped(valueNode, variables) {
  switch (valueNode.kind) {
    case _kinds.Kind.NULL:
      return null;
    case _kinds.Kind.INT:
      return parseInt(valueNode.value, 10);
    case _kinds.Kind.FLOAT:
      return parseFloat(valueNode.value);
    case _kinds.Kind.STRING:
    case _kinds.Kind.ENUM:
    case _kinds.Kind.BOOLEAN:
      return valueNode.value;
    case _kinds.Kind.LIST:
      return valueNode.values.map(function (node) {
        return valueFromASTUntyped(node, variables);
      });
    case _kinds.Kind.OBJECT:
      return (0, _keyValMap2.default)(valueNode.fields, function (field) {
        return field.name.value;
      }, function (field) {
        return valueFromASTUntyped(field.value, variables);
      });
    case _kinds.Kind.VARIABLE:
      var variableName = valueNode.name.value;
      return variables && !(0, _isInvalid2.default)(variables[variableName]) ? variables[variableName] : undefined;
  }
  /* istanbul ignore next */
  throw new Error('Unexpected value kind: ' + valueNode.kind);
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */
},{"../jsutils/isInvalid":106,"../jsutils/keyValMap":110,"../language/kinds":121}],161:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _error = require('../error');

var _visitor = require('../language/visitor');

var _kinds = require('../language/kinds');

var _schema = require('../type/schema');

var _TypeInfo = require('../utilities/TypeInfo');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                           *
                                                                                                                                                           * This source code is licensed under the MIT license found in the
                                                                                                                                                           * LICENSE file in the root directory of this source tree.
                                                                                                                                                           *
                                                                                                                                                           *  strict
                                                                                                                                                           */

/**
 * An instance of this class is passed as the "this" context to all validators,
 * allowing access to commonly useful contextual information from within a
 * validation rule.
 */
var ValidationContext = function () {
  function ValidationContext(schema, ast, typeInfo) {
    _classCallCheck(this, ValidationContext);

    this._schema = schema;
    this._ast = ast;
    this._typeInfo = typeInfo;
    this._errors = [];
    this._fragmentSpreads = new Map();
    this._recursivelyReferencedFragments = new Map();
    this._variableUsages = new Map();
    this._recursiveVariableUsages = new Map();
  }

  ValidationContext.prototype.reportError = function reportError(error) {
    this._errors.push(error);
  };

  ValidationContext.prototype.getErrors = function getErrors() {
    return this._errors;
  };

  ValidationContext.prototype.getSchema = function getSchema() {
    return this._schema;
  };

  ValidationContext.prototype.getDocument = function getDocument() {
    return this._ast;
  };

  ValidationContext.prototype.getFragment = function getFragment(name) {
    var fragments = this._fragments;
    if (!fragments) {
      this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {
        if (statement.kind === _kinds.Kind.FRAGMENT_DEFINITION) {
          frags[statement.name.value] = statement;
        }
        return frags;
      }, Object.create(null));
    }
    return fragments[name];
  };

  ValidationContext.prototype.getFragmentSpreads = function getFragmentSpreads(node) {
    var spreads = this._fragmentSpreads.get(node);
    if (!spreads) {
      spreads = [];
      var setsToVisit = [node];
      while (setsToVisit.length !== 0) {
        var set = setsToVisit.pop();
        for (var i = 0; i < set.selections.length; i++) {
          var selection = set.selections[i];
          if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {
            spreads.push(selection);
          } else if (selection.selectionSet) {
            setsToVisit.push(selection.selectionSet);
          }
        }
      }
      this._fragmentSpreads.set(node, spreads);
    }
    return spreads;
  };

  ValidationContext.prototype.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {
    var fragments = this._recursivelyReferencedFragments.get(operation);
    if (!fragments) {
      fragments = [];
      var collectedNames = Object.create(null);
      var nodesToVisit = [operation.selectionSet];
      while (nodesToVisit.length !== 0) {
        var _node = nodesToVisit.pop();
        var spreads = this.getFragmentSpreads(_node);
        for (var i = 0; i < spreads.length; i++) {
          var fragName = spreads[i].name.value;
          if (collectedNames[fragName] !== true) {
            collectedNames[fragName] = true;
            var fragment = this.getFragment(fragName);
            if (fragment) {
              fragments.push(fragment);
              nodesToVisit.push(fragment.selectionSet);
            }
          }
        }
      }
      this._recursivelyReferencedFragments.set(operation, fragments);
    }
    return fragments;
  };

  ValidationContext.prototype.getVariableUsages = function getVariableUsages(node) {
    var usages = this._variableUsages.get(node);
    if (!usages) {
      var newUsages = [];
      var typeInfo = new _TypeInfo.TypeInfo(this._schema);
      (0, _visitor.visit)(node, (0, _visitor.visitWithTypeInfo)(typeInfo, {
        VariableDefinition: function VariableDefinition() {
          return false;
        },
        Variable: function Variable(variable) {
          newUsages.push({ node: variable, type: typeInfo.getInputType() });
        }
      }));
      usages = newUsages;
      this._variableUsages.set(node, usages);
    }
    return usages;
  };

  ValidationContext.prototype.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {
    var usages = this._recursiveVariableUsages.get(operation);
    if (!usages) {
      usages = this.getVariableUsages(operation);
      var fragments = this.getRecursivelyReferencedFragments(operation);
      for (var i = 0; i < fragments.length; i++) {
        Array.prototype.push.apply(usages, this.getVariableUsages(fragments[i]));
      }
      this._recursiveVariableUsages.set(operation, usages);
    }
    return usages;
  };

  ValidationContext.prototype.getType = function getType() {
    return this._typeInfo.getType();
  };

  ValidationContext.prototype.getParentType = function getParentType() {
    return this._typeInfo.getParentType();
  };

  ValidationContext.prototype.getInputType = function getInputType() {
    return this._typeInfo.getInputType();
  };

  ValidationContext.prototype.getParentInputType = function getParentInputType() {
    return this._typeInfo.getParentInputType();
  };

  ValidationContext.prototype.getFieldDef = function getFieldDef() {
    return this._typeInfo.getFieldDef();
  };

  ValidationContext.prototype.getDirective = function getDirective() {
    return this._typeInfo.getDirective();
  };

  ValidationContext.prototype.getArgument = function getArgument() {
    return this._typeInfo.getArgument();
  };

  return ValidationContext;
}();

exports.default = ValidationContext;
},{"../error":94,"../language/kinds":121,"../language/visitor":127,"../type/schema":136,"../utilities/TypeInfo":138}],162:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VariablesInAllowedPositionRule = exports.VariablesDefaultValueAllowedRule = exports.VariablesAreInputTypesRule = exports.ValuesOfCorrectTypeRule = exports.UniqueVariableNamesRule = exports.UniqueOperationNamesRule = exports.UniqueInputFieldNamesRule = exports.UniqueFragmentNamesRule = exports.UniqueDirectivesPerLocationRule = exports.UniqueArgumentNamesRule = exports.SingleFieldSubscriptionsRule = exports.ScalarLeafsRule = exports.ProvidedNonNullArgumentsRule = exports.PossibleFragmentSpreadsRule = exports.OverlappingFieldsCanBeMergedRule = exports.NoUnusedVariablesRule = exports.NoUnusedFragmentsRule = exports.NoUndefinedVariablesRule = exports.NoFragmentCyclesRule = exports.LoneAnonymousOperationRule = exports.KnownTypeNamesRule = exports.KnownFragmentNamesRule = exports.KnownDirectivesRule = exports.KnownArgumentNamesRule = exports.FragmentsOnCompositeTypesRule = exports.FieldsOnCorrectTypeRule = exports.specifiedRules = exports.ValidationContext = exports.validate = undefined;

var _validate = require('./validate');

Object.defineProperty(exports, 'validate', {
  enumerable: true,
  get: function get() {
    return _validate.validate;
  }
});

var _specifiedRules = require('./specifiedRules');

Object.defineProperty(exports, 'specifiedRules', {
  enumerable: true,
  get: function get() {
    return _specifiedRules.specifiedRules;
  }
});

var _FieldsOnCorrectType = require('./rules/FieldsOnCorrectType');

Object.defineProperty(exports, 'FieldsOnCorrectTypeRule', {
  enumerable: true,
  get: function get() {
    return _FieldsOnCorrectType.FieldsOnCorrectType;
  }
});

var _FragmentsOnCompositeTypes = require('./rules/FragmentsOnCompositeTypes');

Object.defineProperty(exports, 'FragmentsOnCompositeTypesRule', {
  enumerable: true,
  get: function get() {
    return _FragmentsOnCompositeTypes.FragmentsOnCompositeTypes;
  }
});

var _KnownArgumentNames = require('./rules/KnownArgumentNames');

Object.defineProperty(exports, 'KnownArgumentNamesRule', {
  enumerable: true,
  get: function get() {
    return _KnownArgumentNames.KnownArgumentNames;
  }
});

var _KnownDirectives = require('./rules/KnownDirectives');

Object.defineProperty(exports, 'KnownDirectivesRule', {
  enumerable: true,
  get: function get() {
    return _KnownDirectives.KnownDirectives;
  }
});

var _KnownFragmentNames = require('./rules/KnownFragmentNames');

Object.defineProperty(exports, 'KnownFragmentNamesRule', {
  enumerable: true,
  get: function get() {
    return _KnownFragmentNames.KnownFragmentNames;
  }
});

var _KnownTypeNames = require('./rules/KnownTypeNames');

Object.defineProperty(exports, 'KnownTypeNamesRule', {
  enumerable: true,
  get: function get() {
    return _KnownTypeNames.KnownTypeNames;
  }
});

var _LoneAnonymousOperation = require('./rules/LoneAnonymousOperation');

Object.defineProperty(exports, 'LoneAnonymousOperationRule', {
  enumerable: true,
  get: function get() {
    return _LoneAnonymousOperation.LoneAnonymousOperation;
  }
});

var _NoFragmentCycles = require('./rules/NoFragmentCycles');

Object.defineProperty(exports, 'NoFragmentCyclesRule', {
  enumerable: true,
  get: function get() {
    return _NoFragmentCycles.NoFragmentCycles;
  }
});

var _NoUndefinedVariables = require('./rules/NoUndefinedVariables');

Object.defineProperty(exports, 'NoUndefinedVariablesRule', {
  enumerable: true,
  get: function get() {
    return _NoUndefinedVariables.NoUndefinedVariables;
  }
});

var _NoUnusedFragments = require('./rules/NoUnusedFragments');

Object.defineProperty(exports, 'NoUnusedFragmentsRule', {
  enumerable: true,
  get: function get() {
    return _NoUnusedFragments.NoUnusedFragments;
  }
});

var _NoUnusedVariables = require('./rules/NoUnusedVariables');

Object.defineProperty(exports, 'NoUnusedVariablesRule', {
  enumerable: true,
  get: function get() {
    return _NoUnusedVariables.NoUnusedVariables;
  }
});

var _OverlappingFieldsCanBeMerged = require('./rules/OverlappingFieldsCanBeMerged');

Object.defineProperty(exports, 'OverlappingFieldsCanBeMergedRule', {
  enumerable: true,
  get: function get() {
    return _OverlappingFieldsCanBeMerged.OverlappingFieldsCanBeMerged;
  }
});

var _PossibleFragmentSpreads = require('./rules/PossibleFragmentSpreads');

Object.defineProperty(exports, 'PossibleFragmentSpreadsRule', {
  enumerable: true,
  get: function get() {
    return _PossibleFragmentSpreads.PossibleFragmentSpreads;
  }
});

var _ProvidedNonNullArguments = require('./rules/ProvidedNonNullArguments');

Object.defineProperty(exports, 'ProvidedNonNullArgumentsRule', {
  enumerable: true,
  get: function get() {
    return _ProvidedNonNullArguments.ProvidedNonNullArguments;
  }
});

var _ScalarLeafs = require('./rules/ScalarLeafs');

Object.defineProperty(exports, 'ScalarLeafsRule', {
  enumerable: true,
  get: function get() {
    return _ScalarLeafs.ScalarLeafs;
  }
});

var _SingleFieldSubscriptions = require('./rules/SingleFieldSubscriptions');

Object.defineProperty(exports, 'SingleFieldSubscriptionsRule', {
  enumerable: true,
  get: function get() {
    return _SingleFieldSubscriptions.SingleFieldSubscriptions;
  }
});

var _UniqueArgumentNames = require('./rules/UniqueArgumentNames');

Object.defineProperty(exports, 'UniqueArgumentNamesRule', {
  enumerable: true,
  get: function get() {
    return _UniqueArgumentNames.UniqueArgumentNames;
  }
});

var _UniqueDirectivesPerLocation = require('./rules/UniqueDirectivesPerLocation');

Object.defineProperty(exports, 'UniqueDirectivesPerLocationRule', {
  enumerable: true,
  get: function get() {
    return _UniqueDirectivesPerLocation.UniqueDirectivesPerLocation;
  }
});

var _UniqueFragmentNames = require('./rules/UniqueFragmentNames');

Object.defineProperty(exports, 'UniqueFragmentNamesRule', {
  enumerable: true,
  get: function get() {
    return _UniqueFragmentNames.UniqueFragmentNames;
  }
});

var _UniqueInputFieldNames = require('./rules/UniqueInputFieldNames');

Object.defineProperty(exports, 'UniqueInputFieldNamesRule', {
  enumerable: true,
  get: function get() {
    return _UniqueInputFieldNames.UniqueInputFieldNames;
  }
});

var _UniqueOperationNames = require('./rules/UniqueOperationNames');

Object.defineProperty(exports, 'UniqueOperationNamesRule', {
  enumerable: true,
  get: function get() {
    return _UniqueOperationNames.UniqueOperationNames;
  }
});

var _UniqueVariableNames = require('./rules/UniqueVariableNames');

Object.defineProperty(exports, 'UniqueVariableNamesRule', {
  enumerable: true,
  get: function get() {
    return _UniqueVariableNames.UniqueVariableNames;
  }
});

var _ValuesOfCorrectType = require('./rules/ValuesOfCorrectType');

Object.defineProperty(exports, 'ValuesOfCorrectTypeRule', {
  enumerable: true,
  get: function get() {
    return _ValuesOfCorrectType.ValuesOfCorrectType;
  }
});

var _VariablesAreInputTypes = require('./rules/VariablesAreInputTypes');

Object.defineProperty(exports, 'VariablesAreInputTypesRule', {
  enumerable: true,
  get: function get() {
    return _VariablesAreInputTypes.VariablesAreInputTypes;
  }
});

var _VariablesDefaultValueAllowed = require('./rules/VariablesDefaultValueAllowed');

Object.defineProperty(exports, 'VariablesDefaultValueAllowedRule', {
  enumerable: true,
  get: function get() {
    return _VariablesDefaultValueAllowed.VariablesDefaultValueAllowed;
  }
});

var _VariablesInAllowedPosition = require('./rules/VariablesInAllowedPosition');

Object.defineProperty(exports, 'VariablesInAllowedPositionRule', {
  enumerable: true,
  get: function get() {
    return _VariablesInAllowedPosition.VariablesInAllowedPosition;
  }
});

var _ValidationContext = require('./ValidationContext');

var _ValidationContext2 = _interopRequireDefault(_ValidationContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.ValidationContext = _ValidationContext2.default;

// https://github.com/tc39/proposal-export-default-from
},{"./ValidationContext":161,"./rules/FieldsOnCorrectType":164,"./rules/FragmentsOnCompositeTypes":165,"./rules/KnownArgumentNames":166,"./rules/KnownDirectives":167,"./rules/KnownFragmentNames":168,"./rules/KnownTypeNames":169,"./rules/LoneAnonymousOperation":170,"./rules/NoFragmentCycles":171,"./rules/NoUndefinedVariables":172,"./rules/NoUnusedFragments":173,"./rules/NoUnusedVariables":174,"./rules/OverlappingFieldsCanBeMerged":175,"./rules/PossibleFragmentSpreads":176,"./rules/ProvidedNonNullArguments":177,"./rules/ScalarLeafs":178,"./rules/SingleFieldSubscriptions":179,"./rules/UniqueArgumentNames":180,"./rules/UniqueDirectivesPerLocation":181,"./rules/UniqueFragmentNames":182,"./rules/UniqueInputFieldNames":183,"./rules/UniqueOperationNames":184,"./rules/UniqueVariableNames":185,"./rules/ValuesOfCorrectType":186,"./rules/VariablesAreInputTypes":187,"./rules/VariablesDefaultValueAllowed":188,"./rules/VariablesInAllowedPosition":189,"./specifiedRules":190,"./validate":191}],163:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonExecutableDefinitionMessage = nonExecutableDefinitionMessage;
exports.ExecutableDefinitions = ExecutableDefinitions;

var _error = require('../../error');

var _kinds = require('../../language/kinds');

function nonExecutableDefinitionMessage(defName) {
  return 'The ' + defName + ' definition is not executable.';
}

/**
 * Executable definitions
 *
 * A GraphQL document is only valid for execution if all definitions are either
 * operation or fragment definitions.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function ExecutableDefinitions(context) {
  return {
    Document: function Document(node) {
      node.definitions.forEach(function (definition) {
        if (definition.kind !== _kinds.Kind.OPERATION_DEFINITION && definition.kind !== _kinds.Kind.FRAGMENT_DEFINITION) {
          context.reportError(new _error.GraphQLError(nonExecutableDefinitionMessage(definition.kind === _kinds.Kind.SCHEMA_DEFINITION ? 'schema' : definition.name.value), [definition]));
        }
      });
      return false;
    }
  };
}
},{"../../error":94,"../../language/kinds":121}],164:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.undefinedFieldMessage = undefinedFieldMessage;
exports.FieldsOnCorrectType = FieldsOnCorrectType;

var _error = require('../../error');

var _suggestionList = require('../../jsutils/suggestionList');

var _suggestionList2 = _interopRequireDefault(_suggestionList);

var _quotedOrList = require('../../jsutils/quotedOrList');

var _quotedOrList2 = _interopRequireDefault(_quotedOrList);

var _definition = require('../../type/definition');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {
  var message = 'Cannot query field "' + fieldName + '" on type "' + type + '".';
  if (suggestedTypeNames.length !== 0) {
    var suggestions = (0, _quotedOrList2.default)(suggestedTypeNames);
    message += ' Did you mean to use an inline fragment on ' + suggestions + '?';
  } else if (suggestedFieldNames.length !== 0) {
    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedFieldNames) + '?';
  }
  return message;
}

/**
 * Fields on correct type
 *
 * A GraphQL document is only valid if all fields selected are defined by the
 * parent type, or are an allowed meta field such as __typename.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function FieldsOnCorrectType(context) {
  return {
    Field: function Field(node) {
      var type = context.getParentType();
      if (type) {
        var fieldDef = context.getFieldDef();
        if (!fieldDef) {
          // This field doesn't exist, lets look for suggestions.
          var schema = context.getSchema();
          var fieldName = node.name.value;
          // First determine if there are any suggested types to condition on.
          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName);
          // If there are no suggested types, then perhaps this was a typo?
          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName);

          // Report an error, including helpful suggestions.
          context.reportError(new _error.GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), [node]));
        }
      }
    }
  };
}

/**
 * Go through all of the implementations of type, as well as the interfaces
 * that they implement. If any of those types include the provided field,
 * suggest them, sorted by how often the type is referenced,  starting
 * with Interfaces.
 */
function getSuggestedTypeNames(schema, type, fieldName) {
  if ((0, _definition.isAbstractType)(type)) {
    var suggestedObjectTypes = [];
    var interfaceUsageCount = Object.create(null);
    schema.getPossibleTypes(type).forEach(function (possibleType) {
      if (!possibleType.getFields()[fieldName]) {
        return;
      }
      // This object type defines this field.
      suggestedObjectTypes.push(possibleType.name);
      possibleType.getInterfaces().forEach(function (possibleInterface) {
        if (!possibleInterface.getFields()[fieldName]) {
          return;
        }
        // This interface type defines this field.
        interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;
      });
    });

    // Suggest interface types based on how common they are.
    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {
      return interfaceUsageCount[b] - interfaceUsageCount[a];
    });

    // Suggest both interface and object types.
    return suggestedInterfaceTypes.concat(suggestedObjectTypes);
  }

  // Otherwise, must be an Object type, which does not have possible fields.
  return [];
}

/**
 * For the field name provided, determine if there are any similar field names
 * that may be the result of a typo.
 */
function getSuggestedFieldNames(schema, type, fieldName) {
  if ((0, _definition.isObjectType)(type) || (0, _definition.isInterfaceType)(type)) {
    var possibleFieldNames = Object.keys(type.getFields());
    return (0, _suggestionList2.default)(fieldName, possibleFieldNames);
  }
  // Otherwise, must be a Union type, which does not define fields.
  return [];
}
},{"../../error":94,"../../jsutils/quotedOrList":116,"../../jsutils/suggestionList":117,"../../type/definition":131}],165:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inlineFragmentOnNonCompositeErrorMessage = inlineFragmentOnNonCompositeErrorMessage;
exports.fragmentOnNonCompositeErrorMessage = fragmentOnNonCompositeErrorMessage;
exports.FragmentsOnCompositeTypes = FragmentsOnCompositeTypes;

var _error = require('../../error');

var _printer = require('../../language/printer');

var _definition = require('../../type/definition');

var _typeFromAST = require('../../utilities/typeFromAST');

function inlineFragmentOnNonCompositeErrorMessage(type) {
  return 'Fragment cannot condition on non composite type "' + String(type) + '".';
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */

function fragmentOnNonCompositeErrorMessage(fragName, type) {
  return 'Fragment "' + fragName + '" cannot condition on non composite ' + ('type "' + String(type) + '".');
}

/**
 * Fragments on composite type
 *
 * Fragments use a type condition to determine if they apply, since fragments
 * can only be spread into a composite type (object, interface, or union), the
 * type condition must also be a composite type.
 */
function FragmentsOnCompositeTypes(context) {
  return {
    InlineFragment: function InlineFragment(node) {
      var typeCondition = node.typeCondition;
      if (typeCondition) {
        var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition);
        if (type && !(0, _definition.isCompositeType)(type)) {
          context.reportError(new _error.GraphQLError(inlineFragmentOnNonCompositeErrorMessage((0, _printer.print)(typeCondition)), [typeCondition]));
        }
      }
    },
    FragmentDefinition: function FragmentDefinition(node) {
      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.typeCondition);
      if (type && !(0, _definition.isCompositeType)(type)) {
        context.reportError(new _error.GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, (0, _printer.print)(node.typeCondition)), [node.typeCondition]));
      }
    }
  };
}
},{"../../error":94,"../../language/printer":125,"../../type/definition":131,"../../utilities/typeFromAST":158}],166:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unknownArgMessage = unknownArgMessage;
exports.unknownDirectiveArgMessage = unknownDirectiveArgMessage;
exports.KnownArgumentNames = KnownArgumentNames;

var _error = require('../../error');

var _suggestionList = require('../../jsutils/suggestionList');

var _suggestionList2 = _interopRequireDefault(_suggestionList);

var _quotedOrList = require('../../jsutils/quotedOrList');

var _quotedOrList2 = _interopRequireDefault(_quotedOrList);

var _kinds = require('../../language/kinds');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function unknownArgMessage(argName, fieldName, typeName, suggestedArgs) {
  var message = 'Unknown argument "' + argName + '" on field "' + fieldName + '" of ' + ('type "' + typeName + '".');
  if (suggestedArgs.length) {
    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedArgs) + '?';
  }
  return message;
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */

function unknownDirectiveArgMessage(argName, directiveName, suggestedArgs) {
  var message = 'Unknown argument "' + argName + '" on directive "@' + directiveName + '".';
  if (suggestedArgs.length) {
    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedArgs) + '?';
  }
  return message;
}

/**
 * Known argument names
 *
 * A GraphQL field is only valid if all supplied arguments are defined by
 * that field.
 */
function KnownArgumentNames(context) {
  return {
    Argument: function Argument(node, key, parent, path, ancestors) {
      var argDef = context.getArgument();
      if (!argDef) {
        var argumentOf = ancestors[ancestors.length - 1];
        if (argumentOf.kind === _kinds.Kind.FIELD) {
          var fieldDef = context.getFieldDef();
          var parentType = context.getParentType();
          if (fieldDef && parentType) {
            context.reportError(new _error.GraphQLError(unknownArgMessage(node.name.value, fieldDef.name, parentType.name, (0, _suggestionList2.default)(node.name.value, fieldDef.args.map(function (arg) {
              return arg.name;
            }))), [node]));
          }
        } else if (argumentOf.kind === _kinds.Kind.DIRECTIVE) {
          var directive = context.getDirective();
          if (directive) {
            context.reportError(new _error.GraphQLError(unknownDirectiveArgMessage(node.name.value, directive.name, (0, _suggestionList2.default)(node.name.value, directive.args.map(function (arg) {
              return arg.name;
            }))), [node]));
          }
        }
      }
    }
  };
}
},{"../../error":94,"../../jsutils/quotedOrList":116,"../../jsutils/suggestionList":117,"../../language/kinds":121}],167:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unknownDirectiveMessage = unknownDirectiveMessage;
exports.misplacedDirectiveMessage = misplacedDirectiveMessage;
exports.KnownDirectives = KnownDirectives;

var _error = require('../../error');

var _find = require('../../jsutils/find');

var _find2 = _interopRequireDefault(_find);

var _kinds = require('../../language/kinds');

var _directiveLocation = require('../../language/directiveLocation');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function unknownDirectiveMessage(directiveName) {
  return 'Unknown directive "' + directiveName + '".';
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */

function misplacedDirectiveMessage(directiveName, location) {
  return 'Directive "' + directiveName + '" may not be used on ' + location + '.';
}

/**
 * Known directives
 *
 * A GraphQL document is only valid if all `@directives` are known by the
 * schema and legally positioned.
 */
function KnownDirectives(context) {
  return {
    Directive: function Directive(node, key, parent, path, ancestors) {
      var directiveDef = (0, _find2.default)(context.getSchema().getDirectives(), function (def) {
        return def.name === node.name.value;
      });
      if (!directiveDef) {
        context.reportError(new _error.GraphQLError(unknownDirectiveMessage(node.name.value), [node]));
        return;
      }
      var candidateLocation = getDirectiveLocationForASTPath(ancestors);
      if (candidateLocation && directiveDef.locations.indexOf(candidateLocation) === -1) {
        context.reportError(new _error.GraphQLError(misplacedDirectiveMessage(node.name.value, candidateLocation), [node]));
      }
    }
  };
}

function getDirectiveLocationForASTPath(ancestors) {
  var appliedTo = ancestors[ancestors.length - 1];
  if (!Array.isArray(appliedTo)) {
    switch (appliedTo.kind) {
      case _kinds.Kind.OPERATION_DEFINITION:
        switch (appliedTo.operation) {
          case 'query':
            return _directiveLocation.DirectiveLocation.QUERY;
          case 'mutation':
            return _directiveLocation.DirectiveLocation.MUTATION;
          case 'subscription':
            return _directiveLocation.DirectiveLocation.SUBSCRIPTION;
        }
        break;
      case _kinds.Kind.FIELD:
        return _directiveLocation.DirectiveLocation.FIELD;
      case _kinds.Kind.FRAGMENT_SPREAD:
        return _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD;
      case _kinds.Kind.INLINE_FRAGMENT:
        return _directiveLocation.DirectiveLocation.INLINE_FRAGMENT;
      case _kinds.Kind.FRAGMENT_DEFINITION:
        return _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION;
      case _kinds.Kind.SCHEMA_DEFINITION:
        return _directiveLocation.DirectiveLocation.SCHEMA;
      case _kinds.Kind.SCALAR_TYPE_DEFINITION:
      case _kinds.Kind.SCALAR_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.SCALAR;
      case _kinds.Kind.OBJECT_TYPE_DEFINITION:
      case _kinds.Kind.OBJECT_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.OBJECT;
      case _kinds.Kind.FIELD_DEFINITION:
        return _directiveLocation.DirectiveLocation.FIELD_DEFINITION;
      case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
      case _kinds.Kind.INTERFACE_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.INTERFACE;
      case _kinds.Kind.UNION_TYPE_DEFINITION:
      case _kinds.Kind.UNION_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.UNION;
      case _kinds.Kind.ENUM_TYPE_DEFINITION:
      case _kinds.Kind.ENUM_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.ENUM;
      case _kinds.Kind.ENUM_VALUE_DEFINITION:
        return _directiveLocation.DirectiveLocation.ENUM_VALUE;
      case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
      case _kinds.Kind.INPUT_OBJECT_TYPE_EXTENSION:
        return _directiveLocation.DirectiveLocation.INPUT_OBJECT;
      case _kinds.Kind.INPUT_VALUE_DEFINITION:
        var parentNode = ancestors[ancestors.length - 3];
        return parentNode.kind === _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION ? _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION : _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION;
    }
  }
}
},{"../../error":94,"../../jsutils/find":103,"../../language/directiveLocation":119,"../../language/kinds":121}],168:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unknownFragmentMessage = unknownFragmentMessage;
exports.KnownFragmentNames = KnownFragmentNames;

var _error = require('../../error');

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function unknownFragmentMessage(fragName) {
  return 'Unknown fragment "' + fragName + '".';
}

/**
 * Known fragment names
 *
 * A GraphQL document is only valid if all `...Fragment` fragment spreads refer
 * to fragments defined in the same document.
 */
function KnownFragmentNames(context) {
  return {
    FragmentSpread: function FragmentSpread(node) {
      var fragmentName = node.name.value;
      var fragment = context.getFragment(fragmentName);
      if (!fragment) {
        context.reportError(new _error.GraphQLError(unknownFragmentMessage(fragmentName), [node.name]));
      }
    }
  };
}
},{"../../error":94}],169:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unknownTypeMessage = unknownTypeMessage;
exports.KnownTypeNames = KnownTypeNames;

var _error = require('../../error');

var _suggestionList = require('../../jsutils/suggestionList');

var _suggestionList2 = _interopRequireDefault(_suggestionList);

var _quotedOrList = require('../../jsutils/quotedOrList');

var _quotedOrList2 = _interopRequireDefault(_quotedOrList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function unknownTypeMessage(typeName, suggestedTypes) {
  var message = 'Unknown type "' + typeName + '".';
  if (suggestedTypes.length) {
    message += ' Did you mean ' + (0, _quotedOrList2.default)(suggestedTypes) + '?';
  }
  return message;
}

/**
 * Known type names
 *
 * A GraphQL document is only valid if referenced types (specifically
 * variable definitions and fragment conditions) are defined by the type schema.
 */
function KnownTypeNames(context) {
  return {
    // TODO: when validating IDL, re-enable these. Experimental version does not
    // add unreferenced types, resulting in false-positive errors. Squelched
    // errors for now.
    ObjectTypeDefinition: function ObjectTypeDefinition() {
      return false;
    },
    InterfaceTypeDefinition: function InterfaceTypeDefinition() {
      return false;
    },
    UnionTypeDefinition: function UnionTypeDefinition() {
      return false;
    },
    InputObjectTypeDefinition: function InputObjectTypeDefinition() {
      return false;
    },
    NamedType: function NamedType(node) {
      var schema = context.getSchema();
      var typeName = node.name.value;
      var type = schema.getType(typeName);
      if (!type) {
        context.reportError(new _error.GraphQLError(unknownTypeMessage(typeName, (0, _suggestionList2.default)(typeName, Object.keys(schema.getTypeMap()))), [node]));
      }
    }
  };
}
},{"../../error":94,"../../jsutils/quotedOrList":116,"../../jsutils/suggestionList":117}],170:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.anonOperationNotAloneMessage = anonOperationNotAloneMessage;
exports.LoneAnonymousOperation = LoneAnonymousOperation;

var _error = require('../../error');

var _kinds = require('../../language/kinds');

function anonOperationNotAloneMessage() {
  return 'This anonymous operation must be the only defined operation.';
}

/**
 * Lone anonymous operation
 *
 * A GraphQL document is only valid if when it contains an anonymous operation
 * (the query short-hand) that it contains only that one operation definition.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function LoneAnonymousOperation(context) {
  var operationCount = 0;
  return {
    Document: function Document(node) {
      operationCount = node.definitions.filter(function (definition) {
        return definition.kind === _kinds.Kind.OPERATION_DEFINITION;
      }).length;
    },
    OperationDefinition: function OperationDefinition(node) {
      if (!node.name && operationCount > 1) {
        context.reportError(new _error.GraphQLError(anonOperationNotAloneMessage(), [node]));
      }
    }
  };
}
},{"../../error":94,"../../language/kinds":121}],171:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cycleErrorMessage = cycleErrorMessage;
exports.NoFragmentCycles = NoFragmentCycles;

var _error = require('../../error');

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function cycleErrorMessage(fragName, spreadNames) {
  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';
  return 'Cannot spread fragment "' + fragName + '" within itself' + via + '.';
}

function NoFragmentCycles(context) {
  // Tracks already visited fragments to maintain O(N) and to ensure that cycles
  // are not redundantly reported.
  var visitedFrags = Object.create(null);

  // Array of AST nodes used to produce meaningful errors
  var spreadPath = [];

  // Position in the spread path
  var spreadPathIndexByName = Object.create(null);

  return {
    OperationDefinition: function OperationDefinition() {
      return false;
    },
    FragmentDefinition: function FragmentDefinition(node) {
      if (!visitedFrags[node.name.value]) {
        detectCycleRecursive(node);
      }
      return false;
    }
  };

  // This does a straight-forward DFS to find cycles.
  // It does not terminate when a cycle was found but continues to explore
  // the graph to find all possible cycles.
  function detectCycleRecursive(fragment) {
    var fragmentName = fragment.name.value;
    visitedFrags[fragmentName] = true;

    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);
    if (spreadNodes.length === 0) {
      return;
    }

    spreadPathIndexByName[fragmentName] = spreadPath.length;

    for (var i = 0; i < spreadNodes.length; i++) {
      var spreadNode = spreadNodes[i];
      var spreadName = spreadNode.name.value;
      var cycleIndex = spreadPathIndexByName[spreadName];

      if (cycleIndex === undefined) {
        spreadPath.push(spreadNode);
        if (!visitedFrags[spreadName]) {
          var spreadFragment = context.getFragment(spreadName);
          if (spreadFragment) {
            detectCycleRecursive(spreadFragment);
          }
        }
        spreadPath.pop();
      } else {
        var cyclePath = spreadPath.slice(cycleIndex);
        context.reportError(new _error.GraphQLError(cycleErrorMessage(spreadName, cyclePath.map(function (s) {
          return s.name.value;
        })), cyclePath.concat(spreadNode)));
      }
    }

    spreadPathIndexByName[fragmentName] = undefined;
  }
}
},{"../../error":94}],172:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.undefinedVarMessage = undefinedVarMessage;
exports.NoUndefinedVariables = NoUndefinedVariables;

var _error = require('../../error');

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function undefinedVarMessage(varName, opName) {
  return opName ? 'Variable "$' + varName + '" is not defined by operation "' + opName + '".' : 'Variable "$' + varName + '" is not defined.';
}

/**
 * No undefined variables
 *
 * A GraphQL operation is only valid if all variables encountered, both directly
 * and via fragment spreads, are defined by that operation.
 */
function NoUndefinedVariables(context) {
  var variableNameDefined = Object.create(null);

  return {
    OperationDefinition: {
      enter: function enter() {
        variableNameDefined = Object.create(null);
      },
      leave: function leave(operation) {
        var usages = context.getRecursiveVariableUsages(operation);

        usages.forEach(function (_ref) {
          var node = _ref.node;

          var varName = node.name.value;
          if (variableNameDefined[varName] !== true) {
            context.reportError(new _error.GraphQLError(undefinedVarMessage(varName, operation.name && operation.name.value), [node, operation]));
          }
        });
      }
    },
    VariableDefinition: function VariableDefinition(node) {
      variableNameDefined[node.variable.name.value] = true;
    }
  };
}
},{"../../error":94}],173:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unusedFragMessage = unusedFragMessage;
exports.NoUnusedFragments = NoUnusedFragments;

var _error = require('../../error');

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function unusedFragMessage(fragName) {
  return 'Fragment "' + fragName + '" is never used.';
}

/**
 * No unused fragments
 *
 * A GraphQL document is only valid if all fragment definitions are spread
 * within operations, or spread within other fragments spread within operations.
 */
function NoUnusedFragments(context) {
  var operationDefs = [];
  var fragmentDefs = [];

  return {
    OperationDefinition: function OperationDefinition(node) {
      operationDefs.push(node);
      return false;
    },
    FragmentDefinition: function FragmentDefinition(node) {
      fragmentDefs.push(node);
      return false;
    },

    Document: {
      leave: function leave() {
        var fragmentNameUsed = Object.create(null);
        operationDefs.forEach(function (operation) {
          context.getRecursivelyReferencedFragments(operation).forEach(function (fragment) {
            fragmentNameUsed[fragment.name.value] = true;
          });
        });

        fragmentDefs.forEach(function (fragmentDef) {
          var fragName = fragmentDef.name.value;
          if (fragmentNameUsed[fragName] !== true) {
            context.reportError(new _error.GraphQLError(unusedFragMessage(fragName), [fragmentDef]));
          }
        });
      }
    }
  };
}
},{"../../error":94}],174:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unusedVariableMessage = unusedVariableMessage;
exports.NoUnusedVariables = NoUnusedVariables;

var _error = require('../../error');

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function unusedVariableMessage(varName, opName) {
  return opName ? 'Variable "$' + varName + '" is never used in operation "' + opName + '".' : 'Variable "$' + varName + '" is never used.';
}

/**
 * No unused variables
 *
 * A GraphQL operation is only valid if all variables defined by an operation
 * are used, either directly or within a spread fragment.
 */
function NoUnusedVariables(context) {
  var variableDefs = [];

  return {
    OperationDefinition: {
      enter: function enter() {
        variableDefs = [];
      },
      leave: function leave(operation) {
        var variableNameUsed = Object.create(null);
        var usages = context.getRecursiveVariableUsages(operation);
        var opName = operation.name ? operation.name.value : null;

        usages.forEach(function (_ref) {
          var node = _ref.node;

          variableNameUsed[node.name.value] = true;
        });

        variableDefs.forEach(function (variableDef) {
          var variableName = variableDef.variable.name.value;
          if (variableNameUsed[variableName] !== true) {
            context.reportError(new _error.GraphQLError(unusedVariableMessage(variableName, opName), [variableDef]));
          }
        });
      }
    },
    VariableDefinition: function VariableDefinition(def) {
      variableDefs.push(def);
    }
  };
}
},{"../../error":94}],175:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fieldsConflictMessage = fieldsConflictMessage;
exports.OverlappingFieldsCanBeMerged = OverlappingFieldsCanBeMerged;

var _error = require('../../error');

var _find = require('../../jsutils/find');

var _find2 = _interopRequireDefault(_find);

var _kinds = require('../../language/kinds');

var _printer = require('../../language/printer');

var _definition = require('../../type/definition');

var _typeFromAST = require('../../utilities/typeFromAST');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } /**
                                                                                                                                                           * Copyright (c) 2015-present, Facebook, Inc.
                                                                                                                                                           *
                                                                                                                                                           * This source code is licensed under the MIT license found in the
                                                                                                                                                           * LICENSE file in the root directory of this source tree.
                                                                                                                                                           *
                                                                                                                                                           *  strict
                                                                                                                                                           */

function fieldsConflictMessage(responseName, reason) {
  return 'Fields "' + responseName + '" conflict because ' + reasonMessage(reason) + '. Use different aliases on the fields to fetch both if this was ' + 'intentional.';
}

function reasonMessage(reason) {
  if (Array.isArray(reason)) {
    return reason.map(function (_ref) {
      var responseName = _ref[0],
          subreason = _ref[1];
      return 'subfields "' + responseName + '" conflict because ' + reasonMessage(subreason);
    }).join(' and ');
  }
  return reason;
}

/**
 * Overlapping fields can be merged
 *
 * A selection set is only valid if all fields (including spreading any
 * fragments) either correspond to distinct response names or can be merged
 * without ambiguity.
 */
function OverlappingFieldsCanBeMerged(context) {
  // A memoization for when two fragments are compared "between" each other for
  // conflicts. Two fragments may be compared many times, so memoizing this can
  // dramatically improve the performance of this validator.
  var comparedFragmentPairs = new PairSet();

  // A cache for the "field map" and list of fragment names found in any given
  // selection set. Selection sets may be asked for this information multiple
  // times, so this improves the performance of this validator.
  var cachedFieldsAndFragmentNames = new Map();

  return {
    SelectionSet: function SelectionSet(selectionSet) {
      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);
      conflicts.forEach(function (_ref2) {
        var _ref2$ = _ref2[0],
            responseName = _ref2$[0],
            reason = _ref2$[1],
            fields1 = _ref2[1],
            fields2 = _ref2[2];
        return context.reportError(new _error.GraphQLError(fieldsConflictMessage(responseName, reason), fields1.concat(fields2)));
      });
    }
  };
}
// Field name and reason.

// Reason is a string, or a nested list of conflicts.

// Tuple defining a field node in a context.

// Map of array of those.


/**
 * Algorithm:
 *
 * Conflicts occur when two fields exist in a query which will produce the same
 * response name, but represent differing values, thus creating a conflict.
 * The algorithm below finds all conflicts via making a series of comparisons
 * between fields. In order to compare as few fields as possible, this makes
 * a series of comparisons "within" sets of fields and "between" sets of fields.
 *
 * Given any selection set, a collection produces both a set of fields by
 * also including all inline fragments, as well as a list of fragments
 * referenced by fragment spreads.
 *
 * A) Each selection set represented in the document first compares "within" its
 * collected set of fields, finding any conflicts between every pair of
 * overlapping fields.
 * Note: This is the *only time* that a the fields "within" a set are compared
 * to each other. After this only fields "between" sets are compared.
 *
 * B) Also, if any fragment is referenced in a selection set, then a
 * comparison is made "between" the original set of fields and the
 * referenced fragment.
 *
 * C) Also, if multiple fragments are referenced, then comparisons
 * are made "between" each referenced fragment.
 *
 * D) When comparing "between" a set of fields and a referenced fragment, first
 * a comparison is made between each field in the original set of fields and
 * each field in the the referenced set of fields.
 *
 * E) Also, if any fragment is referenced in the referenced selection set,
 * then a comparison is made "between" the original set of fields and the
 * referenced fragment (recursively referring to step D).
 *
 * F) When comparing "between" two fragments, first a comparison is made between
 * each field in the first referenced set of fields and each field in the the
 * second referenced set of fields.
 *
 * G) Also, any fragments referenced by the first must be compared to the
 * second, and any fragments referenced by the second must be compared to the
 * first (recursively referring to step F).
 *
 * H) When comparing two fields, if both have selection sets, then a comparison
 * is made "between" both selection sets, first comparing the set of fields in
 * the first selection set with the set of fields in the second.
 *
 * I) Also, if any fragment is referenced in either selection set, then a
 * comparison is made "between" the other set of fields and the
 * referenced fragment.
 *
 * J) Also, if two fragments are referenced in both selection sets, then a
 * comparison is made "between" the two fragments.
 *
 */

// Find all conflicts found "within" a selection set, including those found
// via spreading in fragments. Called when visiting each SelectionSet in the
// GraphQL Document.
function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
  var conflicts = [];

  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),
      fieldMap = _getFieldsAndFragment[0],
      fragmentNames = _getFieldsAndFragment[1];

  // (A) Find find all conflicts "within" the fields of this selection set.
  // Note: this is the *only place* `collectConflictsWithin` is called.


  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);

  if (fragmentNames.length !== 0) {
    // (B) Then collect conflicts between these fields and those represented by
    // each spread fragment name found.
    var comparedFragments = Object.create(null);
    for (var i = 0; i < fragmentNames.length; i++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, false, fieldMap, fragmentNames[i]);
      // (C) Then compare this fragment with all other fragments found in this
      // selection set to collect conflicts between fragments spread together.
      // This compares each item in the list of fragment names to every other
      // item in that same list (except for itself).
      for (var j = i + 1; j < fragmentNames.length; j++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);
      }
    }
  }
  return conflicts;
}

// Collect all conflicts found between a set of fields and a fragment reference
// including via spreading in any nested fragments.
function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
  // Memoize so a fragment is not compared for conflicts more than once.
  if (comparedFragments[fragmentName]) {
    return;
  }
  comparedFragments[fragmentName] = true;

  var fragment = context.getFragment(fragmentName);
  if (!fragment) {
    return;
  }

  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),
      fieldMap2 = _getReferencedFieldsA[0],
      fragmentNames2 = _getReferencedFieldsA[1];

  // Do not compare a fragment's fieldMap to itself.


  if (fieldMap === fieldMap2) {
    return;
  }

  // (D) First collect any conflicts between the provided collection of fields
  // and the collection of fields represented by the given fragment.
  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2);

  // (E) Then collect any conflicts between the provided collection of fields
  // and any fragment names found in the given fragment.
  for (var i = 0; i < fragmentNames2.length; i++) {
    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);
  }
}

// Collect all conflicts found between two fragments, including via spreading in
// any nested fragments.
function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
  // No need to compare a fragment to itself.
  if (fragmentName1 === fragmentName2) {
    return;
  }

  // Memoize so two fragments are not compared for conflicts more than once.
  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {
    return;
  }
  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);

  var fragment1 = context.getFragment(fragmentName1);
  var fragment2 = context.getFragment(fragmentName2);
  if (!fragment1 || !fragment2) {
    return;
  }

  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),
      fieldMap1 = _getReferencedFieldsA2[0],
      fragmentNames1 = _getReferencedFieldsA2[1];

  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),
      fieldMap2 = _getReferencedFieldsA3[0],
      fragmentNames2 = _getReferencedFieldsA3[1];

  // (F) First, collect all conflicts between these two collections of fields
  // (not including any nested fragments).


  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);

  // (G) Then collect conflicts between the first fragment and any nested
  // fragments spread in the second fragment.
  for (var j = 0; j < fragmentNames2.length; j++) {
    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);
  }

  // (G) Then collect conflicts between the second fragment and any nested
  // fragments spread in the first fragment.
  for (var i = 0; i < fragmentNames1.length; i++) {
    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);
  }
}

// Find all conflicts found between two selection sets, including those found
// via spreading in fragments. Called when determining if conflicts exist
// between the sub-fields of two overlapping fields.
function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
  var conflicts = [];

  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),
      fieldMap1 = _getFieldsAndFragment2[0],
      fragmentNames1 = _getFieldsAndFragment2[1];

  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),
      fieldMap2 = _getFieldsAndFragment3[0],
      fragmentNames2 = _getFieldsAndFragment3[1];

  // (H) First, collect all conflicts between these two collections of field.


  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);

  // (I) Then collect conflicts between the first collection of fields and
  // those referenced by each fragment name associated with the second.
  if (fragmentNames2.length !== 0) {
    var comparedFragments = Object.create(null);
    for (var j = 0; j < fragmentNames2.length; j++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);
    }
  }

  // (I) Then collect conflicts between the second collection of fields and
  // those referenced by each fragment name associated with the first.
  if (fragmentNames1.length !== 0) {
    var _comparedFragments = Object.create(null);
    for (var i = 0; i < fragmentNames1.length; i++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, _comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);
    }
  }

  // (J) Also collect conflicts between any fragment names by the first and
  // fragment names by the second. This compares each item in the first set of
  // names to each item in the second set of names.
  for (var _i = 0; _i < fragmentNames1.length; _i++) {
    for (var _j = 0; _j < fragmentNames2.length; _j++) {
      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i], fragmentNames2[_j]);
    }
  }
  return conflicts;
}

// Collect all Conflicts "within" one collection of fields.
function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
  // A field map is a keyed collection, where each key represents a response
  // name and the value at that key is a list of all fields which provide that
  // response name. For every response name, if there are multiple fields, they
  // must be compared to find a potential conflict.
  Object.keys(fieldMap).forEach(function (responseName) {
    var fields = fieldMap[responseName];
    // This compares every field in the list to every other field in this list
    // (except to itself). If the list only has one item, nothing needs to
    // be compared.
    if (fields.length > 1) {
      for (var i = 0; i < fields.length; i++) {
        for (var j = i + 1; j < fields.length; j++) {
          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive
          responseName, fields[i], fields[j]);
          if (conflict) {
            conflicts.push(conflict);
          }
        }
      }
    }
  });
}

// Collect all Conflicts between two collections of fields. This is similar to,
// but different from the `collectConflictsWithin` function above. This check
// assumes that `collectConflictsWithin` has already been called on each
// provided collection of fields. This is true because this validator traverses
// each individual selection set.
function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
  // A field map is a keyed collection, where each key represents a response
  // name and the value at that key is a list of all fields which provide that
  // response name. For any response name which appears in both provided field
  // maps, each field from the first field map must be compared to every field
  // in the second field map to find potential conflicts.
  Object.keys(fieldMap1).forEach(function (responseName) {
    var fields2 = fieldMap2[responseName];
    if (fields2) {
      var fields1 = fieldMap1[responseName];
      for (var i = 0; i < fields1.length; i++) {
        for (var j = 0; j < fields2.length; j++) {
          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);
          if (conflict) {
            conflicts.push(conflict);
          }
        }
      }
    }
  });
}

// Determines if there is a conflict between two particular fields, including
// comparing their sub-fields.
function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
  var parentType1 = field1[0],
      node1 = field1[1],
      def1 = field1[2];
  var parentType2 = field2[0],
      node2 = field2[1],
      def2 = field2[2];

  // If it is known that two fields could not possibly apply at the same
  // time, due to the parent types, then it is safe to permit them to diverge
  // in aliased field or arguments used as they will not present any ambiguity
  // by differing.
  // It is known that two parent types could never overlap if they are
  // different Object types. Interface or Union types might overlap - if not
  // in the current state of the schema, then perhaps in some future version,
  // thus may not safely diverge.

  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && (0, _definition.isObjectType)(parentType1) && (0, _definition.isObjectType)(parentType2);

  // The return type for each field.
  var type1 = def1 && def1.type;
  var type2 = def2 && def2.type;

  if (!areMutuallyExclusive) {
    // Two aliases must refer to the same field.
    var name1 = node1.name.value;
    var name2 = node2.name.value;
    if (name1 !== name2) {
      return [[responseName, name1 + ' and ' + name2 + ' are different fields'], [node1], [node2]];
    }

    // Two field calls must have the same arguments.
    if (!sameArguments(node1.arguments || [], node2.arguments || [])) {
      return [[responseName, 'they have differing arguments'], [node1], [node2]];
    }
  }

  if (type1 && type2 && doTypesConflict(type1, type2)) {
    return [[responseName, 'they return conflicting types ' + String(type1) + ' and ' + String(type2)], [node1], [node2]];
  }

  // Collect and compare sub-fields. Use the same "visited fragment names" list
  // for both collections so fields in a fragment reference are never
  // compared to themselves.
  var selectionSet1 = node1.selectionSet;
  var selectionSet2 = node2.selectionSet;
  if (selectionSet1 && selectionSet2) {
    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, (0, _definition.getNamedType)(type1), selectionSet1, (0, _definition.getNamedType)(type2), selectionSet2);
    return subfieldConflicts(conflicts, responseName, node1, node2);
  }
}

function sameArguments(arguments1, arguments2) {
  if (arguments1.length !== arguments2.length) {
    return false;
  }
  return arguments1.every(function (argument1) {
    var argument2 = (0, _find2.default)(arguments2, function (argument) {
      return argument.name.value === argument1.name.value;
    });
    if (!argument2) {
      return false;
    }
    return sameValue(argument1.value, argument2.value);
  });
}

function sameValue(value1, value2) {
  return !value1 && !value2 || (0, _printer.print)(value1) === (0, _printer.print)(value2);
}

// Two types conflict if both types could not apply to a value simultaneously.
// Composite types are ignored as their individual field types will be compared
// later recursively. However List and Non-Null types must match.
function doTypesConflict(type1, type2) {
  if ((0, _definition.isListType)(type1)) {
    return (0, _definition.isListType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
  }
  if ((0, _definition.isListType)(type2)) {
    return true;
  }
  if ((0, _definition.isNonNullType)(type1)) {
    return (0, _definition.isNonNullType)(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
  }
  if ((0, _definition.isNonNullType)(type2)) {
    return true;
  }
  if ((0, _definition.isLeafType)(type1) || (0, _definition.isLeafType)(type2)) {
    return type1 !== type2;
  }
  return false;
}

// Given a selection set, return the collection of fields (a mapping of response
// name to field nodes and definitions) as well as a list of fragment names
// referenced via fragment spreads.
function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
  var cached = cachedFieldsAndFragmentNames.get(selectionSet);
  if (!cached) {
    var nodeAndDefs = Object.create(null);
    var fragmentNames = Object.create(null);
    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);
    cached = [nodeAndDefs, Object.keys(fragmentNames)];
    cachedFieldsAndFragmentNames.set(selectionSet, cached);
  }
  return cached;
}

// Given a reference to a fragment, return the represented collection of fields
// as well as a list of nested fragment names referenced via fragment spreads.
function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
  // Short-circuit building a type from the node if possible.
  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
  if (cached) {
    return cached;
  }

  var fragmentType = (0, _typeFromAST.typeFromAST)(context.getSchema(), fragment.typeCondition);
  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
}

function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
  for (var i = 0; i < selectionSet.selections.length; i++) {
    var selection = selectionSet.selections[i];
    switch (selection.kind) {
      case _kinds.Kind.FIELD:
        var fieldName = selection.name.value;
        var fieldDef = void 0;
        if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
          fieldDef = parentType.getFields()[fieldName];
        }
        var responseName = selection.alias ? selection.alias.value : fieldName;
        if (!nodeAndDefs[responseName]) {
          nodeAndDefs[responseName] = [];
        }
        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
        break;
      case _kinds.Kind.FRAGMENT_SPREAD:
        fragmentNames[selection.name.value] = true;
        break;
      case _kinds.Kind.INLINE_FRAGMENT:
        var typeCondition = selection.typeCondition;
        var inlineFragmentType = typeCondition ? (0, _typeFromAST.typeFromAST)(context.getSchema(), typeCondition) : parentType;
        _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);
        break;
    }
  }
}

// Given a series of Conflicts which occurred between two sub-fields, generate
// a single Conflict.
function subfieldConflicts(conflicts, responseName, node1, node2) {
  if (conflicts.length > 0) {
    return [[responseName, conflicts.map(function (_ref3) {
      var reason = _ref3[0];
      return reason;
    })], conflicts.reduce(function (allFields, _ref4) {
      var fields1 = _ref4[1];
      return allFields.concat(fields1);
    }, [node1]), conflicts.reduce(function (allFields, _ref5) {
      var fields2 = _ref5[2];
      return allFields.concat(fields2);
    }, [node2])];
  }
}

/**
 * A way to keep track of pairs of things when the ordering of the pair does
 * not matter. We do this by maintaining a sort of double adjacency sets.
 */

var PairSet = function () {
  function PairSet() {
    _classCallCheck(this, PairSet);

    this._data = Object.create(null);
  }

  PairSet.prototype.has = function has(a, b, areMutuallyExclusive) {
    var first = this._data[a];
    var result = first && first[b];
    if (result === undefined) {
      return false;
    }
    // areMutuallyExclusive being false is a superset of being true,
    // hence if we want to know if this PairSet "has" these two with no
    // exclusivity, we have to ensure it was added as such.
    if (areMutuallyExclusive === false) {
      return result === false;
    }
    return true;
  };

  PairSet.prototype.add = function add(a, b, areMutuallyExclusive) {
    _pairSetAdd(this._data, a, b, areMutuallyExclusive);
    _pairSetAdd(this._data, b, a, areMutuallyExclusive);
  };

  return PairSet;
}();

function _pairSetAdd(data, a, b, areMutuallyExclusive) {
  var map = data[a];
  if (!map) {
    map = Object.create(null);
    data[a] = map;
  }
  map[b] = areMutuallyExclusive;
}
},{"../../error":94,"../../jsutils/find":103,"../../language/kinds":121,"../../language/printer":125,"../../type/definition":131,"../../utilities/typeFromAST":158}],176:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeIncompatibleSpreadMessage = typeIncompatibleSpreadMessage;
exports.typeIncompatibleAnonSpreadMessage = typeIncompatibleAnonSpreadMessage;
exports.PossibleFragmentSpreads = PossibleFragmentSpreads;

var _error = require('../../error');

var _typeComparators = require('../../utilities/typeComparators');

var _typeFromAST = require('../../utilities/typeFromAST');

var _definition = require('../../type/definition');

function typeIncompatibleSpreadMessage(fragName, parentType, fragType) {
  return 'Fragment "' + fragName + '" cannot be spread here as objects of ' + ('type "' + String(parentType) + '" can never be of type "' + String(fragType) + '".');
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */

function typeIncompatibleAnonSpreadMessage(parentType, fragType) {
  return 'Fragment cannot be spread here as objects of ' + ('type "' + String(parentType) + '" can never be of type "' + String(fragType) + '".');
}

/**
 * Possible fragment spread
 *
 * A fragment spread is only valid if the type condition could ever possibly
 * be true: if there is a non-empty intersection of the possible parent types,
 * and possible types which pass the type condition.
 */
function PossibleFragmentSpreads(context) {
  return {
    InlineFragment: function InlineFragment(node) {
      var fragType = context.getType();
      var parentType = context.getParentType();
      if ((0, _definition.isCompositeType)(fragType) && (0, _definition.isCompositeType)(parentType) && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
        context.reportError(new _error.GraphQLError(typeIncompatibleAnonSpreadMessage(parentType, fragType), [node]));
      }
    },
    FragmentSpread: function FragmentSpread(node) {
      var fragName = node.name.value;
      var fragType = getFragmentType(context, fragName);
      var parentType = context.getParentType();
      if (fragType && parentType && !(0, _typeComparators.doTypesOverlap)(context.getSchema(), fragType, parentType)) {
        context.reportError(new _error.GraphQLError(typeIncompatibleSpreadMessage(fragName, parentType, fragType), [node]));
      }
    }
  };
}

function getFragmentType(context, name) {
  var frag = context.getFragment(name);
  if (frag) {
    var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), frag.typeCondition);
    if ((0, _definition.isCompositeType)(type)) {
      return type;
    }
  }
}
},{"../../error":94,"../../type/definition":131,"../../utilities/typeComparators":157,"../../utilities/typeFromAST":158}],177:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.missingFieldArgMessage = missingFieldArgMessage;
exports.missingDirectiveArgMessage = missingDirectiveArgMessage;
exports.ProvidedNonNullArguments = ProvidedNonNullArguments;

var _error = require('../../error');

var _keyMap = require('../../jsutils/keyMap');

var _keyMap2 = _interopRequireDefault(_keyMap);

var _definition = require('../../type/definition');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function missingFieldArgMessage(fieldName, argName, type) {
  return 'Field "' + fieldName + '" argument "' + argName + '" of type ' + ('"' + String(type) + '" is required but not provided.');
}

function missingDirectiveArgMessage(directiveName, argName, type) {
  return 'Directive "@' + directiveName + '" argument "' + argName + '" of type ' + ('"' + String(type) + '" is required but not provided.');
}

/**
 * Provided required arguments
 *
 * A field or directive is only valid if all required (non-null) field arguments
 * have been provided.
 */
function ProvidedNonNullArguments(context) {
  return {
    Field: {
      // Validate on leave to allow for deeper errors to appear first.
      leave: function leave(node) {
        var fieldDef = context.getFieldDef();
        if (!fieldDef) {
          return false;
        }
        var argNodes = node.arguments || [];

        var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {
          return arg.name.value;
        });
        fieldDef.args.forEach(function (argDef) {
          var argNode = argNodeMap[argDef.name];
          if (!argNode && (0, _definition.isNonNullType)(argDef.type)) {
            context.reportError(new _error.GraphQLError(missingFieldArgMessage(node.name.value, argDef.name, argDef.type), [node]));
          }
        });
      }
    },

    Directive: {
      // Validate on leave to allow for deeper errors to appear first.
      leave: function leave(node) {
        var directiveDef = context.getDirective();
        if (!directiveDef) {
          return false;
        }
        var argNodes = node.arguments || [];

        var argNodeMap = (0, _keyMap2.default)(argNodes, function (arg) {
          return arg.name.value;
        });
        directiveDef.args.forEach(function (argDef) {
          var argNode = argNodeMap[argDef.name];
          if (!argNode && (0, _definition.isNonNullType)(argDef.type)) {
            context.reportError(new _error.GraphQLError(missingDirectiveArgMessage(node.name.value, argDef.name, argDef.type), [node]));
          }
        });
      }
    }
  };
}
},{"../../error":94,"../../jsutils/keyMap":109,"../../type/definition":131}],178:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.noSubselectionAllowedMessage = noSubselectionAllowedMessage;
exports.requiredSubselectionMessage = requiredSubselectionMessage;
exports.ScalarLeafs = ScalarLeafs;

var _error = require('../../error');

var _definition = require('../../type/definition');

function noSubselectionAllowedMessage(fieldName, type) {
  return 'Field "' + fieldName + '" must not have a selection since ' + ('type "' + String(type) + '" has no subfields.');
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   *  strict
   */

function requiredSubselectionMessage(fieldName, type) {
  return 'Field "' + fieldName + '" of type "' + String(type) + '" must have a ' + ('selection of subfields. Did you mean "' + fieldName + ' { ... }"?');
}

/**
 * Scalar leafs
 *
 * A GraphQL document is valid only if all leaf fields (fields without
 * sub selections) are of scalar or enum types.
 */
function ScalarLeafs(context) {
  return {
    Field: function Field(node) {
      var type = context.getType();
      var selectionSet = node.selectionSet;
      if (type) {
        if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {
          if (selectionSet) {
            context.reportError(new _error.GraphQLError(noSubselectionAllowedMessage(node.name.value, type), [selectionSet]));
          }
        } else if (!selectionSet) {
          context.reportError(new _error.GraphQLError(requiredSubselectionMessage(node.name.value, type), [node]));
        }
      }
    }
  };
}
},{"../../error":94,"../../type/definition":131}],179:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.singleFieldOnlyMessage = singleFieldOnlyMessage;
exports.SingleFieldSubscriptions = SingleFieldSubscriptions;

var _error = require('../../error');

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function singleFieldOnlyMessage(name) {
  return (name ? 'Subscription "' + name + '" ' : 'Anonymous Subscription ') + 'must select only one top level field.';
}

/**
 * Subscriptions must only include one field.
 *
 * A GraphQL subscription is valid only if it contains a single root field.
 */
function SingleFieldSubscriptions(context) {
  return {
    OperationDefinition: function OperationDefinition(node) {
      if (node.operation === 'subscription') {
        if (node.selectionSet.selections.length !== 1) {
          context.reportError(new _error.GraphQLError(singleFieldOnlyMessage(node.name && node.name.value), node.selectionSet.selections.slice(1)));
        }
      }
    }
  };
}
},{"../../error":94}],180:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.duplicateArgMessage = duplicateArgMessage;
exports.UniqueArgumentNames = UniqueArgumentNames;

var _error = require('../../error');

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function duplicateArgMessage(argName) {
  return 'There can be only one argument named "' + argName + '".';
}

/**
 * Unique argument names
 *
 * A GraphQL field or directive is only valid if all supplied arguments are
 * uniquely named.
 */
function UniqueArgumentNames(context) {
  var knownArgNames = Object.create(null);
  return {
    Field: function Field() {
      knownArgNames = Object.create(null);
    },
    Directive: function Directive() {
      knownArgNames = Object.create(null);
    },
    Argument: function Argument(node) {
      var argName = node.name.value;
      if (knownArgNames[argName]) {
        context.reportError(new _error.GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));
      } else {
        knownArgNames[argName] = node.name;
      }
      return false;
    }
  };
}
},{"../../error":94}],181:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.duplicateDirectiveMessage = duplicateDirectiveMessage;
exports.UniqueDirectivesPerLocation = UniqueDirectivesPerLocation;

var _error = require('../../error');

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function duplicateDirectiveMessage(directiveName) {
  return 'The directive "' + directiveName + '" can only be used once at ' + 'this location.';
}

/**
 * Unique directive names per location
 *
 * A GraphQL document is only valid if all directives at a given location
 * are uniquely named.
 */
function UniqueDirectivesPerLocation(context) {
  return {
    // Many different AST nodes may contain directives. Rather than listing
    // them all, just listen for entering any node, and check to see if it
    // defines any directives.
    enter: function enter(node) {
      // Flow can't refine that node.directives will only contain directives,
      var directives = node.directives;
      if (directives) {
        var knownDirectives = Object.create(null);
        directives.forEach(function (directive) {
          var directiveName = directive.name.value;
          if (knownDirectives[directiveName]) {
            context.reportError(new _error.GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));
          } else {
            knownDirectives[directiveName] = directive;
          }
        });
      }
    }
  };
}
},{"../../error":94}],182:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.duplicateFragmentNameMessage = duplicateFragmentNameMessage;
exports.UniqueFragmentNames = UniqueFragmentNames;

var _error = require('../../error');

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function duplicateFragmentNameMessage(fragName) {
  return 'There can be only one fragment named "' + fragName + '".';
}

/**
 * Unique fragment names
 *
 * A GraphQL document is only valid if all defined fragments have unique names.
 */
function UniqueFragmentNames(context) {
  var knownFragmentNames = Object.create(null);
  return {
    OperationDefinition: function OperationDefinition() {
      return false;
    },
    FragmentDefinition: function FragmentDefinition(node) {
      var fragmentName = node.name.value;
      if (knownFragmentNames[fragmentName]) {
        context.reportError(new _error.GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));
      } else {
        knownFragmentNames[fragmentName] = node.name;
      }
      return false;
    }
  };
}
},{"../../error":94}],183:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.duplicateInputFieldMessage = duplicateInputFieldMessage;
exports.UniqueInputFieldNames = UniqueInputFieldNames;

var _error = require('../../error');

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function duplicateInputFieldMessage(fieldName) {
  return 'There can be only one input field named "' + fieldName + '".';
}

/**
 * Unique input field names
 *
 * A GraphQL input object value is only valid if all supplied fields are
 * uniquely named.
 */
function UniqueInputFieldNames(context) {
  var knownNameStack = [];
  var knownNames = Object.create(null);

  return {
    ObjectValue: {
      enter: function enter() {
        knownNameStack.push(knownNames);
        knownNames = Object.create(null);
      },
      leave: function leave() {
        knownNames = knownNameStack.pop();
      }
    },
    ObjectField: function ObjectField(node) {
      var fieldName = node.name.value;
      if (knownNames[fieldName]) {
        context.reportError(new _error.GraphQLError(duplicateInputFieldMessage(fieldName), [knownNames[fieldName], node.name]));
      } else {
        knownNames[fieldName] = node.name;
      }
      return false;
    }
  };
}
},{"../../error":94}],184:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.duplicateOperationNameMessage = duplicateOperationNameMessage;
exports.UniqueOperationNames = UniqueOperationNames;

var _error = require('../../error');

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function duplicateOperationNameMessage(operationName) {
  return 'There can be only one operation named "' + operationName + '".';
}

/**
 * Unique operation names
 *
 * A GraphQL document is only valid if all defined operations have unique names.
 */
function UniqueOperationNames(context) {
  var knownOperationNames = Object.create(null);
  return {
    OperationDefinition: function OperationDefinition(node) {
      var operationName = node.name;
      if (operationName) {
        if (knownOperationNames[operationName.value]) {
          context.reportError(new _error.GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));
        } else {
          knownOperationNames[operationName.value] = operationName;
        }
      }
      return false;
    },

    FragmentDefinition: function FragmentDefinition() {
      return false;
    }
  };
}
},{"../../error":94}],185:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.duplicateVariableMessage = duplicateVariableMessage;
exports.UniqueVariableNames = UniqueVariableNames;

var _error = require('../../error');

function duplicateVariableMessage(variableName) {
  return 'There can be only one variable named "' + variableName + '".';
}

/**
 * Unique variable names
 *
 * A GraphQL operation is only valid if all its variables are uniquely named.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function UniqueVariableNames(context) {
  var knownVariableNames = Object.create(null);
  return {
    OperationDefinition: function OperationDefinition() {
      knownVariableNames = Object.create(null);
    },
    VariableDefinition: function VariableDefinition(node) {
      var variableName = node.variable.name.value;
      if (knownVariableNames[variableName]) {
        context.reportError(new _error.GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));
      } else {
        knownVariableNames[variableName] = node.variable.name;
      }
    }
  };
}
},{"../../error":94}],186:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.badValueMessage = badValueMessage;
exports.requiredFieldMessage = requiredFieldMessage;
exports.unknownFieldMessage = unknownFieldMessage;
exports.ValuesOfCorrectType = ValuesOfCorrectType;

var _error = require('../../error');

var _printer = require('../../language/printer');

var _definition = require('../../type/definition');

var _isInvalid = require('../../jsutils/isInvalid');

var _isInvalid2 = _interopRequireDefault(_isInvalid);

var _keyMap = require('../../jsutils/keyMap');

var _keyMap2 = _interopRequireDefault(_keyMap);

var _orList = require('../../jsutils/orList');

var _orList2 = _interopRequireDefault(_orList);

var _suggestionList = require('../../jsutils/suggestionList');

var _suggestionList2 = _interopRequireDefault(_suggestionList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function badValueMessage(typeName, valueName, message) {
  return 'Expected type ' + typeName + ', found ' + valueName + (message ? '; ' + message : '.');
}

function requiredFieldMessage(typeName, fieldName, fieldTypeName) {
  return 'Field ' + typeName + '.' + fieldName + ' of required type ' + (fieldTypeName + ' was not provided.');
}

function unknownFieldMessage(typeName, fieldName, message) {
  return 'Field "' + fieldName + '" is not defined by type ' + typeName + (message ? '; ' + message : '.');
}

/**
 * Value literals of correct type
 *
 * A GraphQL document is only valid if all value literals are of the type
 * expected at their position.
 */
function ValuesOfCorrectType(context) {
  return {
    NullValue: function NullValue(node) {
      var type = context.getInputType();
      if ((0, _definition.isNonNullType)(type)) {
        context.reportError(new _error.GraphQLError(badValueMessage(String(type), (0, _printer.print)(node)), node));
      }
    },
    ListValue: function ListValue(node) {
      // Note: TypeInfo will traverse into a list's item type, so look to the
      // parent input type to check if it is a list.
      var type = (0, _definition.getNullableType)(context.getParentInputType());
      if (!(0, _definition.isListType)(type)) {
        isValidScalar(context, node);
        return false; // Don't traverse further.
      }
    },
    ObjectValue: function ObjectValue(node) {
      var type = (0, _definition.getNamedType)(context.getInputType());
      if (!(0, _definition.isInputObjectType)(type)) {
        isValidScalar(context, node);
        return false; // Don't traverse further.
      }
      // Ensure every required field exists.
      var inputFields = type.getFields();
      var fieldNodeMap = (0, _keyMap2.default)(node.fields, function (field) {
        return field.name.value;
      });
      Object.keys(inputFields).forEach(function (fieldName) {
        var fieldType = inputFields[fieldName].type;
        var fieldNode = fieldNodeMap[fieldName];
        if (!fieldNode && (0, _definition.isNonNullType)(fieldType)) {
          context.reportError(new _error.GraphQLError(requiredFieldMessage(type.name, fieldName, String(fieldType)), node));
        }
      });
    },
    ObjectField: function ObjectField(node) {
      var parentType = (0, _definition.getNamedType)(context.getParentInputType());
      var fieldType = context.getInputType();
      if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {
        var suggestions = (0, _suggestionList2.default)(node.name.value, Object.keys(parentType.getFields()));
        var didYouMean = suggestions.length !== 0 ? 'Did you mean ' + (0, _orList2.default)(suggestions) + '?' : undefined;
        context.reportError(new _error.GraphQLError(unknownFieldMessage(parentType.name, node.name.value, didYouMean), node));
      }
    },
    EnumValue: function EnumValue(node) {
      var type = (0, _definition.getNamedType)(context.getInputType());
      if (!(0, _definition.isEnumType)(type)) {
        isValidScalar(context, node);
      } else if (!type.getValue(node.value)) {
        context.reportError(new _error.GraphQLError(badValueMessage(type.name, (0, _printer.print)(node), enumTypeSuggestion(type, node)), node));
      }
    },

    IntValue: function IntValue(node) {
      return isValidScalar(context, node);
    },
    FloatValue: function FloatValue(node) {
      return isValidScalar(context, node);
    },
    StringValue: function StringValue(node) {
      return isValidScalar(context, node);
    },
    BooleanValue: function BooleanValue(node) {
      return isValidScalar(context, node);
    }
  };
}

/**
 * Any value literal may be a valid representation of a Scalar, depending on
 * that scalar type.
 */
function isValidScalar(context, node) {
  // Report any error at the full type expected by the location.
  var locationType = context.getInputType();
  if (!locationType) {
    return;
  }

  var type = (0, _definition.getNamedType)(locationType);

  if (!(0, _definition.isScalarType)(type)) {
    context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node), enumTypeSuggestion(type, node)), node));
    return;
  }

  // Scalars determine if a literal value is valid via parseLiteral() which
  // may throw or return an invalid value to indicate failure.
  try {
    var parseResult = type.parseLiteral(node, undefined /* variables */);
    if ((0, _isInvalid2.default)(parseResult)) {
      context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node)), node));
    }
  } catch (error) {
    // Ensure a reference to the original error is maintained.
    context.reportError(new _error.GraphQLError(badValueMessage(String(locationType), (0, _printer.print)(node), error.message), node, undefined, undefined, undefined, error));
  }
}

function enumTypeSuggestion(type, node) {
  if ((0, _definition.isEnumType)(type)) {
    var suggestions = (0, _suggestionList2.default)((0, _printer.print)(node), type.getValues().map(function (value) {
      return value.name;
    }));
    if (suggestions.length !== 0) {
      return 'Did you mean the enum value ' + (0, _orList2.default)(suggestions) + '?';
    }
  }
}
},{"../../error":94,"../../jsutils/isInvalid":106,"../../jsutils/keyMap":109,"../../jsutils/orList":113,"../../jsutils/suggestionList":117,"../../language/printer":125,"../../type/definition":131}],187:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonInputTypeOnVarMessage = nonInputTypeOnVarMessage;
exports.VariablesAreInputTypes = VariablesAreInputTypes;

var _error = require('../../error');

var _printer = require('../../language/printer');

var _definition = require('../../type/definition');

var _typeFromAST = require('../../utilities/typeFromAST');

function nonInputTypeOnVarMessage(variableName, typeName) {
  return 'Variable "$' + variableName + '" cannot be non-input type "' + typeName + '".';
}

/**
 * Variables are input types
 *
 * A GraphQL operation is only valid if all the variables it defines are of
 * input types (scalar, enum, or input object).
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function VariablesAreInputTypes(context) {
  return {
    VariableDefinition: function VariableDefinition(node) {
      var type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);

      // If the variable type is not an input type, return an error.
      if (type && !(0, _definition.isInputType)(type)) {
        var variableName = node.variable.name.value;
        context.reportError(new _error.GraphQLError(nonInputTypeOnVarMessage(variableName, (0, _printer.print)(node.type)), [node.type]));
      }
    }
  };
}
},{"../../error":94,"../../language/printer":125,"../../type/definition":131,"../../utilities/typeFromAST":158}],188:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultForRequiredVarMessage = defaultForRequiredVarMessage;
exports.VariablesDefaultValueAllowed = VariablesDefaultValueAllowed;

var _error = require('../../error');

var _definition = require('../../type/definition');

function defaultForRequiredVarMessage(varName, type, guessType) {
  return 'Variable "$' + varName + '" of type "' + String(type) + '" is required and ' + 'will not use the default value. ' + ('Perhaps you meant to use type "' + String(guessType) + '".');
}

/**
 * Variable's default value is allowed
 *
 * A GraphQL document is only valid if all variable default values are allowed
 * due to a variable not being required.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function VariablesDefaultValueAllowed(context) {
  return {
    VariableDefinition: function VariableDefinition(node) {
      var name = node.variable.name.value;
      var defaultValue = node.defaultValue;
      var type = context.getInputType();
      if ((0, _definition.isNonNullType)(type) && defaultValue) {
        context.reportError(new _error.GraphQLError(defaultForRequiredVarMessage(name, type, type.ofType), [defaultValue]));
      }
      return false; // Do not traverse further.
    },

    SelectionSet: function SelectionSet() {
      return false;
    },
    FragmentDefinition: function FragmentDefinition() {
      return false;
    }
  };
}
},{"../../error":94,"../../type/definition":131}],189:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.badVarPosMessage = badVarPosMessage;
exports.VariablesInAllowedPosition = VariablesInAllowedPosition;

var _error = require('../../error');

var _definition = require('../../type/definition');

var _typeComparators = require('../../utilities/typeComparators');

var _typeFromAST = require('../../utilities/typeFromAST');

function badVarPosMessage(varName, varType, expectedType) {
  return 'Variable "$' + varName + '" of type "' + String(varType) + '" used in ' + ('position expecting type "' + String(expectedType) + '".');
}

/**
 * Variables passed to field arguments conform to type
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function VariablesInAllowedPosition(context) {
  var varDefMap = Object.create(null);

  return {
    OperationDefinition: {
      enter: function enter() {
        varDefMap = Object.create(null);
      },
      leave: function leave(operation) {
        var usages = context.getRecursiveVariableUsages(operation);

        usages.forEach(function (_ref) {
          var node = _ref.node,
              type = _ref.type;

          var varName = node.name.value;
          var varDef = varDefMap[varName];
          if (varDef && type) {
            // A var type is allowed if it is the same or more strict (e.g. is
            // a subtype of) than the expected type. It can be more strict if
            // the variable type is non-null when the expected type is nullable.
            // If both are list types, the variable item type can be more strict
            // than the expected item type (contravariant).
            var schema = context.getSchema();
            var varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);
            if (varType && !(0, _typeComparators.isTypeSubTypeOf)(schema, effectiveType(varType, varDef), type)) {
              context.reportError(new _error.GraphQLError(badVarPosMessage(varName, varType, type), [varDef, node]));
            }
          }
        });
      }
    },
    VariableDefinition: function VariableDefinition(node) {
      varDefMap[node.variable.name.value] = node;
    }
  };
}

// If a variable definition has a default value, it's effectively non-null.
function effectiveType(varType, varDef) {
  return !varDef.defaultValue || (0, _definition.isNonNullType)(varType) ? varType : (0, _definition.GraphQLNonNull)(varType);
}
},{"../../error":94,"../../type/definition":131,"../../utilities/typeComparators":157,"../../utilities/typeFromAST":158}],190:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.specifiedRules = undefined;

var _ExecutableDefinitions = require('./rules/ExecutableDefinitions');

var _UniqueOperationNames = require('./rules/UniqueOperationNames');

var _LoneAnonymousOperation = require('./rules/LoneAnonymousOperation');

var _SingleFieldSubscriptions = require('./rules/SingleFieldSubscriptions');

var _KnownTypeNames = require('./rules/KnownTypeNames');

var _FragmentsOnCompositeTypes = require('./rules/FragmentsOnCompositeTypes');

var _VariablesAreInputTypes = require('./rules/VariablesAreInputTypes');

var _ScalarLeafs = require('./rules/ScalarLeafs');

var _FieldsOnCorrectType = require('./rules/FieldsOnCorrectType');

var _UniqueFragmentNames = require('./rules/UniqueFragmentNames');

var _KnownFragmentNames = require('./rules/KnownFragmentNames');

var _NoUnusedFragments = require('./rules/NoUnusedFragments');

var _PossibleFragmentSpreads = require('./rules/PossibleFragmentSpreads');

var _NoFragmentCycles = require('./rules/NoFragmentCycles');

var _UniqueVariableNames = require('./rules/UniqueVariableNames');

var _NoUndefinedVariables = require('./rules/NoUndefinedVariables');

var _NoUnusedVariables = require('./rules/NoUnusedVariables');

var _KnownDirectives = require('./rules/KnownDirectives');

var _UniqueDirectivesPerLocation = require('./rules/UniqueDirectivesPerLocation');

var _KnownArgumentNames = require('./rules/KnownArgumentNames');

var _UniqueArgumentNames = require('./rules/UniqueArgumentNames');

var _ValuesOfCorrectType = require('./rules/ValuesOfCorrectType');

var _ProvidedNonNullArguments = require('./rules/ProvidedNonNullArguments');

var _VariablesDefaultValueAllowed = require('./rules/VariablesDefaultValueAllowed');

var _VariablesInAllowedPosition = require('./rules/VariablesInAllowedPosition');

var _OverlappingFieldsCanBeMerged = require('./rules/OverlappingFieldsCanBeMerged');

var _UniqueInputFieldNames = require('./rules/UniqueInputFieldNames');

/**
 * This set includes all validation rules defined by the GraphQL spec.
 *
 * The order of the rules in this list has been adjusted to lead to the
 * most clear output when encountering multiple validation errors.
 */


// Spec Section: "Field Selection Merging"


// Spec Section: "Variables Default Value Is Allowed"


// Spec Section: "Value Type Correctness"


// Spec Section: "Argument Names"


// Spec Section: "Directives Are Defined"


// Spec Section: "All Variable Used Defined"


// Spec Section: "Fragments must not form cycles"


// Spec Section: "Fragments must be used"


// Spec Section: "Fragment Name Uniqueness"


// Spec Section: "Leaf Field Selections"


// Spec Section: "Fragments on Composite Types"


// Spec Section: "Subscriptions with Single Root Field"


// Spec Section: "Operation Name Uniqueness"
var specifiedRules = exports.specifiedRules = [_ExecutableDefinitions.ExecutableDefinitions, _UniqueOperationNames.UniqueOperationNames, _LoneAnonymousOperation.LoneAnonymousOperation, _SingleFieldSubscriptions.SingleFieldSubscriptions, _KnownTypeNames.KnownTypeNames, _FragmentsOnCompositeTypes.FragmentsOnCompositeTypes, _VariablesAreInputTypes.VariablesAreInputTypes, _ScalarLeafs.ScalarLeafs, _FieldsOnCorrectType.FieldsOnCorrectType, _UniqueFragmentNames.UniqueFragmentNames, _KnownFragmentNames.KnownFragmentNames, _NoUnusedFragments.NoUnusedFragments, _PossibleFragmentSpreads.PossibleFragmentSpreads, _NoFragmentCycles.NoFragmentCycles, _UniqueVariableNames.UniqueVariableNames, _NoUndefinedVariables.NoUndefinedVariables, _NoUnusedVariables.NoUnusedVariables, _KnownDirectives.KnownDirectives, _UniqueDirectivesPerLocation.UniqueDirectivesPerLocation, _KnownArgumentNames.KnownArgumentNames, _UniqueArgumentNames.UniqueArgumentNames, _ValuesOfCorrectType.ValuesOfCorrectType, _ProvidedNonNullArguments.ProvidedNonNullArguments, _VariablesDefaultValueAllowed.VariablesDefaultValueAllowed, _VariablesInAllowedPosition.VariablesInAllowedPosition, _OverlappingFieldsCanBeMerged.OverlappingFieldsCanBeMerged, _UniqueInputFieldNames.UniqueInputFieldNames];

// Spec Section: "Input Object Field Uniqueness"


// Spec Section: "All Variable Usages Are Allowed"


// Spec Section: "Argument Optionality"


// Spec Section: "Argument Uniqueness"


// Spec Section: "Directives Are Unique Per Location"


// Spec Section: "All Variables Used"


// Spec Section: "Variable Uniqueness"


// Spec Section: "Fragment spread is possible"


// Spec Section: "Fragment spread target defined"


// Spec Section: "Field Selections on Objects, Interfaces, and Unions Types"


// Spec Section: "Variables are Input Types"


// Spec Section: "Fragment Spread Type Existence"


// Spec Section: "Lone Anonymous Operation"
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

// Spec Section: "Executable Definitions"
},{"./rules/ExecutableDefinitions":163,"./rules/FieldsOnCorrectType":164,"./rules/FragmentsOnCompositeTypes":165,"./rules/KnownArgumentNames":166,"./rules/KnownDirectives":167,"./rules/KnownFragmentNames":168,"./rules/KnownTypeNames":169,"./rules/LoneAnonymousOperation":170,"./rules/NoFragmentCycles":171,"./rules/NoUndefinedVariables":172,"./rules/NoUnusedFragments":173,"./rules/NoUnusedVariables":174,"./rules/OverlappingFieldsCanBeMerged":175,"./rules/PossibleFragmentSpreads":176,"./rules/ProvidedNonNullArguments":177,"./rules/ScalarLeafs":178,"./rules/SingleFieldSubscriptions":179,"./rules/UniqueArgumentNames":180,"./rules/UniqueDirectivesPerLocation":181,"./rules/UniqueFragmentNames":182,"./rules/UniqueInputFieldNames":183,"./rules/UniqueOperationNames":184,"./rules/UniqueVariableNames":185,"./rules/ValuesOfCorrectType":186,"./rules/VariablesAreInputTypes":187,"./rules/VariablesDefaultValueAllowed":188,"./rules/VariablesInAllowedPosition":189}],191:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validate = validate;

var _invariant = require('../jsutils/invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _error = require('../error');

var _visitor = require('../language/visitor');

var _schema = require('../type/schema');

var _validate = require('../type/validate');

var _TypeInfo = require('../utilities/TypeInfo');

var _specifiedRules = require('./specifiedRules');

var _ValidationContext = require('./ValidationContext');

var _ValidationContext2 = _interopRequireDefault(_ValidationContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Implements the "Validation" section of the spec.
 *
 * Validation runs synchronously, returning an array of encountered errors, or
 * an empty array if no errors were encountered and the document is valid.
 *
 * A list of specific validation rules may be provided. If not provided, the
 * default list of rules defined by the GraphQL specification will be used.
 *
 * Each validation rules is a function which returns a visitor
 * (see the language/visitor API). Visitor methods are expected to return
 * GraphQLErrors, or Arrays of GraphQLErrors when invalid.
 *
 * Optionally a custom TypeInfo instance may be provided. If not provided, one
 * will be created from the provided schema.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 */

function validate(schema, ast, rules, typeInfo) {
  !ast ? (0, _invariant2.default)(0, 'Must provide document') : void 0;
  // If the schema used for validation is invalid, throw an error.
  (0, _validate.assertValidSchema)(schema);
  return visitUsingRules(schema, typeInfo || new _TypeInfo.TypeInfo(schema), ast, rules || _specifiedRules.specifiedRules);
}

/**
 * This uses a specialized visitor which runs multiple visitors in parallel,
 * while maintaining the visitor skip and break API.
 *
 * @internal
 */
function visitUsingRules(schema, typeInfo, documentAST, rules) {
  var context = new _ValidationContext2.default(schema, documentAST, typeInfo);
  var visitors = rules.map(function (rule) {
    return rule(context);
  });
  // Visit the whole document with each instance of all provided rules.
  (0, _visitor.visit)(documentAST, (0, _visitor.visitWithTypeInfo)(typeInfo, (0, _visitor.visitInParallel)(visitors)));
  return context.getErrors();
}
},{"../error":94,"../jsutils/invariant":105,"../language/visitor":127,"../type/schema":136,"../type/validate":137,"../utilities/TypeInfo":138,"./ValidationContext":161,"./specifiedRules":190}],192:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],193:[function(require,module,exports){
'use strict';

exports.isIterable = isIterable;
exports.isArrayLike = isArrayLike;
exports.isCollection = isCollection;
exports.getIterator = getIterator;
exports.getIteratorMethod = getIteratorMethod;
exports.createIterator = createIterator;
exports.forEach = forEach;
exports.isAsyncIterable = isAsyncIterable;
exports.getAsyncIterator = getAsyncIterator;
exports.getAsyncIteratorMethod = getAsyncIteratorMethod;
exports.createAsyncIterator = createAsyncIterator;
exports.forAwaitEach = forAwaitEach;

var SYMBOL = typeof Symbol === 'function' ? Symbol : void 0;

var SYMBOL_ITERATOR = SYMBOL && SYMBOL.iterator;

var $$iterator = exports.$$iterator = SYMBOL_ITERATOR || '@@iterator';

function isIterable(obj) {
  return !!getIteratorMethod(obj);
}

function isArrayLike(obj) {
  var length = obj != null && obj.length;
  return typeof length === 'number' && length >= 0 && length % 1 === 0;
}

function isCollection(obj) {
  return Object(obj) === obj && (isArrayLike(obj) || isIterable(obj));
}

function getIterator(iterable) {
  var method = getIteratorMethod(iterable);
  if (method) {
    return method.call(iterable);
  }
}

function getIteratorMethod(iterable) {
  if (iterable != null) {
    var method = SYMBOL_ITERATOR && iterable[SYMBOL_ITERATOR] || iterable['@@iterator'];
    if (typeof method === 'function') {
      return method;
    }
  }
}

function createIterator(collection) {
  if (collection != null) {
    var iterator = getIterator(collection);
    if (iterator) {
      return iterator;
    }
    if (isArrayLike(collection)) {
      return new ArrayLikeIterator(collection);
    }
  }
}

function ArrayLikeIterator(obj) {
  this._o = obj;
  this._i = 0;
}

ArrayLikeIterator.prototype[$$iterator] = function () {
  return this;
};

ArrayLikeIterator.prototype.next = function () {
  if (this._o === void 0 || this._i >= this._o.length) {
    this._o = void 0;
    return { value: void 0, done: true };
  }
  return { value: this._o[this._i++], done: false };
};

function forEach(collection, callback, thisArg) {
  if (collection != null) {
    if (typeof collection.forEach === 'function') {
      return collection.forEach(callback, thisArg);
    }
    var i = 0;
    var iterator = getIterator(collection);
    if (iterator) {
      var step;
      while (!(step = iterator.next()).done) {
        callback.call(thisArg, step.value, i++, collection);

        if (i > 9999999) {
          throw new TypeError('Near-infinite iteration.');
        }
      }
    } else if (isArrayLike(collection)) {
      for (; i < collection.length; i++) {
        if (collection.hasOwnProperty(i)) {
          callback.call(thisArg, collection[i], i, collection);
        }
      }
    }
  }
}

var SYMBOL_ASYNC_ITERATOR = SYMBOL && SYMBOL.asyncIterator;

var $$asyncIterator = exports.$$asyncIterator = SYMBOL_ASYNC_ITERATOR || '@@asyncIterator';

function isAsyncIterable(obj) {
  return !!getAsyncIteratorMethod(obj);
}

function getAsyncIterator(asyncIterable) {
  var method = getAsyncIteratorMethod(asyncIterable);
  if (method) {
    return method.call(asyncIterable);
  }
}

function getAsyncIteratorMethod(asyncIterable) {
  if (asyncIterable != null) {
    var method = SYMBOL_ASYNC_ITERATOR && asyncIterable[SYMBOL_ASYNC_ITERATOR] || asyncIterable['@@asyncIterator'];
    if (typeof method === 'function') {
      return method;
    }
  }
}

function createAsyncIterator(source) {
  if (source != null) {
    var asyncIterator = getAsyncIterator(source);
    if (asyncIterator) {
      return asyncIterator;
    }
    var iterator = createIterator(source);
    if (iterator) {
      return new AsyncFromSyncIterator(iterator);
    }
  }
}

function AsyncFromSyncIterator(iterator) {
  this._i = iterator;
}

AsyncFromSyncIterator.prototype[$$asyncIterator] = function () {
  return this;
};

AsyncFromSyncIterator.prototype.next = function () {
  var step = this._i.next();
  return Promise.resolve(step.value).then(function (value) {
    return { value: value, done: step.done };
  });
};

function forAwaitEach(source, callback, thisArg) {
  var asyncIterator = createAsyncIterator(source);
  if (asyncIterator) {
    var i = 0;
    return new Promise(function (resolve, reject) {
      function next() {
        asyncIterator.next().then(function (step) {
          if (!step.done) {
            Promise.resolve(callback.call(thisArg, step.value, i++, source)).then(next).catch(reject);
          } else {
            resolve();
          }

          return null;
        }).catch(reject);

        return null;
      }
      next();
    });
  }
}


},{}],194:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],195:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _local = require('./local');

Object.defineProperty(exports, 'getFromLocalUrl', {
  enumerable: true,
  get: function get() {
    return _local.getFromLocalUrl;
  }
});

},{"./local":196}],196:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFromLocalUrl = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/**
 * Given a URL of an object in the SWAPI, return the data
 * from our local cache.
 */
var getFromLocalUrl = exports.getFromLocalUrl = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(url) {
    var text;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            text = _data2.default[url];

            if (text) {
              _context.next = 3;
              break;
            }

            throw new Error('No entry in local cache for ' + url);

          case 3:
            if (process.env.NODE_ENV !== 'test') {
              // eslint-disable-next-line no-console
              console.log('Hit the local cache for ' + url + '.');
            }
            return _context.abrupt('return', text);

          case 5:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function getFromLocalUrl(_x) {
    return _ref.apply(this, arguments);
  };
}(); /**
      * Copyright (c) 2015-present, Facebook, Inc.
      * All rights reserved.
      *
      * This source code is licensed under the license found in the
      * LICENSE-examples file in the root directory of this source tree.
      *
      *  strict
      */

var _data = require('../../cache/data');

var _data2 = _interopRequireDefault(_data);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

}).call(this,require('_process'))
},{"../../cache/data":1,"_process":194,"babel-runtime/helpers/asyncToGenerator":5,"babel-runtime/regenerator":10}],197:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.execute = execute;

var _graphql = require('graphql');

var _schema = require('./schema');

var _schema2 = _interopRequireDefault(_schema);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the
 * LICENSE-examples file in the root directory of this source tree.
 */

function execute(query, variables, operationName) {
  return (0, _graphql.graphql)(_schema2.default, query, null, null, variables, operationName);
}

},{"./schema":201,"graphql":102}],198:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getObjectsFromUrls = exports.getObjectsByType = exports.getObjectFromTypeAndId = exports.getObjectFromUrl = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

/**
 * Given an object URL, fetch it, append the ID to it, and return it.
 */
var getObjectFromUrl = exports.getObjectFromUrl = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(url) {
    var data;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return localUrlLoader.load(url);

          case 2:
            data = _context.sent;
            return _context.abrupt('return', objectWithId(data));

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function getObjectFromUrl(_x) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * Given a type and ID, get the object with the ID.
 */

var getObjectFromTypeAndId = exports.getObjectFromTypeAndId = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(type, id) {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getObjectFromUrl('https://swapi.co/api/' + type + '/' + id + '/');

          case 2:
            return _context2.abrupt('return', _context2.sent);

          case 3:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function getObjectFromTypeAndId(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * Given a type, fetch all of the pages, and join the objects together
 */
var getObjectsByType = exports.getObjectsByType = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(type) {
    var objects, nextUrl, pageData;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            objects = [];
            nextUrl = 'https://swapi.co/api/' + type + '/';

          case 2:
            if (!nextUrl) {
              _context3.next = 10;
              break;
            }

            _context3.next = 5;
            return localUrlLoader.load(nextUrl);

          case 5:
            pageData = _context3.sent;

            objects = objects.concat(pageData.results.map(objectWithId));
            nextUrl = pageData.next;
            _context3.next = 2;
            break;

          case 10:
            objects = sortObjectsById(objects);
            return _context3.abrupt('return', { objects: objects, totalCount: objects.length });

          case 12:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function getObjectsByType(_x4) {
    return _ref3.apply(this, arguments);
  };
}();

var getObjectsFromUrls = exports.getObjectsFromUrls = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(urls) {
    var array;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _promise2.default.all(urls.map(getObjectFromUrl));

          case 2:
            array = _context4.sent;
            return _context4.abrupt('return', sortObjectsById(array));

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function getObjectsFromUrls(_x5) {
    return _ref4.apply(this, arguments);
  };
}();

exports.convertToNumber = convertToNumber;

var _dataloader = require('dataloader');

var _dataloader2 = _interopRequireDefault(_dataloader);

var _api = require('../api');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * Copyright (c) 2015-present, Facebook Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the
 * LICENSE-examples file in the root directory of this source tree.
 *
 *  strict
 */

var localUrlLoader = new _dataloader2.default(function (urls) {
  return _promise2.default.all(urls.map(_api.getFromLocalUrl));
});

/**
 * Objects returned from SWAPI don't have an ID field, so add one.
 */
function objectWithId(obj) {
  obj.id = parseInt(obj.url.split('/')[5], 10);
  return obj;
}

function sortObjectsById(array) {
  return array.sort(function (a, b) {
    return a.id - b.id;
  });
}

/**
 * Given a string, convert it to a number
 */
function convertToNumber(value) {
  if (['unknown', 'n/a'].indexOf(value) !== -1) {
    return null;
  }
  // remove digit grouping
  var numberString = value.replace(/,/, '');
  return Number(numberString);
}

},{"../api":195,"babel-runtime/core-js/promise":4,"babel-runtime/helpers/asyncToGenerator":5,"babel-runtime/regenerator":10,"dataloader":84}],199:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createdField = createdField;
exports.editedField = editedField;

var _graphql = require('graphql');

// These two fields appear on all types, so let's only write them once.
function createdField() {
  return {
    type: _graphql.GraphQLString,
    description: 'The ISO 8601 date format of the time that this resource was created.'
  };
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the license found in the
   * LICENSE-examples file in the root directory of this source tree.
   *
   *  strict
   */

function editedField() {
  return {
    type: _graphql.GraphQLString,
    description: 'The ISO 8601 date format of the time that this resource was edited.'
  };
}

},{"graphql":102}],200:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

exports.connectionFromUrls = connectionFromUrls;

var _graphqlRelay = require('graphql-relay');

var _apiHelper = require('./apiHelper');

var _graphql = require('graphql');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * Constructs a GraphQL connection field config; it is assumed
 * that the object has a property named `prop`, and that property
 * contains a list of URLs.
 */
function connectionFromUrls(name, prop, type) {
  var _this = this;

  var _connectionDefinition = (0, _graphqlRelay.connectionDefinitions)({
    name: name,
    nodeType: type,
    resolveNode: function resolveNode(edge) {
      return edge.node;
    },
    connectionFields: function connectionFields() {
      return (0, _defineProperty3.default)({
        totalCount: {
          type: _graphql.GraphQLInt,
          resolve: function resolve(conn) {
            return conn.totalCount;
          },
          description: 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.'
        }
      }, prop, {
        type: new _graphql.GraphQLList(type),
        resolve: function resolve(conn) {
          return conn.edges.map(function (edge) {
            return edge.node;
          });
        },
        description: 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.'
      });
    }
  }),
      connectionType = _connectionDefinition.connectionType;

  return {
    type: connectionType,
    args: _graphqlRelay.connectionArgs,
    resolve: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(obj, args) {
        var array;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _apiHelper.getObjectsFromUrls)(obj[prop] || []);

              case 2:
                array = _context.sent;
                return _context.abrupt('return', (0, _extends3.default)({}, (0, _graphqlRelay.connectionFromArray)(array, args), {
                  totalCount: array.length
                }));

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      function resolve(_x, _x2) {
        return _ref2.apply(this, arguments);
      }

      return resolve;
    }()
  };
} /**
   * Copyright (c) 2015-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the license found in the
   * LICENSE-examples file in the root directory of this source tree.
   *
   *  strict
   */

},{"./apiHelper":198,"babel-runtime/helpers/asyncToGenerator":5,"babel-runtime/helpers/defineProperty":6,"babel-runtime/helpers/extends":7,"babel-runtime/regenerator":10,"graphql":102,"graphql-relay":87}],201:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _graphql = require('graphql');

var _graphqlRelay = require('graphql-relay');

var _apiHelper = require('./apiHelper');

var _relayNode = require('./relayNode');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * Creates a root field to get an object of a given type.
 * Accepts either `id`, the globally unique ID used in GraphQL,
 * or `idName`, the per-type ID used in SWAPI.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the
 * LICENSE-examples file in the root directory of this source tree.
 *
 *  strict
 */

function rootFieldByID(idName, swapiType) {
  var getter = function getter(id) {
    return (0, _apiHelper.getObjectFromTypeAndId)(swapiType, id);
  };
  var argDefs = {};
  argDefs.id = { type: _graphql.GraphQLID };
  argDefs[idName] = { type: _graphql.GraphQLID };
  return {
    type: (0, _relayNode.swapiTypeToGraphQLType)(swapiType),
    args: argDefs,
    resolve: function resolve(_, args) {
      if (args[idName] !== undefined && args[idName] !== null) {
        return getter(args[idName]);
      }

      if (args.id !== undefined && args.id !== null) {
        var globalId = (0, _graphqlRelay.fromGlobalId)(args.id);
        if (globalId.id === null || globalId.id === undefined || globalId.id === '') {
          throw new Error('No valid ID extracted from ' + args.id);
        }
        return getter(globalId.id);
      }
      throw new Error('must provide id or ' + idName);
    }
  };
}

/**
 * Creates a connection that will return all objects of the given
 * `swapiType`; the connection will be named using `name`.
 */
function rootConnection(name, swapiType) {
  var _this = this;

  var graphqlType = (0, _relayNode.swapiTypeToGraphQLType)(swapiType);

  var _connectionDefinition = (0, _graphqlRelay.connectionDefinitions)({
    name: name,
    nodeType: graphqlType,
    connectionFields: function connectionFields() {
      return (0, _defineProperty3.default)({
        totalCount: {
          type: _graphql.GraphQLInt,
          resolve: function resolve(conn) {
            return conn.totalCount;
          },
          description: 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.'
        }
      }, swapiType, {
        type: new _graphql.GraphQLList(graphqlType),
        resolve: function resolve(conn) {
          return conn.edges.map(function (edge) {
            return edge.node;
          });
        },
        description: 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.'
      });
    }
  }),
      connectionType = _connectionDefinition.connectionType;

  return {
    type: connectionType,
    args: _graphqlRelay.connectionArgs,
    resolve: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(_, args) {
        var _ref3, objects, totalCount;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _apiHelper.getObjectsByType)(swapiType);

              case 2:
                _ref3 = _context.sent;
                objects = _ref3.objects;
                totalCount = _ref3.totalCount;
                return _context.abrupt('return', (0, _extends3.default)({}, (0, _graphqlRelay.connectionFromArray)(objects, args), {
                  totalCount: totalCount
                }));

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      function resolve(_x, _x2) {
        return _ref2.apply(this, arguments);
      }

      return resolve;
    }()
  };
}

/**
 * The GraphQL type equivalent of the Root resource
 */
var rootType = new _graphql.GraphQLObjectType({
  name: 'Root',
  fields: function fields() {
    return {
      allFilms: rootConnection('Films', 'films'),
      film: rootFieldByID('filmID', 'films'),
      allPeople: rootConnection('People', 'people'),
      person: rootFieldByID('personID', 'people'),
      allPlanets: rootConnection('Planets', 'planets'),
      planet: rootFieldByID('planetID', 'planets'),
      allSpecies: rootConnection('Species', 'species'),
      species: rootFieldByID('speciesID', 'species'),
      allStarships: rootConnection('Starships', 'starships'),
      starship: rootFieldByID('starshipID', 'starships'),
      allVehicles: rootConnection('Vehicles', 'vehicles'),
      vehicle: rootFieldByID('vehicleID', 'vehicles'),
      node: _relayNode.nodeField
    };
  }
});

exports.default = new _graphql.GraphQLSchema({ query: rootType });

},{"./apiHelper":198,"./relayNode":202,"babel-runtime/helpers/asyncToGenerator":5,"babel-runtime/helpers/defineProperty":6,"babel-runtime/helpers/extends":7,"babel-runtime/regenerator":10,"graphql":102,"graphql-relay":87}],202:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nodeField = exports.nodeInterface = undefined;
exports.swapiTypeToGraphQLType = swapiTypeToGraphQLType;

var _apiHelper = require('./apiHelper');

var _graphqlRelay = require('graphql-relay');

/**
 * Given a "type" in SWAPI, returns the corresponding GraphQL type.
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the
 * LICENSE-examples file in the root directory of this source tree.
 *
 *  strict
 */

function swapiTypeToGraphQLType(swapiType) {
  var FilmType = require('./types/film').default;
  var PersonType = require('./types/person').default;
  var PlanetType = require('./types/planet').default;
  var SpeciesType = require('./types/species').default;
  var StarshipType = require('./types/starship').default;
  var VehicleType = require('./types/vehicle').default;

  switch (swapiType) {
    case 'films':
      return FilmType;
    case 'people':
      return PersonType;
    case 'planets':
      return PlanetType;
    case 'starships':
      return StarshipType;
    case 'vehicles':
      return VehicleType;
    case 'species':
      return SpeciesType;
    default:
      throw new Error('Unrecognized type `' + swapiType + '`.');
  }
}

var _nodeDefinitions = (0, _graphqlRelay.nodeDefinitions)(function (globalId) {
  var _fromGlobalId = (0, _graphqlRelay.fromGlobalId)(globalId),
      type = _fromGlobalId.type,
      id = _fromGlobalId.id;

  return (0, _apiHelper.getObjectFromTypeAndId)(type, id);
}, function (obj) {
  var parts = obj.url.split('/');
  return swapiTypeToGraphQLType(parts[parts.length - 3]);
}),
    nodeInterface = _nodeDefinitions.nodeInterface,
    nodeField = _nodeDefinitions.nodeField;

exports.nodeInterface = nodeInterface;
exports.nodeField = nodeField;

},{"./apiHelper":198,"./types/film":203,"./types/person":204,"./types/planet":205,"./types/species":206,"./types/starship":207,"./types/vehicle":208,"graphql-relay":87}],203:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _graphql = require('graphql');

var _graphqlRelay = require('graphql-relay');

var _relayNode = require('../relayNode');

var _commonFields = require('../commonFields');

var _connections = require('../connections');

var _person = require('./person');

var _person2 = _interopRequireDefault(_person);

var _planet = require('./planet');

var _planet2 = _interopRequireDefault(_planet);

var _species = require('./species');

var _species2 = _interopRequireDefault(_species);

var _starship = require('./starship');

var _starship2 = _interopRequireDefault(_starship);

var _vehicle = require('./vehicle');

var _vehicle2 = _interopRequireDefault(_vehicle);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * The GraphQL type equivalent of the Film resource
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the
 * LICENSE-examples file in the root directory of this source tree.
 *
 *  strict
 */

var FilmType = new _graphql.GraphQLObjectType({
  name: 'Film',
  description: 'A single film.',
  fields: function fields() {
    return {
      title: {
        type: _graphql.GraphQLString,
        description: 'The title of this film.'
      },
      episodeID: {
        type: _graphql.GraphQLInt,
        resolve: function resolve(film) {
          return film.episode_id;
        },
        description: 'The episode number of this film.'
      },
      openingCrawl: {
        type: _graphql.GraphQLString,
        resolve: function resolve(film) {
          return film.opening_crawl;
        },
        description: 'The opening paragraphs at the beginning of this film.'
      },
      director: {
        type: _graphql.GraphQLString,
        description: 'The name of the director of this film.'
      },
      producers: {
        type: new _graphql.GraphQLList(_graphql.GraphQLString),
        resolve: function resolve(film) {
          return film.producer.split(',').map(function (s) {
            return s.trim();
          });
        },
        description: 'The name(s) of the producer(s) of this film.'
      },
      releaseDate: {
        type: _graphql.GraphQLString,
        resolve: function resolve(film) {
          return film.release_date;
        },
        description: 'The ISO 8601 date format of film release at original creator country.'
      },
      speciesConnection: (0, _connections.connectionFromUrls)('FilmSpecies', 'species', _species2.default),
      starshipConnection: (0, _connections.connectionFromUrls)('FilmStarships', 'starships', _starship2.default),
      vehicleConnection: (0, _connections.connectionFromUrls)('FilmVehicles', 'vehicles', _vehicle2.default),
      characterConnection: (0, _connections.connectionFromUrls)('FilmCharacters', 'characters', _person2.default),
      planetConnection: (0, _connections.connectionFromUrls)('FilmPlanets', 'planets', _planet2.default),
      created: (0, _commonFields.createdField)(),
      edited: (0, _commonFields.editedField)(),
      id: (0, _graphqlRelay.globalIdField)('films')
    };
  },
  interfaces: function interfaces() {
    return [_relayNode.nodeInterface];
  }
});

exports.default = FilmType;

},{"../commonFields":199,"../connections":200,"../relayNode":202,"./person":204,"./planet":205,"./species":206,"./starship":207,"./vehicle":208,"graphql":102,"graphql-relay":87}],204:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _graphql = require('graphql');

var _graphqlRelay = require('graphql-relay');

var _relayNode = require('../relayNode');

var _commonFields = require('../commonFields');

var _connections = require('../connections');

var _apiHelper = require('../apiHelper');

var _film = require('./film');

var _film2 = _interopRequireDefault(_film);

var _planet = require('./planet');

var _planet2 = _interopRequireDefault(_planet);

var _species = require('./species');

var _species2 = _interopRequireDefault(_species);

var _starship = require('./starship');

var _starship2 = _interopRequireDefault(_starship);

var _vehicle = require('./vehicle');

var _vehicle2 = _interopRequireDefault(_vehicle);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * The GraphQL type equivalent of the People resource
 */
var PersonType = new _graphql.GraphQLObjectType({
  name: 'Person',
  description: 'An individual person or character within the Star Wars universe.',
  fields: function fields() {
    return {
      name: {
        type: _graphql.GraphQLString,
        description: 'The name of this person.'
      },
      birthYear: {
        type: _graphql.GraphQLString,
        resolve: function resolve(person) {
          return person.birth_year;
        },
        description: 'The birth year of the person, using the in-universe standard of BBY or ABY -\nBefore the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is\na battle that occurs at the end of Star Wars episode IV: A New Hope.'
      },
      eyeColor: {
        type: _graphql.GraphQLString,
        resolve: function resolve(person) {
          return person.eye_color;
        },
        description: 'The eye color of this person. Will be "unknown" if not known or "n/a" if the\nperson does not have an eye.'
      },
      gender: {
        type: _graphql.GraphQLString,
        description: 'The gender of this person. Either "Male", "Female" or "unknown",\n"n/a" if the person does not have a gender.'
      },
      hairColor: {
        type: _graphql.GraphQLString,
        resolve: function resolve(person) {
          return person.hair_color;
        },
        description: 'The hair color of this person. Will be "unknown" if not known or "n/a" if the\nperson does not have hair.'
      },
      height: {
        type: _graphql.GraphQLInt,
        resolve: function resolve(person) {
          return (0, _apiHelper.convertToNumber)(person.height);
        },
        description: 'The height of the person in centimeters.'
      },
      mass: {
        type: _graphql.GraphQLFloat,
        resolve: function resolve(person) {
          return (0, _apiHelper.convertToNumber)(person.mass);
        },
        description: 'The mass of the person in kilograms.'
      },
      skinColor: {
        type: _graphql.GraphQLString,
        resolve: function resolve(person) {
          return person.skin_color;
        },
        description: 'The skin color of this person.'
      },
      homeworld: {
        type: _planet2.default,
        resolve: function resolve(person) {
          return person.homeworld ? (0, _apiHelper.getObjectFromUrl)(person.homeworld) : null;
        },
        description: 'A planet that this person was born on or inhabits.'
      },
      filmConnection: (0, _connections.connectionFromUrls)('PersonFilms', 'films', _film2.default),
      species: {
        type: _species2.default,
        resolve: function resolve(person) {
          if (!person.species || person.species.length === 0) {
            return null;
          }
          return (0, _apiHelper.getObjectFromUrl)(person.species[0]);
        },
        description: 'The species that this person belongs to, or null if unknown.'
      },
      starshipConnection: (0, _connections.connectionFromUrls)('PersonStarships', 'starships', _starship2.default),
      vehicleConnection: (0, _connections.connectionFromUrls)('PersonVehicles', 'vehicles', _vehicle2.default),
      created: (0, _commonFields.createdField)(),
      edited: (0, _commonFields.editedField)(),
      id: (0, _graphqlRelay.globalIdField)('people')
    };
  },
  interfaces: function interfaces() {
    return [_relayNode.nodeInterface];
  }
}); /**
     * Copyright (c) 2015-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the license found in the
     * LICENSE-examples file in the root directory of this source tree.
     *
     *  strict
     */

exports.default = PersonType;

},{"../apiHelper":198,"../commonFields":199,"../connections":200,"../relayNode":202,"./film":203,"./planet":205,"./species":206,"./starship":207,"./vehicle":208,"graphql":102,"graphql-relay":87}],205:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _graphql = require('graphql');

var _graphqlRelay = require('graphql-relay');

var _relayNode = require('../relayNode');

var _commonFields = require('../commonFields');

var _connections = require('../connections');

var _apiHelper = require('../apiHelper');

var _film = require('./film');

var _film2 = _interopRequireDefault(_film);

var _person = require('./person');

var _person2 = _interopRequireDefault(_person);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * The GraphQL type equivalent of the Planet resource
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the
 * LICENSE-examples file in the root directory of this source tree.
 *
 *  strict
 */

var PlanetType = new _graphql.GraphQLObjectType({
  name: 'Planet',
  description: 'A large mass, planet or planetoid in the Star Wars Universe, at the time of\n0 ABY.',
  fields: function fields() {
    return {
      name: {
        type: _graphql.GraphQLString,
        description: 'The name of this planet.'
      },
      diameter: {
        type: _graphql.GraphQLInt,
        resolve: function resolve(planet) {
          return (0, _apiHelper.convertToNumber)(planet.diameter);
        },
        description: 'The diameter of this planet in kilometers.'
      },
      rotationPeriod: {
        type: _graphql.GraphQLInt,
        resolve: function resolve(planet) {
          return (0, _apiHelper.convertToNumber)(planet.rotation_period);
        },
        description: 'The number of standard hours it takes for this planet to complete a single\nrotation on its axis.'
      },
      orbitalPeriod: {
        type: _graphql.GraphQLInt,
        resolve: function resolve(planet) {
          return (0, _apiHelper.convertToNumber)(planet.orbital_period);
        },
        description: 'The number of standard days it takes for this planet to complete a single orbit\nof its local star.'
      },
      gravity: {
        type: _graphql.GraphQLString,
        description: 'A number denoting the gravity of this planet, where "1" is normal or 1 standard\nG. "2" is twice or 2 standard Gs. "0.5" is half or 0.5 standard Gs.'
      },
      population: {
        type: _graphql.GraphQLFloat,
        resolve: function resolve(planet) {
          return (0, _apiHelper.convertToNumber)(planet.population);
        },
        description: 'The average population of sentient beings inhabiting this planet.'
      },
      climates: {
        type: new _graphql.GraphQLList(_graphql.GraphQLString),
        resolve: function resolve(planet) {
          return planet.climate.split(',').map(function (s) {
            return s.trim();
          });
        },
        description: 'The climates of this planet.'
      },
      terrains: {
        type: new _graphql.GraphQLList(_graphql.GraphQLString),
        resolve: function resolve(planet) {
          return planet.terrain.split(',').map(function (s) {
            return s.trim();
          });
        },
        description: 'The terrains of this planet.'
      },
      surfaceWater: {
        type: _graphql.GraphQLFloat,
        resolve: function resolve(planet) {
          return (0, _apiHelper.convertToNumber)(planet.surface_water);
        },
        description: 'The percentage of the planet surface that is naturally occuring water or bodies\nof water.'
      },
      residentConnection: (0, _connections.connectionFromUrls)('PlanetResidents', 'residents', _person2.default),
      filmConnection: (0, _connections.connectionFromUrls)('PlanetFilms', 'films', _film2.default),
      created: (0, _commonFields.createdField)(),
      edited: (0, _commonFields.editedField)(),
      id: (0, _graphqlRelay.globalIdField)('planets')
    };
  },
  interfaces: function interfaces() {
    return [_relayNode.nodeInterface];
  }
});
exports.default = PlanetType;

},{"../apiHelper":198,"../commonFields":199,"../connections":200,"../relayNode":202,"./film":203,"./person":204,"graphql":102,"graphql-relay":87}],206:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _graphql = require('graphql');

var _graphqlRelay = require('graphql-relay');

var _relayNode = require('../relayNode');

var _commonFields = require('../commonFields');

var _connections = require('../connections');

var _apiHelper = require('../apiHelper');

var _film = require('./film');

var _film2 = _interopRequireDefault(_film);

var _person = require('./person');

var _person2 = _interopRequireDefault(_person);

var _planet = require('./planet');

var _planet2 = _interopRequireDefault(_planet);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * The GraphQL type equivalent of the Species resource
 */
var SpeciesType = new _graphql.GraphQLObjectType({
  name: 'Species',
  description: 'A type of person or character within the Star Wars Universe.',
  fields: function fields() {
    return {
      name: {
        type: _graphql.GraphQLString,
        description: 'The name of this species.'
      },
      classification: {
        type: _graphql.GraphQLString,
        description: 'The classification of this species, such as "mammal" or "reptile".'
      },
      designation: {
        type: _graphql.GraphQLString,
        description: 'The designation of this species, such as "sentient".'
      },
      averageHeight: {
        type: _graphql.GraphQLFloat,
        resolve: function resolve(species) {
          return (0, _apiHelper.convertToNumber)(species.average_height);
        },
        description: 'The average height of this species in centimeters.'
      },
      averageLifespan: {
        type: _graphql.GraphQLInt,
        resolve: function resolve(species) {
          return (0, _apiHelper.convertToNumber)(species.average_lifespan);
        },
        description: 'The average lifespan of this species in years, null if unknown.'
      },
      eyeColors: {
        type: new _graphql.GraphQLList(_graphql.GraphQLString),
        resolve: function resolve(species) {
          return species.eye_colors.split(',').map(function (s) {
            return s.trim();
          });
        },
        description: 'Common eye colors for this species, null if this species does not typically\nhave eyes.'
      },
      hairColors: {
        type: new _graphql.GraphQLList(_graphql.GraphQLString),
        resolve: function resolve(species) {
          if (species.hair_colors === 'none') {
            return [];
          }
          return species.hair_colors.split(',').map(function (s) {
            return s.trim();
          });
        },
        description: 'Common hair colors for this species, null if this species does not typically\nhave hair.'
      },
      skinColors: {
        type: new _graphql.GraphQLList(_graphql.GraphQLString),
        resolve: function resolve(species) {
          return species.skin_colors.split(',').map(function (s) {
            return s.trim();
          });
        },
        description: 'Common skin colors for this species, null if this species does not typically\nhave skin.'
      },
      language: {
        type: _graphql.GraphQLString,
        description: 'The language commonly spoken by this species.'
      },
      homeworld: {
        type: _planet2.default,
        resolve: function resolve(species) {
          return species.homeworld ? (0, _apiHelper.getObjectFromUrl)(species.homeworld) : null;
        },
        description: 'A planet that this species originates from.'
      },
      personConnection: (0, _connections.connectionFromUrls)('SpeciesPeople', 'people', _person2.default),
      filmConnection: (0, _connections.connectionFromUrls)('SpeciesFilms', 'films', _film2.default),
      created: (0, _commonFields.createdField)(),
      edited: (0, _commonFields.editedField)(),
      id: (0, _graphqlRelay.globalIdField)('species')
    };
  },
  interfaces: function interfaces() {
    return [_relayNode.nodeInterface];
  }
}); /**
     * Copyright (c) 2015-present, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the license found in the
     * LICENSE-examples file in the root directory of this source tree.
     *
     *  strict
     */

exports.default = SpeciesType;

},{"../apiHelper":198,"../commonFields":199,"../connections":200,"../relayNode":202,"./film":203,"./person":204,"./planet":205,"graphql":102,"graphql-relay":87}],207:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _graphql = require('graphql');

var _graphqlRelay = require('graphql-relay');

var _relayNode = require('../relayNode');

var _commonFields = require('../commonFields');

var _connections = require('../connections');

var _apiHelper = require('../apiHelper');

var _film = require('./film');

var _film2 = _interopRequireDefault(_film);

var _person = require('./person');

var _person2 = _interopRequireDefault(_person);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * The GraphQL type equivalent of the Starship resource
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the
 * LICENSE-examples file in the root directory of this source tree.
 *
 *  strict
 */

var StarshipType = new _graphql.GraphQLObjectType({
  name: 'Starship',
  description: 'A single transport craft that has hyperdrive capability.',
  fields: function fields() {
    return {
      name: {
        type: _graphql.GraphQLString,
        description: 'The name of this starship. The common name, such as "Death Star".'
      },
      model: {
        type: _graphql.GraphQLString,
        description: 'The model or official name of this starship. Such as "T-65 X-wing" or "DS-1\nOrbital Battle Station".'
      },
      starshipClass: {
        type: _graphql.GraphQLString,
        resolve: function resolve(ship) {
          return ship.starship_class;
        },
        description: 'The class of this starship, such as "Starfighter" or "Deep Space Mobile\nBattlestation"'
      },
      manufacturers: {
        type: new _graphql.GraphQLList(_graphql.GraphQLString),
        resolve: function resolve(ship) {
          return ship.manufacturer.split(',').map(function (s) {
            return s.trim();
          });
        },
        description: 'The manufacturers of this starship.'
      },
      costInCredits: {
        type: _graphql.GraphQLFloat,
        resolve: function resolve(ship) {
          return (0, _apiHelper.convertToNumber)(ship.cost_in_credits);
        },
        description: 'The cost of this starship new, in galactic credits.'
      },
      length: {
        type: _graphql.GraphQLFloat,
        resolve: function resolve(ship) {
          return (0, _apiHelper.convertToNumber)(ship.length);
        },
        description: 'The length of this starship in meters.'
      },
      crew: {
        type: _graphql.GraphQLString,
        description: 'The number of personnel needed to run or pilot this starship.'
      },
      passengers: {
        type: _graphql.GraphQLString,
        description: 'The number of non-essential people this starship can transport.'
      },
      maxAtmospheringSpeed: {
        type: _graphql.GraphQLInt,
        resolve: function resolve(ship) {
          return (0, _apiHelper.convertToNumber)(ship.max_atmosphering_speed);
        },
        description: 'The maximum speed of this starship in atmosphere. null if this starship is\nincapable of atmosphering flight.'
      },
      hyperdriveRating: {
        type: _graphql.GraphQLFloat,
        resolve: function resolve(ship) {
          return (0, _apiHelper.convertToNumber)(ship.hyperdrive_rating);
        },
        description: 'The class of this starships hyperdrive.'
      },
      MGLT: {
        type: _graphql.GraphQLInt,
        resolve: function resolve(ship) {
          return (0, _apiHelper.convertToNumber)(ship.MGLT);
        },
        description: 'The Maximum number of Megalights this starship can travel in a standard hour.\nA "Megalight" is a standard unit of distance and has never been defined before\nwithin the Star Wars universe. This figure is only really useful for measuring\nthe difference in speed of starships. We can assume it is similar to AU, the\ndistance between our Sun (Sol) and Earth.'
      },
      cargoCapacity: {
        type: _graphql.GraphQLFloat,
        resolve: function resolve(ship) {
          return (0, _apiHelper.convertToNumber)(ship.cargo_capacity);
        },
        description: 'The maximum number of kilograms that this starship can transport.'
      },
      consumables: {
        type: _graphql.GraphQLString,
        description: 'The maximum length of time that this starship can provide consumables for its\nentire crew without having to resupply.'
      },
      pilotConnection: (0, _connections.connectionFromUrls)('StarshipPilots', 'pilots', _person2.default),
      filmConnection: (0, _connections.connectionFromUrls)('StarshipFilms', 'films', _film2.default),
      created: (0, _commonFields.createdField)(),
      edited: (0, _commonFields.editedField)(),
      id: (0, _graphqlRelay.globalIdField)('starships')
    };
  },
  interfaces: function interfaces() {
    return [_relayNode.nodeInterface];
  }
});

exports.default = StarshipType;

},{"../apiHelper":198,"../commonFields":199,"../connections":200,"../relayNode":202,"./film":203,"./person":204,"graphql":102,"graphql-relay":87}],208:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _graphql = require('graphql');

var _graphqlRelay = require('graphql-relay');

var _relayNode = require('../relayNode');

var _commonFields = require('../commonFields');

var _connections = require('../connections');

var _apiHelper = require('../apiHelper');

var _film = require('./film');

var _film2 = _interopRequireDefault(_film);

var _person = require('./person');

var _person2 = _interopRequireDefault(_person);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * The GraphQL type equivalent of the Vehicle resource
 */
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the
 * LICENSE-examples file in the root directory of this source tree.
 *
 *  strict
 */

var VehicleType = new _graphql.GraphQLObjectType({
  name: 'Vehicle',
  description: 'A single transport craft that does not have hyperdrive capability',
  fields: function fields() {
    return {
      name: {
        type: _graphql.GraphQLString,
        description: 'The name of this vehicle. The common name, such as "Sand Crawler" or "Speeder\nbike".'
      },
      model: {
        type: _graphql.GraphQLString,
        description: 'The model or official name of this vehicle. Such as "All-Terrain Attack\nTransport".'
      },
      vehicleClass: {
        type: _graphql.GraphQLString,
        resolve: function resolve(vehicle) {
          return vehicle.vehicle_class;
        },
        description: 'The class of this vehicle, such as "Wheeled" or "Repulsorcraft".'
      },
      manufacturers: {
        type: new _graphql.GraphQLList(_graphql.GraphQLString),
        resolve: function resolve(vehicle) {
          return vehicle.manufacturer.split(',').map(function (s) {
            return s.trim();
          });
        },
        description: 'The manufacturers of this vehicle.'
      },
      costInCredits: {
        type: _graphql.GraphQLFloat,
        resolve: function resolve(vehicle) {
          return (0, _apiHelper.convertToNumber)(vehicle.cost_in_credits);
        },
        description: 'The cost of this vehicle new, in Galactic Credits.'
      },
      length: {
        type: _graphql.GraphQLFloat,
        resolve: function resolve(vehicle) {
          return (0, _apiHelper.convertToNumber)(vehicle.length);
        },
        description: 'The length of this vehicle in meters.'
      },
      crew: {
        type: _graphql.GraphQLString,
        description: 'The number of personnel needed to run or pilot this vehicle.'
      },
      passengers: {
        type: _graphql.GraphQLString,
        description: 'The number of non-essential people this vehicle can transport.'
      },
      maxAtmospheringSpeed: {
        type: _graphql.GraphQLInt,
        resolve: function resolve(vehicle) {
          return (0, _apiHelper.convertToNumber)(vehicle.max_atmosphering_speed);
        },
        description: 'The maximum speed of this vehicle in atmosphere.'
      },
      cargoCapacity: {
        type: _graphql.GraphQLFloat,
        resolve: function resolve(ship) {
          return (0, _apiHelper.convertToNumber)(ship.cargo_capacity);
        },
        description: 'The maximum number of kilograms that this vehicle can transport.'
      },
      consumables: {
        type: _graphql.GraphQLString,
        description: 'The maximum length of time that this vehicle can provide consumables for its\nentire crew without having to resupply.'
      },
      pilotConnection: (0, _connections.connectionFromUrls)('VehiclePilots', 'pilots', _person2.default),
      filmConnection: (0, _connections.connectionFromUrls)('VehicleFilms', 'films', _film2.default),
      created: (0, _commonFields.createdField)(),
      edited: (0, _commonFields.editedField)(),
      id: (0, _graphqlRelay.globalIdField)('vehicles')
    };
  },
  interfaces: function interfaces() {
    return [_relayNode.nodeInterface];
  }
});

exports.default = VehicleType;

},{"../apiHelper":198,"../commonFields":199,"../connections":200,"../relayNode":202,"./film":203,"./person":204,"graphql":102,"graphql-relay":87}]},{},[197])(197)
});